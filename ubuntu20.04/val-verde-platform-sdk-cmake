#!/bin/bash

set -e

BINDIR=${BINDIR:-${BUILD_PACKAGE_PREFIX}/bin}
BINTOOLS_PREFIX=${BINTOOLS_PREFIX:-llvm-}
BINTOOLS_PATH_PREFIX=${BINDIR}/${BINTOOLS_PREFIX}
BUILD_TYPE=${BUILD_TYPE:-MinSizeRel}
CMAKE_BINDIR=${CMAKE_BINDIR:-${BINDIR}}
COMPILER_TARGET=${COMPILER_TARGET:-${HOST_TRIPLE}}
INSTALL_PREFIX=${INSTALL_PREFIX:-${TEMPDIR}/org.${PACKAGE_BASE_NAME}/${QUALIFIED_PACKAGE_NAME}${PACKAGE_PREFIX}}
LINKER_OPTIMIZATION_LEVEL=${LINKER_OPTIMIZATION_LEVEL:-2}
OPTIMIZATION_FLAGS=${OPTIMIZATION_FLAGS:-"-DNDEBUG"}
OPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL:-z}
PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-"${PACKAGE_PREFIX}/lib/pkgconfig"}
SYSROOT=${SYSROOT:-${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/sysroot}
SYSTEM_NAME=${SYSTEM_NAME:-Linux}

if [ -z "${DISABLE_POLLY}" ]; then
    CFLAGS="\
        -mllvm -polly \
        ${CFLAGS} \
    "
    CXXFLAGS="\
        -mllvm -polly \
        ${CXXFLAGS} \
    "
    LDFLAGS="\
        -mllvm -polly \
        ${LDFLAGS} \
    "
fi

if [ -z "${DISABLE_STRIP}" ]; then
    LDFLAGS="\
        -s \
        ${LDFLAGS} \
    "
fi

if [ -z "${ENABLE_LLVM_VERIFIER}" ]; then
    LDFLAGS="\
        -disable-llvm-verifier \
        ${LDFLAGS} \
    "
fi

if [ -n "${ENABLE_FLTO}" ]; then
    FLTO_OPTION=`echo ${ENABLE_FLTO} | tr '[:upper:]' '[:lower:]'`
    FLTO_CFLAG="-flto=${FLTO_OPTION}"
fi

if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
    CROSSCOMPILING_CMD="-DCMAKE_CROSSCOMPILING=TRUE"
    SYSTEM_NAME_CMD="-DCMAKE_SYSTEM_NAME=${SYSTEM_NAME}"
fi

AR=${AR:-${BINTOOLS_PATH_PREFIX}ar}
AS=${AS:-${BINDIR}/clang}
AS_COMPILER_ID=${AS_COMPILER_ID:-Clang}
CC=${CC:-${BINDIR}/clang}
CPP=${CPP:-"${CC} -E"}
CXX=${CXX:-${BINDIR}/clang++}
DLLTOOL=${DLLTOOL:-${BINTOOLS_PATH_PREFIX}dlltool}
LD=${LD:-${BINDIR}/ld.lld}
MAKE_PROGRAM=${MAKE_PROGRAM:-${BINDIR}/ninja}
NM=${NM:-${BINTOOLS_PATH_PREFIX}nm}
OBJCOPY=${OBJCOPY:-${BINTOOLS_PATH_PREFIX}objcopy}
OBJDUMP=${OBJDUMP:-${BINTOOLS_PATH_PREFIX}objdump}
RANLIB=${RANLIB:-${BINTOOLS_PATH_PREFIX}ranlib}
RC=${RC:-${BINDIR}/${PACKAGE_BASE_NAME}-platform-sdk-rc}
READELF=${READELF:-${BINTOOLS_PATH_PREFIX}readelf}
SIZE=${SIZE:-${BINTOOLS_PATH_PREFIX}size}
STRINGS=${STRINGS:-${BINTOOLS_PATH_PREFIX}strings}
STRIP=${STRIP:-${BINTOOLS_PATH_PREFIX}strip}
SWIFTC=${SWIFTC:-${BINDIR}/${PACKAGE_BASE_NAME}-platform-sdk-swiftc}

if [ -n "${HOST_ARCH}" ]; then
    ARCH_FLAGS="${ARCH_FLAGS} -march=${HOST_ARCH}"
fi

if [ -n "${HOST_CPU}" ]; then
    ARCH_FLAGS="${ARCH_FLAGS} -mtune=${HOST_CPU}"
fi

ASMFLAGS=${ASMFLAGS:-`echo "\
    ${ARCH_FLAGS} \
    ${FLTO_CFLAG} \
    ${OPTIMIZATION_FLAGS} \
    -O${OPTIMIZATION_LEVEL} \
    ${ASMFLAGS} \
" | xargs`}
CFLAGS=`echo "\
    ${ARCH_FLAGS} \
    ${FLTO_CFLAG} \
    ${OPTIMIZATION_FLAGS} \
    -O${OPTIMIZATION_LEVEL} \
    ${CFLAGS} \
" | xargs`
CXXFLAGS=`echo "\
    ${ARCH_FLAGS} \
    ${FLTO_CFLAG} \
    ${OPTIMIZATION_FLAGS} \
    -O${OPTIMIZATION_LEVEL} \
    ${CXXFLAGS} \
" | xargs`
LDFLAGS=`echo "\
    ${ARCH_FLAGS} \
    ${FLTO_LDFLAG} \
    ${LDFLAGS} \
    ${LIBS} \
    -O${LINKER_OPTIMIZATION_LEVEL} \
" | xargs`
${CMAKE_BINDIR}/cmake \
    -G Ninja \
    -DCMAKE_AR=${AR} \
    -DCMAKE_ASM_COMPILER=${AS} \
    -DCMAKE_ASM_COMPILER_TARGET=${COMPILER_TARGET} \
    -DCMAKE_ASM_COMPILER_ID=${AS_COMPILER_ID} \
    -DCMAKE_ASM_FLAGS_MINSIZEREL="${ASMFLAGS}" \
    -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
    -DCMAKE_C_COMPILER=${CC} \
    -DCMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} \
    -DCMAKE_C_FLAGS_MINSIZEREL="${CFLAGS}" \
    -DCMAKE_CXX_COMPILER=${CXX} \
    -DCMAKE_CXX_COMPILER_TARGET=${HOST_TRIPLE} \
    -DCMAKE_CXX_FLAGS_MINSIZEREL="${CXXFLAGS}" \
    -DCMAKE_CXX_STANDARD=17 \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
    -DCMAKE_LINKER=${LD} \
    -DCMAKE_MAKE_PROGRAM=${MAKE_PROGRAM} \
    -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_NM=${NM} \
    -DCMAKE_OBJCOPY=${OBJCOPY} \
    -DCMAKE_OBJDUMP=${OBJDUMP} \
    -DCMAKE_PREFIX_PATH=${PKG_CONFIG_PATH} \
    -DCMAKE_RANLIB=${RANLIB} \
    -DCMAKE_RC_COMPILER=${RC} \
    -DCMAKE_READELF=${READELF} \
    -DCMAKE_Swift_COMPILER=${SWIFTC} \
    -DCMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} \
    -DCMAKE_Swift_FLAGS="${SWIFTCFLAGS}" \
    -DCMAKE_STRINGS=${STRINGS} \
    -DCMAKE_STRIP=${STRIP} \
    -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
    -DCMAKE_SYSROOT=${SYSROOT} \
    -DCMAKE_SYSTEM_PROCESSOR=${HOST_PROCESSOR} \
    "${CROSSCOMPILING_CMD}" \
    "${SYSTEM_NAME_CMD}" \
    "$@"
