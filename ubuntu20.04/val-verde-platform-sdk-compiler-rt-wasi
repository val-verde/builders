#!/bin/bash

set -e

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=compiler-rt
export SOURCE_ROOT=/sources/llvm-project/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export LLVM_NATIVE_STAGE_ROOT=${LLVM_NATIVE_STAGE_ROOT:-/sources/build-staging/llvm-project-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}
export CLANG_RT_LIB=libclang_rt.builtins-${HOST_PROCESSOR}.a

# Configure the package
mkdir -p ${STAGE_ROOT}
cd ${STAGE_ROOT}
CFLAGS="\
    -nostdlib \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -nostdlib \
    ${CXXFLAGS} \
" \
INSTALL_PREFIX=${STAGE_ROOT}/install-staging${PACKAGE_ROOT} \
SYSTEM_NAME=Fuchsia \
${PACKAGE_BASE_NAME}-platform-sdk-cmake \
    -DCMAKE_C_COMPILER_WORKS=TRUE \
    -DCMAKE_CXX_COMPILER_WORKS=TRUE \
    -DCMAKE_SIZEOF_VOID_P=4 \
    -DCOMPILER_RT_BUILD_LIBFUZZER=FALSE \
    -DCOMPILER_RT_BUILD_PROFILE=FALSE \
    -DCOMPILER_RT_BUILD_SANITIZERS=FALSE \
    -DCOMPILER_RT_BUILD_XRAY=FALSE \
    -DCOMPILER_RT_CAN_EXECUTE_TESTS=FALSE \
    -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=${HOST_TRIPLE} \
    -DCOMPILER_RT_INCLUDE_TESTS=FALSE \
    -DLLVM_CONFIG_PATH=${LLVM_NATIVE_STAGE_ROOT}/bin/llvm-config \
    -DLLVM_TABLEGEN=${LLVM_NATIVE_STAGE_ROOT}/bin/llvm-tblgen \
    ${SOURCE_ROOT}

# Build the components
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-ninja-build

SDK_PLATFORM_DIR=`echo ${SYSTEM_NAME} | tr '[:upper:]' '[:lower:]'`
mkdir -p install${PACKAGE_ROOT}/lib/clang/10.0.0/lib/wasi
mv install-staging${PACKAGE_ROOT}/lib/${SDK_PLATFORM_DIR}/${CLANG_RT_LIB} \
   install${PACKAGE_ROOT}/lib/clang/10.0.0/lib/wasi/${DST_CLANG_RT_LIB}

# Build the package
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-package-build
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-package-install