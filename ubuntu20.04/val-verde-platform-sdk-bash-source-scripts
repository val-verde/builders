#!/bin/bash

set -e

BASE_DIRECTORY=$(echo "${PACKAGE_ROOT}" | cut -d "/" -f2)
DEPENDS=${DEPENDS:=''}
SDK_PLATFORM_DIR=`echo ${SYSTEM_NAME} | tr '[:upper:]' '[:lower:]'`
TARGETS=${TARGETS:-install}
VERSION=${VERSION:='1.0.0'}

function generate-control-file {
    # Template definition
    pushd /sources/pkg-intermediates-${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}
    mkdir DEBIAN
    echo 10 > DEBIAN/compat
    sed "s|DEPENDS|${DEPENDS}|g; \
         s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
         s|PACKAGE_BASE_NAME|${PACKAGE_BASE_NAME}|g; \
         s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g; \
         s|SYSTEM_ARCH|${PACKAGE_ARCH}|g; \
         s|VERSION|${VERSION}|g" \
         ${BUILD_PACKAGE_PREFIX}/share/control.in > DEBIAN/control
    sed "s|PACKAGE_NAME|${PACKAGE_NAME}|g" \
         ${BUILD_PACKAGE_PREFIX}/share/copyright.in > DEBIAN/copyright
    sed "s|CURRENT_DATE|`date`|g; \
         s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
         s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g" \
         ${BUILD_PACKAGE_PREFIX}/share/changelog.in > DEBIAN/changelog
    popd
}

function make-build {
    MAKE_PROGRAM=${MAKE_PROGRAM:-${BUILD_PACKAGE_PREFIX}/bin/make}
    TARGETS=${TARGETS:-install}

    pushd ${STAGE_ROOT}
    ${MAKE_PROGRAM} -j${NUM_PROCESSORS} \
                    ${TARGETS}
    popd
}

function ninja-build {
    MAKE_PROGRAM=${MAKE_PROGRAM:-${BUILD_PACKAGE_PREFIX}/bin/ninja}
    TARGETS=${TARGETS:-install}

    pushd ${STAGE_ROOT}
    ${MAKE_PROGRAM} -j${NUM_PROCESSORS} \
                    ${TARGETS}
    popd
}

function deb-package-build {    
    pushd ${INSTALL_ROOT}
    mkdir -p /sources/pkg-intermediates-${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}
    rsync -aPx ${BASE_DIRECTORY} /sources/pkg-intermediates-${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}
    generate-control-file "${PACKAGE_NAME}"
    dpkg -b /sources/pkg-intermediates-${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}
    mv /sources/pkg-intermediates-${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}.deb ${DEB_PATH}/${PACKAGE_NAME}.deb
    rm -r /sources/pkg-intermediates-${SOURCE_PACKAGE_NAME}
    popd
}

function deb-package-install {
    pushd /sources
    dpkg -i ${DEB_PATH}/${PACKAGE_NAME}.deb
    popd
}

function deb-package-mgmt {
    pushd /sources
    PACKAGE_INPUT=($@)
    PACKAGE_COUNT=$((${#PACKAGE_INPUT[@]} / 2))

    for i in `seq 0 $(($PACKAGE_COUNT - 1))`; do
        PACKAGE_NAME_INDEX=$((i * 2))
        SYSTEM_TYPE_INDEX=$((i * 2 + 1))
        PKG_NAME=${PACKAGE_INPUT[$PACKAGE_NAME_INDEX]}
        SYSTEM_TYPE=${PACKAGE_INPUT[$SYSTEM_TYPE_INDEX]}
        SYSTEM_OS=${SYSTEM_TYPE}_OS
        SYSTEM_OS_API=${SYSTEM_TYPE}_OS_API_LEVEL
        SYSTEM_ARCH=${SYSTEM_TYPE}_ARCH
        PKG_SUFFIX=${!SYSTEM_OS}${!SYSTEM_OS_API}-${!SYSTEM_ARCH}
        PKG_PREFIX=${PACKAGE_BASE_NAME}-${PKG_NAME}
        PACKAGE_FILE_NAME=${PKG_PREFIX}-${PKG_SUFFIX}
        DEB_NAME=${PACKAGE_FILE_NAME}.deb
        QUALIFIED_FILE_NAME="${QUALIFIED_FILE_NAME} ${PACKAGE_FILE_NAME}"
        QUALIFIED_DEB="${QUALIFIED_DEB} ${DEB_NAME}"
    done
        if [[ ${PACKAGE_ACTION} = 'UNINSTALL' ]]; then
            dpkg -r --force-depends ${QUALIFIED_FILE_NAME}
        elif [[ ${PACKAGE_ACTION} = 'INSTALL' ]]; then
            dpkg -i ${QUALIFIED_DEB}
        fi
    popd
}

function rpath-fixup {
    SDK_PLATFORM_DIR=`echo ${SYSTEM_NAME} | tr '[:upper:]' '[:lower:]'`

    if [ "${SDK_PLATFORM_DIR}" != "windows" ]; then
        if [ "${SDK_PLATFORM_DIR}" != "${HOST_OS}" ]; then
            SDK_PLATFORM_DIR=${HOST_OS}
        fi

        COMPONENT_RPATH=${COMPONENT_RPATH:-"\$ORIGIN/../lib:\$ORIGIN/../lib/swift/${SDK_PLATFORM_DIR}"}

        for COMPONENT in ${COMPONENTS}; do
            patchelf --set-rpath ${COMPONENT_RPATH} \
                                 ${COMPONENT}
        done
    fi
}
