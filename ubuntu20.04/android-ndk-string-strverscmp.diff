--- a/string.h	2020-05-26 11:33:22.000000000 +0000
+++ b/string.h	2020-09-02 05:21:40.113684512 +0000
@@ -30,6 +30,7 @@
 #define _STRING_H

 #include <sys/cdefs.h>
+#include <ctype.h>
 #include <stddef.h>
 #include <xlocale.h>

@@ -269,6 +270,89 @@
 const char* strpbrk(const char* h, const char* n) __prefer_this_overload {
     return __bionic_strpbrk(h, n);
 }
+
+inline __always_inline
+int strverscmp (const char *s1, const char *s2) {
+    /* states: S_N: normal, S_I: comparing integral part, S_F: comparing
+               fractional parts, S_Z: idem but with leading Zeroes only */
+    #define  S_N    0x0
+    #define  S_I    0x4
+    #define  S_F    0x8
+    #define  S_Z    0xC
+
+    /* result_type: CMP: return diff; LEN: compare using len_diff/diff */
+    #define  CMP    2
+    #define  LEN    3
+
+    const unsigned char *p1 = (const unsigned char *) s1;
+    const unsigned char *p2 = (const unsigned char *) s2;
+    unsigned char c1, c2;
+    int state;
+    int diff;
+
+    /* Symbol(s)    0       [1-9]   others  (padding)
+       Transition   (10) 0  (01) d  (00) x  (11) -   */
+    static const unsigned int next_state[] = {
+        /* state    x    d    0    - */
+        /* S_N */  S_N, S_I, S_Z, S_N,
+        /* S_I */  S_N, S_I, S_I, S_I,
+        /* S_F */  S_N, S_F, S_F, S_F,
+        /* S_Z */  S_N, S_F, S_Z, S_Z
+    };
+
+    static const int result_type[] = {
+        /* state   x/x  x/d  x/0  x/-  d/x  d/d  d/0  d/-
+                   0/x  0/d  0/0  0/-  -/x  -/d  -/0  -/- */
+
+        /* S_N */  CMP, CMP, CMP, CMP, CMP, LEN, CMP, CMP,
+                   CMP, CMP, CMP, CMP, CMP, CMP, CMP, CMP,
+        /* S_I */  CMP, -1,  -1,  CMP, +1,  LEN, LEN, CMP,
+                   +1,  LEN, LEN, CMP, CMP, CMP, CMP, CMP,
+        /* S_F */  CMP, CMP, CMP, CMP, CMP, LEN, CMP, CMP,
+                   CMP, CMP, CMP, CMP, CMP, CMP, CMP, CMP,
+        /* S_Z */  CMP, +1,  +1,  CMP, -1,  CMP, CMP, CMP,
+                   -1,  CMP, CMP, CMP
+    };
+
+    if (p1 == p2)
+        return 0;
+
+    c1 = *p1++;
+    c2 = *p2++;
+    /* Hint: '0' is a digit too.  */
+    state = S_N | ((c1 == '0') + (isdigit (c1) != 0));
+
+    while ((diff = c1 - c2) == 0 && c1 != '\0') {
+        state = next_state[state];
+        c1 = *p1++;
+        c2 = *p2++;
+        state |= (c1 == '0') + (isdigit (c1) != 0);
+    }
+
+    state = result_type[state << 2 | (((c2 == '0') + (isdigit (c2) != 0)))];
+
+    switch (state) {
+    case CMP:
+        return diff;
+
+    case LEN:
+        while (isdigit (*p1++))
+            if (!isdigit (*p2++))
+                return 1;
+
+        return isdigit (*p2) ? -1 : diff;
+
+    default:
+        return state;
+    }
+
+    #undef  S_N
+    #undef  S_I
+    #undef  S_F
+    #undef  S_Z
+    #undef  CMP
+    #undef  LEN
+}
 }
 #undef __prefer_this_overload
 #endif
