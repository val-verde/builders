#!/bin/bash

set -e

# TODO:
# Replace all sources to ${PACKAGE_ROOT}/src/${PACKAGE_NAME}
# Replace all build-staging to ${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}/build
# SOURCE_ROOT to ${PACKAGE_ROOT}/src (global variable)
# All fetched resources should be tar'ed, alien'ed and stored in sources (and the deb packages here should be appended with src)
# Variable-ize where possible
# Intermediates where there are steps between ninja and ninja install, these should be 
# ${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}/build/${SOURCE_PACKAGE_NAME}
# Copy , chmod +x, stage into install and make deb files for each (cmake/clang++/swift build)
# Set all environment vars

export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=llvm-project
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}

EXTRA_PROJECTS=${EXTRA_PROJECTS:-"clang-tools-extra;libclc;mlir;openmp;parallel-libs;polly;pstl"}
USE_NEWPM=${USE_NEWPM:-FALSE}

# Configure the package
rm -rf ${STAGE_ROOT}/*
cd ${STAGE_ROOT}

${PACKAGE_BASE_NAME}-platform-sdk-cmake \
    -DBUILD_SHARED_LIBS=FALSE \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_ENABLE_ARCMT=TRUE \
    -DCLANG_ENABLE_STATIC_ANALYZER=TRUE \
    -DCLANG_INCLUDE_DOCS=FALSE \
    -DCLANG_INCLUDE_TESTS=FALSE \
    -DCLANG_LINK_CLANG_DYLIB=TRUE \
    -DCLANG_TOOL_ARCMT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_CLANG_REFACTOR_TEST_BUILD=FALSE \
    -DCLANG_TOOL_C_ARCMT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_C_INDEX_TEST_BUILD=FALSE \
    -DCMAKE_INSTALL_PREFIX=${STAGE_ROOT}/install${PACKAGE_PREFIX} \
    -DCOMPILER_RT_CAN_EXECUTE_TESTS=FALSE \
    -DCOMPILER_RT_INCLUDE_TESTS=FALSE \
    -DFFI_INCLUDE_DIR=${SYSROOT}/usr/include/${HOST_TRIPLE} \
    -DFFI_INCLUDE_PATH=${SYSROOT}/usr/include/${HOST_TRIPLE} \
    -DFFI_LIBRARY_DIR=${SYSROOT}/usr/lib/${HOST_TRIPLE} \
    -DFFI_LIBRARY_PATH=${SYSROOT}/usr/lib/${HOST_TRIPLE} \
    -DHAVE_CXX_ATOMICS_WITH_LIB=TRUE \
    -DHAVE_CXX_ATOMICS64_WITH_LIB=TRUE \
    -DHAVE_GNU_POSIX_REGEX=TRUE \
    -DHAVE_INOTIFY=TRUE \
    -DHAVE_LIBCXXABI=TRUE \
    -DHAVE_LIBUNWIND=TRUE \
    -DHAVE_THREAD_SAFETY_ATTRIBUTES=TRUE \
    -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=TRUE \
    -DLIBCXX_ENABLE_ASSERTIONS=FALSE \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=TRUE \
    -DLIBCXX_ENABLE_EXCEPTIONS=TRUE \
    -DLIBCXX_ENABLE_FILESYSTEM=TRUE \
    -DLIBCXX_ENABLE_RTTI=TRUE \
    -DLIBCXX_ENABLE_STATIC=FALSE \
    -DLIBCXX_ENABLE_SHARED=TRUE \
    -DLIBCXX_ENABLE_STATIC=FALSE \
    -DLIBCXX_ENABLE_THREADS=TRUE \
    -DLIBCXX_HAS_PTHREAD_API=TRUE \
    -DLIBCXX_HAS_WIN32_THREAD_API=FALSE \
    -DLIBCXX_INCLUDE_BENCHMARKS=FALSE \
    -DLIBCXX_INCLUDE_DOCS=FALSE \
    -DLIBCXX_USE_COMPILER_RT=TRUE \
    -DLIBCXXABI_ENABLE_ASSERTIONS=FALSE \
    -DLIBCXXABI_ENABLE_EXCEPTIONS=TRUE \
    -DLIBCXXABI_ENABLE_STATIC=FALSE \
    -DLIBCXXABI_ENABLE_SHARED=TRUE \
    -DLIBCXXABI_ENABLE_THREADS=TRUE \
    -DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=FALSE \
    -DLIBCXXABI_USE_COMPILER_RT=TRUE \
    -DLIBCXXABI_USE_LLVM_UNWINDER=TRUE \
    -DLIBCXXABI_USE_SJLJ_EXCEPTIONS=FALSE \
    -DLIBOMP_ENABLE_ASSERTIONS=FALSE \
    -DLIBOMPTARGET_DEP_LIBFFI_INCLUDE_DIR=/usr/include/${HOST_TRIPLE} \
    -DLIBOMPTARGET_DEP_LIBELF_LIBRARIES:FILEPATH=/usr/lib/${HOST_TRIPLE}/libelf.so \
    -DLIBOMPTARGET_NVPTX_ALTERNATE_HOST_COMPILER=gcc-8 \
    -DLIBUNWIND_ENABLE_ASSERTIONS=FALSE \
    -DLIBUNWIND_ENABLE_PEDANTIC=FALSE \
    -DLIBUNWIND_ENABLE_SHARED=TRUE \
    -DLIBUNWIND_ENABLE_STATIC=FALSE \
    -DLIBUNWIND_ENABLE_THREADS=TRUE \
    -DLIBUNWIND_INCLUDE_DOCS=FALSE \
    -DLIBUNWIND_USE_COMPILER_RT=TRUE \
    -DLLD_INCLUDE_TESTS=FALSE \
    -DLLVM_BUILD_EXAMPLES=FALSE \
    -DLLVM_BUILD_DOCS=FALSE \
    -DLLVM_BUILD_LLVM_DYLIB=TRUE \
    -DLLVM_BUILD_TESTS=FALSE \
    -DLLVM_BUILD_UTILS=TRUE \
    -DLLVM_DEFAULT_TARGET_TRIPLE=${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS} \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_FFI=TRUE \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DLLVM_ENABLE_LLD=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libcxx;libcxxabi;libunwind;lld;${EXTRA_PROJECTS}" \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_ENABLE_THREADS=TRUE \
    -DLLVM_ENABLE_UNWIND_TABLES=FALSE \
    -DLLVM_ENABLE_WARNINGS=FALSE \
    -DLLVM_ENABLE_Z3_SOLVER=TRUE \
    -DLLVM_ENABLE_ZLIB=TRUE \
    -DLLVM_HOST_TRIPLE=${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS} \
    -DLLVM_INCLUDE_DOCS=FALSE \
    -DLLVM_INCLUDE_EXAMPLES=FALSE \
    -DLLVM_INCLUDE_GO_TESTS=FALSE \
    -DLLVM_INCLUDE_TESTS=FALSE \
    -DLLVM_INCLUDE_UTILS=TRUE \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=TRUE \
    -DLLVM_LINK_LLVM_DYLIB=TRUE \
    -DLLVM_OPTIMIZED_TABLEGEN=TRUE \
    -DLLVM_POLLY_LINK_INTO_TOOLS=TRUE \
    -DLLVM_TARGETS_TO_BUILD="AArch64;AMDGPU;ARM;Hexagon;NVPTX;PowerPC;RISCV;WebAssembly;X86" \
    -DLLVM_TOOL_LLVM_C_TEST_BUILD=FALSE \
    -DLLVM_USE_HOST_TOOLS=FALSE \
    -DLLVM_USE_NEWPM=${USE_NEWPM} \
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=TRUE \
    -DLLVM_USE_RELATIVE_PATHS_IN_FILES=TRUE \
    -DLLVM_Z3_INSTALL_DIR=${SYSROOT} \
    -DPYTHON_EXECUTABLE=/usr/bin/python2 \
    -DSANITIZER_CXX_ABI=libc++ \
    ${SOURCE_ROOT}/llvm

# Build the components
export TARGETS="\
    MLIRAffineOpsIncGen \
    MLIRCallOpInterfacesIncGen \
    MLIRFxpMathOpsIncGen \
    MLIRGPUOpsIncGen \
    MLIRGPUToNVVMIncGen \
    MLIRLinalgOpsIncGen \
    MLIRLinalgStructuredOpsIncGen \
    MLIRLoopLikeInterfaceIncGen \
    MLIRLoopOpsIncGen \
    MLIRLLVMConversionsIncGen \
    MLIRLLVMOpsIncGen \
    MLIRNVVMOpsIncGen \
    MLIRNVVMConversionsIncGen \
    MLIROpAsmInterfacesIncGen \
    MLIRQuantOpsIncGen \
    MLIRROCDLConversionsIncGen \
    MLIRROCDLOpsIncGen
    MLIRStandardOpsIncGen \
    MLIRStandardToSPIRVIncGen \
    MLIRSPIRVAvailabilityIncGen \
    MLIRSPIRVCanonicalizationIncGen \
    MLIRSPIRVEnumAvailabilityIncGen \
    MLIRSPIRVEnumsIncGen \
    MLIRSPIRVOpsIncGen \
    MLIRSPIRVTargetAndABIIncGen \
    MLIRTableGenEnumsIncGen \
    MLIRTableGenStructAttrIncGen \
    MLIRTestLinalgTransformPatternsIncGen \
    MLIRTestOpsIncGen \
    MLIRTestVectorTransformPatternsIncGen \
    MLIRTypeInferOpInterfaceIncGen \
    MLIRVectorOpsIncGen \
    MLIRVectorTransformPatternsIncGen"
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-ninja-build

unset TARGETS
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-ninja-build

rsync -aPx ${STAGE_ROOT}/bin/llvm-dlltool \
           ${STAGE_ROOT}/install${PACKAGE_PREFIX}/bin

# Package the components
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-package-build

# Build the package
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-package-install
