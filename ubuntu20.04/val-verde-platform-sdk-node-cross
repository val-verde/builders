#!/bin/bash

set -e -x

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=node
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
NODE_NATIVE_STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}

rm -rf ${SOURCE_ROOT}
git clone https://github.com/${PACKAGE_BASE_NAME}/${SOURCE_PACKAGE_NAME}.git \
          --branch dutch-master \
          --single-branch \
          ${SOURCE_ROOT}

mkdir -p ${STAGE_ROOT}
cd ${STAGE_ROOT}

rsync -aPx ${SOURCE_ROOT}/* \
           ${STAGE_ROOT}
sed -i \
    "s|<(PRODUCT_DIR)\/<(EXECUTABLE_PREFIX)|${NODE_NATIVE_STAGE_ROOT}/out/Release/|g" \
    ${STAGE_ROOT}/tools/v8_gypfiles/v8.gyp

CONFIGURE_HOST_OS=${HOST_OS}
CONFIGURE_HOST_PROCESSOR=${HOST_PROCESSOR}

if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
    CROSS_COMPILING_CMD="--cross-compiling"
fi

if [ "${HOST_OS}" = "android" ]; then
    export GYP_DEFINES="\
        target_arch=${CONFIGURE_HOST_PROCESSOR} \
        v8_target_arch=${CONFIGURE_HOST_PROCESSOR} \
        host_os=${CONFIGURE_HOST_OS} \
        android_target_arch=${CONFIGURE_HOST_PROCESSOR} \
        OS=${CONFIGURE_HOST_OS} \
    "
elif [ "${HOST_OS}" = "gnu" ]; then
    CONFIGURE_HOST_OS=linux
elif [ "${HOST_OS}" = "mingw32" ]; then
    CONFIGURE_HOST_OS=win
fi

if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
    CONFIGURE_HOST_PROCESSOR=arm64
fi

AR=${AR:-${BUILD_PACKAGE_PREFIX}/bin/llvm-ar} \
CC=${CC:-${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-clang} \
CFLAGS=${CFLAGS} \
CPP=${CPP:-"${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-clang -E"} \
CPPFLAGS=${CPPFLAGS} \
CXX=${CXX:-${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-clang++} \
CXXFLAGS=${CXXFLAGS} \
LD=${LD:-${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-clang} \
LDFLAGS=${LDFLAGS} \
PKG_CONFIG=${PKG_CONFIG:-${BUILD_PACKAGE_PREFIX}/bin/pkg-config} \
PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-${PACKAGE_PREFIX}/lib/pkgconfig} \
RANLIB=${RANLIB:-${BUILD_PACKAGE_PREFIX}/bin/llvm-ranlib} \
${STAGE_ROOT}/configure \
    --dest-cpu=${CONFIGURE_HOST_PROCESSOR} \
    --dest-os=${CONFIGURE_HOST_OS} \
    --prefix=${STAGE_ROOT}/install${PACKAGE_PREFIX} \
    --shared-openssl \
    --shared-openssl-includes=${PACKAGE_PREFIX}/include \
    --shared-openssl-libpath=${PACKAGE_PREFIX}/lib \
    --shared-zlib \
    --with-intl=system-icu \
    ${CROSS_COMPILING_CMD}

# Build the components
source ${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-make-build

# Build the package
source ${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-package-build

# Install the package
source ${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-package-install
