#!/bin/bash

set -e

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=node
export SOURCE_PACKAGE_VERSION=9999-git
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export INSTALL_ROOT=${TEMPDIR}/org.${PACKAGE_BASE_NAME}/${QUALIFIED_PACKAGE_NAME}
export NODE_NATIVE_STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export DEPENDS="\
    ${PACKAGE_BASE_NAME}-icu4c-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-openssl-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-python-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-zlib-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
rm -rf ${SOURCE_ROOT}
git clone https://github.com/${PACKAGE_BASE_NAME}/${SOURCE_PACKAGE_NAME}.git \
          --branch dutch-master \
          --single-branch \
          ${SOURCE_ROOT}

mkdir -p ${STAGE_ROOT} ${INSTALL_ROOT}
cd ${STAGE_ROOT}

rsync -aPx ${SOURCE_ROOT}/* \
           ${STAGE_ROOT}/

CONFIGURE_BUILD_OS=${BUILD_OS}
CONFIGURE_HOST_OS=${HOST_OS}
CONFIGURE_HOST_PROCESSOR=${HOST_PROCESSOR}

if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
    CROSS_COMPILING_CMD="--cross-compiling"
fi

if [ "${BUILD_OS}" = "gnu" ]; then
    CONFIGURE_BUILD_OS=linux
fi

if [ "${BUILD_PROCESSOR}" = "aarch64" ]; then
    CONFIGURE_BUILD_PROCESSOR=arm64
elif [ "${BUILD_PROCESSOR}" = "x86_64" ]; then
    CONFIGURE_BUILD_PROCESSOR=x64
fi

if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
    CONFIGURE_HOST_PROCESSOR=arm64
elif [ "${HOST_PROCESSOR}" = "x86_64" ]; then
    CONFIGURE_HOST_PROCESSOR=x64
fi

if [ "${HOST_OS}" = "android" ]; then
    export GYP_DEFINES="\
        android_target_arch=${CONFIGURE_HOST_PROCESSOR} \
	host_arch=${CONFIGURE_BUILD_PROCESSOR} \
        host_os=${CONFIGURE_BUILD_OS} \
        target_arch=${CONFIGURE_HOST_PROCESSOR} \
        v8_target_arch=${CONFIGURE_HOST_PROCESSOR} \
        OS=${CONFIGURE_HOST_OS} \
    "
elif [ "${HOST_OS}" = "gnu" ]; then
    CONFIGURE_HOST_OS=linux
elif [ "${HOST_OS}" = "mingw32" ]; then
    CONFIGURE_HOST_OS=win
fi

export AR_host=${AR_host:-${BUILDER_SCRIPT_PATH}/llvm-ar}
export AR_target=${AR:-${BUILDER_SCRIPT_PATH}/llvm-ar}
export AS_host=${AS_host:-${BUILDER_SCRIPT_PATH}/clang}
export AS_target=${AS:-${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-clang}
export CC_host=${CC_host:-${BUILDER_SCRIPT_PATH}/clang}
export CC_target=${CC:-${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-clang}
export CFLAGS_host="\
    -I${BUILD_PACKAGE_PREFIX}/include \
"
export CFLAGS_target=${CFLAGS}
export CPP_host=${CPP_host:-"${BUILDER_SCRIPT_PATH}/clang -E"}
export CPP_target=${CPP:-"${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-clang -E"}
export CPPFLAGS_host="\
    -I${BUILD_PACKAGE_PREFIX}/include \
"
export CPPFLAGS_target=${CPPFLAGS}
export CXX_host=${CXX_host:-"${BUILDER_SCRIPT_PATH}/clang++ -cxx-isystem ${BUILD_PACKAGE_PREFIX}/include/c++/v1"}
export CXX_target=${CXX_target:-${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-clang++}
export CXXFLAGS_host="\
    -cxx-isystem ${BUILD_PACKAGE_PREFIX}/include/c++/v1 \
    -I${BUILD_PACKAGE_PREFIX}/include \
"
LDFLAGS_host="\
    -L${BUILD_PACKAGE_PREFIX}/lib \
"
export LDFLAGS=${LDFLAGS}
export LINK_host="${LD_host:-${BUILDER_SCRIPT_PATH}/clang++} ${LDFLAGS_host}"
export LINK_target=${LD_target:-${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-clang++}
export PKG_CONFIG=${PKG_CONFIG:-${BUILDER_SCRIPT_PATH}/pkg-config}
export PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-${PACKAGE_PREFIX}/lib/pkgconfig}
export RANLIB_host=${RANLIB_host:-${BUILDER_SCRIPT_PATH}/llvm-ranlib}
export RANLIB_target=${RANLIB:-${BUILDER_SCRIPT_PATH}/llvm-ranlib}

${STAGE_ROOT}/configure \
    --dest-cpu=${CONFIGURE_HOST_PROCESSOR} \
    --dest-os=${CONFIGURE_HOST_OS} \
    --prefix=${INSTALL_ROOT}${PACKAGE_PREFIX} \
    --shared-openssl \
    --shared-zlib \
    --with-intl=system-icu \
    ${CROSS_COMPILING_CMD}

# Build the components
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-make-build

if [ "${HOST_OS}" = "android" ]; then
    sed -i \
        's|/usr/bin/env|/system/bin/env|g' \
        `grep -r "/usr/bin/env" ${INSTALL_ROOT}${PACKAGE_PREFIX} | cut -d: -f1`
fi

# Build the package
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-package-${PACKAGE_CLASS}-build

# Install the package
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-package-install
