#!/bin/bash

set -e

# Set all environment vars
export SOURCE_PACKAGE_NAME=node
export SOURCE_PACKAGE_VERSION=9999-git
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}

# Source package build helper functions
source ${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-bash-source-scripts

export-compiler-environment
generate-compiler-tools

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-icu4c-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-libuv-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-openssl-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-python-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-zlib-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
export NODE_NATIVE_STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}

# Configure the build components
GIT_URL="https://github.com/${VAL_VERDE_GH_TEAM}/${SOURCE_PACKAGE_NAME}.git" \
git-clone val-verde-mainline

cd ${STAGE_ROOT}

rsync -aPx ${SOURCE_ROOT}/ \
           ${STAGE_ROOT}

CONFIGURE_BUILD_OS=${BUILD_OS}
CONFIGURE_HOST_OS=${HOST_OS}
CONFIGURE_HOST_PROCESSOR=${HOST_PROCESSOR}

if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
    CROSS_COMPILING_CMD="--cross-compiling"
fi

if [ "${BUILD_OS}" = "gnu" ] ||
   [ "${BUILD_OS}" = "gnu" ]; then
    CONFIGURE_BUILD_OS=linux
fi

if [ "${BUILD_PROCESSOR}" = "aarch64" ]; then
    CONFIGURE_BUILD_PROCESSOR=arm64
elif [ "${BUILD_PROCESSOR}" = "x86_64" ]; then
    CONFIGURE_BUILD_PROCESSOR=x64
fi

if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
    CONFIGURE_HOST_PROCESSOR=arm64
elif [ "${HOST_PROCESSOR}" = "x86_64" ]; then
    CONFIGURE_HOST_PROCESSOR=x64
fi

if [ "${HOST_OS}" = "android" ]; then
    export GYP_DEFINES="\
        android_target_arch=${CONFIGURE_HOST_PROCESSOR} \
        host_arch=${CONFIGURE_BUILD_PROCESSOR} \
        host_os=${CONFIGURE_BUILD_OS} \
        target_arch=${CONFIGURE_HOST_PROCESSOR} \
        v8_target_arch=${CONFIGURE_HOST_PROCESSOR} \
        OS=${CONFIGURE_HOST_OS} \
    "
elif [ "${HOST_OS}" = "gnu" ] ||
     [ "${HOST_OS}" = "musl" ] ; then
    CONFIGURE_HOST_OS=linux
elif [ "${HOST_OS}" = "mingw32" ]; then
    COMMON_CFLAGS="\
        -fms-compatibility-version=19.2 \
        -fms-extensions \
        -municode \
        -DUNICODE \
    "
    CFLAGS="\
        ${COMMON_CFLAGS} \
        ${CFLAGS} \
    "
    CXXFLAGS="\
        ${COMMON_CFLAGS} \
        ${CXXFLAGS} \
    "
    LDFLAGS="\
        -municode \
        ${LDFLAGS} \
    "
    export GYP_DEFINES="\
        OS=${CONFIGURE_HOST_OS} \
    "
fi

if [ -z "${DISABLE_LIBNODE_SHARED}" ]; then
    LIBNODE_SHARED_CMD="--shared"
fi

DISABLED_WARNING_CFLAGS=`echo "\
    -Wno-deprecated-enum-enum-conversion \
    -Wno-deprecated-volatile \
    -Wno-ignored-attributes \
    -Wno-implicit-const-int-float-conversion \
    -Wno-macro-redefined \
" | xargs`

export AR_host=${AR_host:-${BUILD_PACKAGE_PREFIX}/bin/llvm-ar}
export AR_target=${AR}
export AS_host=${AS_host:-${BUILD_PACKAGE_PREFIX}/bin/clang}
export AS_target=${AS}
export CC_host=${CC_host:-${BUILD_PACKAGE_PREFIX}/bin/clang}
export CC_target=${CC}
export CFLAGS_host=`echo "\
    -I${BUILD_PACKAGE_PREFIX}/include \
    ${DISABLED_WARNING_CFLAGS} \
" | xargs`
export CFLAGS=`echo ${CFLAGS} | xargs`
export CPP_host=${CPP_host:-"${BUILD_PACKAGE_PREFIX}/bin/clang -E"}
export CPP_target=${CPP}
export CPPFLAGS_host=`echo "\
    -I${BUILD_PACKAGE_PREFIX}/include \
    ${DISABLED_WARNING_CFLAGS} \
" | xargs`
export CPPFLAGS=`echo ${CPPFLAGS} | xargs`
export CXX_host=${CXX_host:-"${BUILD_PACKAGE_PREFIX}/bin/clang++ -stdlib++-isystem ${BUILD_PACKAGE_PREFIX}/include/c++/v1"}
export CXX_target=${CXX}
export CXXFLAGS_host=`echo "\
    -stdlib++-isystem ${BUILD_PACKAGE_PREFIX}/include/c++/v1 \
    -I${BUILD_PACKAGE_PREFIX}/include \
    ${DISABLED_WARNING_CFLAGS} \
" | xargs`
export CXXFLAGS=`echo "\
    ${DISABLED_WARNING_CFLAGS} \
    ${CXXFLAGS} \
" | xargs`
LDFLAGS_host=`echo "\
    -L${BUILD_PACKAGE_PREFIX}/lib \
" | xargs`
export LDFLAGS=`echo ${LDFLAGS} | xargs`
export LINK="${LD_host:-${BUILD_PACKAGE_PREFIX}/bin/clang++} ${LDFLAGS_host}"
export LINK_target=${CXX}
export RANLIB_host=${RANLIB_host:-${BUILD_PACKAGE_PREFIX}/bin/llvm-ranlib}
export RANLIB_target=${RANLIB}

${STAGE_ROOT}/configure \
    --dest-cpu=${CONFIGURE_HOST_PROCESSOR} \
    --dest-os=${CONFIGURE_HOST_OS} \
    --prefix=${INSTALL_ROOT}${PACKAGE_PREFIX} \
    --shared-openssl \
    --shared-libuv \
    --shared-zlib \
    --with-intl=system-icu \
    ${CROSS_COMPILING_CMD} \
    ${LIBNODE_SHARED_CMD}

# Build the components
make-build

rsync -aPx ${STAGE_ROOT}/out/Release/node \
           ${INSTALL_ROOT}${PACKAGE_PREFIX}/bin

if [ "${HOST_OS}" = "android" ]; then
    sed -i \
        's|/usr/bin/env|/system/bin/env|g' \
        `grep -rl "/usr/bin/env" ${INSTALL_ROOT}${PACKAGE_PREFIX}`
fi

# Build the package
deb-package-build

# Install the package
deb-package-install
