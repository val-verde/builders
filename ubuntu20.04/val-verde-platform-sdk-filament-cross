#!/bin/bash

set -e

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=filament
export SOURCE_PACKAGE_VERSION=9999-git
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export INSTALL_ROOT=${TEMPDIR}/org.${PACKAGE_BASE_NAME}/${QUALIFIED_PACKAGE_NAME}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export DEPENDS="\
    ${PACKAGE_BASE_NAME}-glslang-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-spirv-tools-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-vulkan-loader-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"

BUILD_TYPE=${BUILD_TYPE:-MinSizeRel}

rm -rf ${SOURCE_ROOT}
git clone https://github.com/${PACKAGE_BASE_NAME}/${SOURCE_PACKAGE_NAME}.git \
          --single-branch \
          --branch dutch-master \
          ${SOURCE_ROOT}

mkdir -p ${STAGE_ROOT} ${INSTALL_ROOT}
cd ${STAGE_ROOT}
rsync -aPx ${SOURCE_ROOT}/* \
           ${STAGE_ROOT}/

if [ "${BUILD_TRIPLE}" != ${HOST_TRIPLE} ]; then
    rsync -aPx ${BUILD_PACKAGE_PREFIX}/lib/cmake/${SOURCE_PACKAGE_NAME}.cmake \
               ${STAGE_ROOT}/ImportExecutables-${BUILD_TYPE}.cmake
fi

if [ "${HOST_OS}" = "android" ]; then
    CFLAGS="\
        -DANDROID \
        ${CFLAGS} \
    "
    CXXFLAGS="\
        -DANDROID \
        ${CXXFLAGS} \
    "
    CMAKE_ANDROID_DEFINE_CMD="-DANDROID=TRUE"
elif [ "${HOST_OS}" = "mingw32" ]; then
    CMAKE_ASM_COMPILER_CMD="-DCMAKE_ASM_COMPILER=${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-ml64"
    CMAKE_ASM_COMPILER_ID_CMD="-DCMAKE_ASM_COMPILER_ID=MSVC"
    CMAKE_ASM_FLAGS_CMD="-DCMAKE_ASM_FLAGS_MINSIZEREL="
    LDFLAGS="\
        -lws2_32 \
        ${LDFLAGS} \
    "
fi

CFLAGS="\
    -fno-builtin \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -fno-builtin \
    -DSTRSAFE_NO_DEPRECATE \
    ${CXXFLAGS} \
" \
LDFLAGS="${LDFLAGS}" \
${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-cmake \
    -DBUILD_WSI_DIRECTFB_SUPPORT=FALSE \
    -DBUILD_WSI_WAYLAND_SUPPORT=FALSE \
    -DBUILD_WSI_XLIB_SUPPORT=FALSE \
    -DDIST_ARCH=${HOST_PROCESSOR} \
    -DDIST_DIR="/" \
    -DFILAMENT_ENABLE_JAVA=FALSE \
    -DFILAMENT_ENABLE_LTO=FALSE \
    -DFILAMENT_SKIP_SAMPLES=TRUE \
    -DFILAMENT_SUPPORTS_VULKAN=TRUE \
    -DPYTHON_EXECUTABLE=${BUILD_PACKAGE_PREFIX}/bin/python3 \
    -DSPIRV_WERROR=FALSE \
    -DUSE_STATIC_LIBCXX=FALSE \
    "${CMAKE_ANDROID_DEFINE_CMD}" \
    "${CMAKE_ASM_COMPILER_CMD}" \
    "${CMAKE_ASM_COMPILER_ID_CMD}" \
    "${CMAKE_ASM_FLAGS_CMD}" \
    ${STAGE_ROOT}

# Build the components
source ${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-ninja-build

mkdir -p ${INSTALL_ROOT}${PACKAGE_PREFIX}/lib/cmake

if [ "${BUILD_TRIPLE}" == ${HOST_TRIPLE} ]; then
    rsync -aPx ${STAGE_ROOT}/ImportExecutables-${BUILD_TYPE}.cmake \
               ${INSTALL_ROOT}${PACKAGE_PREFIX}/lib/cmake/${SOURCE_PACKAGE_NAME}.cmake
fi

# Build the package
source ${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-package-${PACKAGE_CLASS}-build

# Install the package
source ${BUILD_PACKAGE_PREFIX}/bin/${PACKAGE_BASE_NAME}-platform-sdk-package-install
