#!/bin/bash

set -e

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=swift-lldb
export SOURCE_ROOT=/sources/llvm-project/lldb
export SOURCE_PACKAGE_VERSION=9999-git
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export LLVM_SOURCE_ROOT=/sources/llvm-project
export LLVM_STAGE_ROOT=/sources/build-staging/llvm-project-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export SWIFT_STAGE_ROOT=/sources/build-staging/swift-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export INSTALL_ROOT=${TEMPDIR}/org.${PACKAGE_BASE_NAME}/${QUALIFIED_PACKAGE_NAME}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export DEPENDS="\
    ${PACKAGE_BASE_NAME}-libedit-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-libxml2-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-llvm-project-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-lua-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-ncurses-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-python-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swift-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swig-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-xz-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
# Configure the package
mkdir -p ${STAGE_ROOT} ${INSTALL_ROOT}
cd ${STAGE_ROOT}

CFLAGS="\
    -Wno-register \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -Wno-register \
    ${CXXFLAGS} \
" \
${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-cmake \
    -DClang_DIR=${LLVM_STAGE_ROOT}/lib/cmake/clang \
    -DCLANG_LINK_CLANG_DYLIB=TRUE \
    -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS} ${LIBS} -O2" \
    -DCURSES_INCLUDE_DIRS=${PACKAGE_PREFIX}/include/ncurses \
    -DCURSES_LIBRARIES="${PACKAGE_PREFIX}/lib/libncurses.so" \
    -DLibEdit_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DLibEdit_LIBRARIES=${PACKAGE_PREFIX}/lib/libedit.so \
    -DLIBLZMA_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DLIBLZMA_LIBRARY=${PACKAGE_PREFIX}/lib/liblzma.so \
    -DLIBXML2_INCLUDE_DIR=${PACKAGE_PREFIX}/include/libxml2 \
    -DLIBXML2_LIBRARY=${PACKAGE_PREFIX}/lib/libxml2.so \
    -DLLDB_ENABLE_PYTHON=TRUE \
    -DLLDB_ENABLE_SWIFT_SUPPORT=TRUE \
    -DLLDB_ENABLE_WERROR=FALSE \
    -DLLDB_INCLUDE_TESTS=FALSE \
    -DLLDB_PYTHON_DEFAULT_RELATIVE_PATH=lib/python3.8 \
    -DLLVM_BUILD_LIBRARY_DIR=${LLVM_STAGE_ROOT}/lib \
    -DLLVM_BUILD_MAIN_SRC_DIR=${LLVM_SOURCE_ROOT}/llvm \
    -DLLVM_DIR=${LLVM_STAGE_ROOT}/lib/cmake/llvm \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DLLVM_ENABLE_LLD=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_INCLUDE_TESTS=FALSE \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=TRUE \
    -DLLVM_LINK_LLVM_DYLIB=TRUE \
    -DLLVM_MAIN_INCLUDE_DIR=${LLVM_SOURCE_ROOT}/llvm/include \
    -DLLVM_TABLEGEN=${LLVM_STAGE_ROOT}/bin/llvm-tblgen \
    -DPython3_EXECUTABLE=${BUILDER_SCRIPT_PATH}/python3 \
    -DPython3_INCLUDE_DIRS=${PACKAGE_PREFIX}/include/python3.8 \
    -DPython3_LIBRARIES=${PACKAGE_PREFIX}/lib/libpython3.8.so \
    -DPANEL_LIBRARIES=${PACKAGE_PREFIX}/lib/libpanel.so \
    -DSwift_DIR=${SWIFT_STAGE_ROOT}/lib/cmake/swift \
    -DSWIG_EXECUTABLE=${BUILDER_SCRIPT_PATH}/swig \
    ${SOURCE_ROOT}

# Build the components
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-ninja-build

# RPATH fixups
COMPONENTS="\
    ${INSTALL_ROOT}${PACKAGE_PREFIX}/bin/lldb \
    ${INSTALL_ROOT}${PACKAGE_PREFIX}/bin/repl_swift \
    ${INSTALL_ROOT}${PACKAGE_PREFIX}/lib/liblldb.so \
" \
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-rpath-fixup

# Build the package
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-package-${PACKAGE_CLASS}-build

# Install the package
source ${BUILDER_SCRIPT_PATH}/${PACKAGE_BASE_NAME}-platform-sdk-package-install
