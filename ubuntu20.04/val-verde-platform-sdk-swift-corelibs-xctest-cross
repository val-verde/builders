#!/bin/bash

set -e

# Set all environment vars
export SOURCE_PACKAGE_NAME=swift-corelibs-xctest
export SOURCE_PACKAGE_VERSION=9999-git

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-bash-source-scripts

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-llvm-project-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swift-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swift-corelibs-foundation-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swift-corelibs-libdispatch-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"

# Configure the build components
cd ${STAGE_ROOT}
package-cmake \
    -Ddispatch_DIR=/sources/build-staging/swift-corelibs-libdispatch-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/cmake/modules \
    -DFoundation_DIR=/sources/build-staging/swift-corelibs-foundation-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/cmake/modules \
    ${SOURCE_ROOT}

# Build the components
ninja-build

SDK=${HOST_OS}

if [ "${HOST_OS}" = "android" ]; then
    mv ${INSTALL_PREFIX}/lib/swift/linux \
        ${INSTALL_PREFIX}/lib/swift/android
elif [ "${HOST_OS}" = "musl" ]; then
    mv ${INSTALL_PREFIX}/lib/swift/linux \
       ${INSTALL_PREFIX}/lib/swift/musl
fi

# RPATH fixups
COMPONENT_RPATH="\$ORIGIN:\$ORIGIN/../.." \
COMPONENTS="\
    ${INSTALL_PREFIX}/lib/swift/${SDK}/lib*.so \
" \
rpath-fixup

# Build the package
deb-package-build
