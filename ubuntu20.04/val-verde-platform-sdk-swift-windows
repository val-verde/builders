#!/bin/bash

set -e

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=swift
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}
export LLVM_SOURCE_ROOT=/sources/llvm-project
export LLVM_NATIVE_STAGE_ROOT=/sources/build-staging/llvm-project
export LLVM_STAGE_ROOT=/sources/build-staging/llvm-project-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}

# Configure the package
mkdir -p ${STAGE_ROOT}
cd ${STAGE_ROOT}

export CFLAGS="-fms-extensions -fms-compatibility-version=19.2" \
       CXXFLAGS="-fms-extensions -fms-compatibility-version=19.2" \
       UniversalCRTSdkDir=${PACKAGE_PREFIX} \
       UCRTVersion=git \
       VCToolsInstallDir=${PACKAGE_PREFIX}
${PACKAGE_BASE_NAME}-platform-sdk-cmake \
    -DClang_DIR=${LLVM_STAGE_ROOT}/lib/cmake/clang \
    -DCMAKE_INSTALL_PREFIX=${STAGE_ROOT}/install${PACKAGE_PREFIX} \
    -DICU_I18N_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DICU_I18N_LIBRARIES=${PACKAGE_PREFIX}/lib/libicuinswift.dll.a \
    -DICU_UC_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DICU_UC_LIBRARIES=${PACKAGE_PREFIX}/lib/libicuucswift.dll.a \
    -DLibEdit_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DLibEdit_LIBRARIES=${PACKAGE_PREFIX}/lib/edit.dll \
    -DLIBXML2_INCLUDE_DIR=${PACKAGE_PREFIX}/include/libxml2 \
    -DLIBXML2_LIBRARY=${PACKAGE_PREFIX}/lib/libxml2.a \
    -DLLVM_BUILD_LIBRARY_DIR=${LLVM_STAGE_ROOT}/lib \
    -DLLVM_BUILD_MAIN_SRC_DIR=${LLVM_SOURCE_ROOT}/llvm \
    -DLLVM_DIR=${LLVM_STAGE_ROOT}/lib/cmake/llvm \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_MAIN_INCLUDE_DIR=${LLVM_SOURCE_ROOT}/llvm/include \
    -DLLVM_TABLEGEN=${LLVM_NATIVE_STAGE_ROOT}/bin/llvm-tblgen \
    -DPython2_EXECUTABLE=/usr/bin/python2 \
    -DPYTHON_EXECUTABLE=/usr/bin/python2 \
    -DSWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER=TRUE \
    -DSWIFT_BUILD_SOURCEKIT=TRUE \
    -DSWIFT_BUILD_SYNTAXPARSERLIB=TRUE \
    -DSWIFT_CMARK_LIBRARY_DIR=/sources/build-staging/swift-cmark-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}/src \
    -DSWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=TRUE \
    -DSWIFT_HOST_VARIANT_ARCH=${HOST_PROCESSOR} \
    -DSWIFT_HOST_VARIANT_SDK=WINDOWS \
    -DSWIFT_INCLUDE_DOCS=FALSE \
    -DSWIFT_INCLUDE_TESTS=FALSE \
    -DSWIFT_NATIVE_CLANG_TOOLS_PATH=${PACKAGE_ROOT}/bin \
    -DSWIFT_NATIVE_LLVM_TOOLS_PATH=${PACKAGE_ROOT}/bin \
    -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=${PACKAGE_ROOT}/bin \
    -DSWIFT_PATH_TO_CMARK_BUILD=/sources/build-staging/swift-cmark-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR} \
    -DSWIFT_PATH_TO_CMARK_SOURCE=/sources/swift-cmark \
    -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=/sources/swift-corelibs-libdispatch \
    -DSWIFT_TOOLS_ENABLE_LTO=${ENABLE_FLTO} \
    -DSWIFT_USE_LINKER=lld \
    -DSWIFT_WINDOWS_NATIVE_SYSROOT=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_PROCESSOR}/sysroot \
    -DUSE_POSIX_SEM=1 \
    -DUUID_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DUUID_LIBRARY=${PACKAGE_PREFIX}/lib/libuuid.a \
    ${SOURCE_ROOT}

# Package the components
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-ninja-build

rm -f ${STAGE_ROOT}/install${PACKAGE_PREFIX}/bin/*libdispatch* \
      ${STAGE_ROOT}/install${PACKAGE_PREFIX}/bin/*BlocksRuntime* \
      ${STAGE_ROOT}/install${PACKAGE_PREFIX}/lib/*libdispatch* \
      ${STAGE_ROOT}/install${PACKAGE_PREFIX}/lib/*BlocksRuntime*

source /sources/${PACKAGE_BASE_NAME}-platform-sdk-package-build

# Build the package
source /sources/${PACKAGE_BASE_NAME}-platform-sdk-package-install
