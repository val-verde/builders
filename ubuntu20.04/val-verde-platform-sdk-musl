#!/bin/bash

set -e

# Source package build helper functions
source ${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-bash-source-scripts

# gnu environment
export HOST_TRIPLE=${HOST_PROCESSOR}-${HOST_KERNEL}-${HOST_OS}
export SYSTEM_NAME=Linux

# kernel headers builds
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-kernel-headers-cross

# musl headers build
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-musl-headers

# compiler-rt build
if [ "${BUILD_PROCESSOR}" != ${HOST_PROCESSOR} ]; then
    CLANG_RT_LIB=libclang_rt.builtins-${HOST_PROCESSOR}.a \
    CXXFLAGS="\
        -Dprintf\\\(...\\\)= \
        ${CXXFLAGS} \
    " \
    bash ${VAL_VERDE_GH_TEAM}-platform-sdk-compiler-rt-musl
fi

# musl libc build
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-musl-libc

# libunwind build
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-libunwind-cross

# libcxxabi build
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-libcxxabi-cross

# libcxx build
ENABLE_MUSL_LIBC=TRUE \
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-libcxx-cross

# llvm dependencies
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-llvm-dependencies-musl

# swift tools build
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-swift-tools-musl

# swift sdk build
# bash ${VAL_VERDE_GH_TEAM}-platform-sdk-swift-sdk-musl

# graphics sdk build
# bash ${VAL_VERDE_GH_TEAM}-platform-sdk-graphics-sdk-cross

# node + sdk build
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-node-cross
bash ${VAL_VERDE_GH_TEAM}-platform-sdk-npm-yarn-cross

# rust build
# bash ${VAL_VERDE_GH_TEAM}-platform-sdk-rust
