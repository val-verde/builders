#!/bin/bash

set -e

# Source package build helper functions
source ${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-bash-source-scripts

# Set all environment vars
export NUM_PROCESSORS="$(($(getconf _NPROCESSORS_ONLN) + 1))"
export SOURCE_PACKAGE_NAME=swift
export SOURCE_PACKAGE_VERSION=9999-git
export SOURCE_ROOT=/sources/${SOURCE_PACKAGE_NAME}
export STAGE_ROOT=/sources/build-staging/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export LLVM_SOURCE_ROOT=/sources/llvm-project
export LLVM_STAGE_ROOT=/sources/build-staging/llvm-project-${HOST_OS}${HOST_OS_API_LEVEL}-${BUILD_ARCH}
export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export INSTALL_ROOT=${TEMPDIR}/org.${VAL_VERDE_GH_TEAM}/${QUALIFIED_PACKAGE_NAME}

export PACKAGE_NAME=${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export DEPENDS="\
    ${PACKAGE_BASE_NAME}-icu4c-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-libedit-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-libxml2-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-llvm-project-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-python-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-util-linux-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
USE_NEWPM=${USE_NEWPM:-TRUE}

# Configure the build components
rm -rf ${STAGE_ROOT}
GIT_URL="https://github.com/${VAL_VERDE_GH_TEAM}/swift-corelibs-libdispatch.git" \
TARGET_ROOT="/sources/swift-corelibs-libdispatch" \
git-clone val-verde-mainline
GIT_URL="https://github.com/${VAL_VERDE_GH_TEAM}/${SOURCE_PACKAGE_NAME}.git" \
git-clone val-verde-mainline-next

mkdir -p ${STAGE_ROOT} ${INSTALL_ROOT}
cd ${STAGE_ROOT}
${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-cmake \
    -DClang_DIR=${LLVM_STAGE_ROOT}/lib/cmake/clang \
    -DICU_I18N_INCLUDE_DIRS=${BUILD_PACKAGE_PREFIX}/include \
    -DICU_I18N_LIBRARIES=${BUILD_PACKAGE_PREFIX}/lib/libicui18nswift.so \
    -DICU_UC_INCLUDE_DIRS=${BUILD_PACKAGE_PREFIX}/include \
    -DICU_UC_LIBRARIES=${BUILD_PACKAGE_PREFIX}/lib/libicuucswift.so \
    -DLibEdit_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DLibEdit_LIBRARIES=${PACKAGE_PREFIX}/lib/libedit.so \
    -DLIBXML2_INCLUDE_DIR=${PACKAGE_PREFIX}/include/libxml2 \
    -DLIBXML2_LIBRARY=${PACKAGE_PREFIX}/lib/libxml2.so \
    -DLLVM_BUILD_LIBRARY_DIR=${LLVM_STAGE_ROOT}/lib \
    -DLLVM_BUILD_MAIN_SRC_DIR=${LLVM_SOURCE_ROOT} \
    -DLLVM_DIR=${LLVM_STAGE_ROOT}/lib/cmake/llvm \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_DOXYGEN=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=TRUE \
    -DLLVM_MAIN_INCLUDE_DIR=${LLVM_SOURCE_ROOT}/llvm/include \
    -DLLVM_TABLEGEN=${LLVM_STAGE_ROOT}/bin/llvm-tblgen \
    -DLLVM_USE_NEWPM=${USE_NEWPM} \
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=TRUE \
    -DPython3_EXECUTABLE=${BUILD_PACKAGE_PREFIX}/bin/python3 \
    -DSWIFT_BUILD_DYNAMIC_SDK_OVERLAY=TRUE \
    -DSWIFT_BUILD_DYNAMIC_STDLIB=TRUE \
    -DSWIFT_BUILD_PERF_TESTSUITE=FALSE \
    -DSWIFT_BUILD_SOURCEKIT=TRUE \
    -DSWIFT_BUILD_STATIC_SDK_OVERLAY=TRUE \
    -DSWIFT_BUILD_STATIC_STDLIB=TRUE \
    -DSWIFT_BUILD_SYNTAXPARSERLIB=TRUE \
    -DSWIFT_CMARK_LIBRARY_DIR=/sources/build-staging/swift-cmark-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/src \
    -DSWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=TRUE \
    -DSWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING=TRUE \
    -DSWIFT_ENABLE_SOURCEKIT_TESTS=FALSE \
    -DSWIFT_INCLUDE_APINOTES=FALSE \
    -DSWIFT_INCLUDE_DOCS=FALSE \
    -DSWIFT_INCLUDE_TESTS=FALSE \
    -DSWIFT_NATIVE_CLANG_TOOLS_PATH=${BUILD_PACKAGE_PREFIX}/bin \
    -DSWIFT_NATIVE_LLVM_TOOLS_PATH=${BUILD_PACKAGE_PREFIX}/bin \
    -DSWIFT_PATH_TO_CMARK_BUILD=/sources/build-staging/swift-cmark-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} \
    -DSWIFT_PATH_TO_CMARK_SOURCE=/sources/swift-cmark \
    -DSWIFT_PATH_TO_LIBDISPATCH_SOURCE=/sources/swift-corelibs-libdispatch \
    -DSWIFT_STDLIB_ASSERTIONS=FALSE \
    -DSWIFT_TOOL_COMPLETE_TEST_BUILD=FALSE \
    -DSWIFT_TOOL_LLDB_MODULEIMPORT_TEST_BUILD=FALSE \
    -DSWIFT_TOOL_SOURCEKITD_TEST_BUILD=FALSE \
    -DSWIFT_TOOL_SWIFT_IDE_TEST_BUILD=FALSE \
    -DSWIFT_TOOL_SWIFT_REMOTEAST_TEST_BUILD=FALSE \
    -DSWIFT_TOOL_SWIFT_SYNTAX_PARSER_TEST_BUILD=FALSE \
    -DSWIFT_TOOL_SWIFT_SYNTAX_TEST_BUILD=FALSE \
    -DSWIFT_TOOLS_ENABLE_LTO=${ENABLE_FLTO} \
    -DSWIFT_USE_LINKER=${BUILD_PACKAGE_PREFIX}/bin/ld.lld \
    -DSWIFT_VENDOR="${PACKAGE_BASE_NAME}" \
    -DUUID_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DUUID_LIBRARIES=${PACKAGE_PREFIX}/lib/${HOST_TRIPLE}/libuuid.so \
    ${SOURCE_ROOT}

# Build the components
ninja-build

# RPATH fixups
COMPONENTS="\
    ${INSTALL_ROOT}${PACKAGE_PREFIX}/bin/swift \
" \
rpath-fixup

COMPONENTS="\
    ${INSTALL_ROOT}${PACKAGE_PREFIX}/lib/swift/${HOST_KERNEL}/lib*.so \
" \
COMPONENT_RPATH="\$ORIGIN:\$ORIGIN/../.." \
rpath-fixup

# Build the package
deb-package-build

# Build the package
deb-package-install
