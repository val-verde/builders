#!/bin/bash

set -e

source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-api
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

SPECIFIED_BUILD_SYSROOT=${BUILD_SYSROOT}
SPECIFIED_SYSROOT=${SYSROOT}

if [ "${BUILD_TRIPLE}" = "${HOST_TRIPLE}" ]; then
    export \
        BUILD_C_COMPILER=clang \
        BUILD_SYSROOT=/ \
        C_COMPILER=clang \
        DISABLE_POLLY=TRUE \
        SYSROOT=/ \
        USE_FUSE_LD_OVER_LD_PATH=TRUE
fi

export \
    DISABLE_CXX_INCLUDE=TRUE \
    DISABLE_CXX_STDLIB=TRUE \
    MAKEINFO=`package-get-path true EXECUTABLE BUILD`

# kernel-headers bootstrap build
package-invoke-builder kernel-headers 5

# autoconf bootstrap build
package-invoke-builder autoconf 2
export \
    AUTORECONF=`BINDIR= package-get-path autoreconf EXECUTABLE BUILD` \
    AUTOUPDATE=`BINDIR= package-get-path autoupdate EXECUTABLE BUILD`

# automake bootstrap build
package-invoke-builder automake 1
export AUTOMAKE=`BINDIR= package-get-path automake EXECUTABLE BUILD`

# autoconf-archive bootstrap build
package-invoke-builder autoconf-archive 2021

# glibc-interface bootstrap phase 1

export DEB_PATH_BASE=${BOOTSTRAP_DEB_PATH}/glibc-2-bootstrap
export ENABLE_BOOTSTRAP=TRUE

export DEB_PATH=${DEB_PATH_BASE}/phase-1
${MKDIR} -p ${DEB_PATH}

if [ "${BUILD_TRIPLE}" = "${HOST_TRIPLE}" ]; then
    # help2man bootstrap build
    package-invoke-builder help2man 1
    export HELP2MAN=`BINDIR= package-get-path help2man EXECUTABLE BUILD`

    # libtool bootstrap build
    package-invoke-builder libtool 2

    # gmp bootstrap build
    package-invoke-builder gmp 6 bootstrap-only

    # mpfr bootstrap build
    package-invoke-builder mpfr 4 bootstrap-only

    # mpc bootstrap build
    package-invoke-builder mpc 1 bootstrap-only

    # isl bootstrap build
    package-invoke-builder isl 0 bootstrap-only
fi

# binutils-gdb bootstrap build
package-invoke-builder cross-binutils-gdb 2

# gcc bootstrap build (gcc only)
export DISABLE_LIBGCC=TRUE
package-invoke-builder cross-gcc 11 bootstrap-only
unset DISABLE_LIBGCC

export SYSROOT=${SPECIFIED_SYSROOT}

# glibc-interface bootstrap build (headers only)
package-invoke-builder glibc-interface-bootstrap 2 bootstrap-only

# glibc-interface bootstrap phase 2

export DEB_PATH=${DEB_PATH_BASE}/phase-2
${MKDIR} -p ${DEB_PATH}

# gcc bootstrap build (gcc + libgcc only)
package-invoke-builder cross-gcc 11 bootstrap-only

unset ENABLE_BOOTSTRAP
export DEB_PATH=${BOOTSTRAP_DEB_PATH}

# glibc-interface bootstrap build
package-invoke-builder glibc-interface-bootstrap 2

export BUILD_SYSROOT=${SPECIFIED_BUILD_SYSROOT}

# glibc-interface bootstrap complete

if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
    # compiler-rt bootstrap build
    package-invoke-builder compiler-rt-cross 13
fi

# libcxx bootstrap build
package-invoke-builder libcxx-bootstrap 13

unset \
    DISABLE_CXX_INCLUDE \
    DISABLE_CXX_STDLIB

# cmake bootstrap build
package-invoke-builder cmake 3
export CMAKE=`BINDIR= package-get-path cmake EXECUTABLE BUILD`

# z3 build
package-invoke-builder z3 4

# llvm bootstrap build
ENABLE_INCREMENTAL_BUILD=TRUE \
ENABLE_STAGE_ROOT_BUILD=TRUE \
package-invoke-builder llvm-project-bootstrap 13 no-install

# remove libcxx, libcxxabi and libunwind as they are superceded by llvm-project.
PACKAGES_TO_MANAGE=( 'libcxx-13' 'HOST' )

package-invoke-archive-action uninstall ${PACKAGES_TO_MANAGE[@]}

# install llvm for host
PACKAGES_TO_MANAGE=( 'llvm-project-13' 'HOST'
                     'llvm-project-13-stage' 'HOST' )

package-invoke-archive-action install ${PACKAGES_TO_MANAGE[@]}

# remove host compiler and libraries as it is superceded by bootstrapped clang
package-apt-remove \
    clang* \
    cmake \
    libclang* \
    libllvm* \
    lld*
