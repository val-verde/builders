#!/bin/bash

set -e

# source deb packaging scripts
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api

if [ "${SOURCE_PACKAGE_NAME}" != "" ]; then
    # package specific variables
    export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
    export PACKAGE_NAME=${PACKAGE_NAME:-${PACKAGE_BASE_NAME}-${QUALIFIED_PACKAGE_NAME}}
    export INSTALL_ROOT=${INSTALL_ROOT:-${TEMP_ROOT_BASE}/${QUALIFIED_PACKAGE_NAME}}
    export INSTALL_PREFIX=${INSTALL_PREFIX:-${INSTALL_ROOT}${PACKAGE_PREFIX}}
    export STAGE_ROOT=${STAGE_ROOT:-${STAGE_ROOT_BASE}/${QUALIFIED_PACKAGE_NAME}}
    export SOURCE_ROOT=${SOURCE_ROOT:-${SOURCE_ROOT_BASE}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}}

    # pre-build cleanup
    ${RM} -rf ${INSTALL_PREFIX}/*

    if [ -z "${ENABLE_INCREMENTAL_BUILD}" ]; then
        ${RM} -rf ${STAGE_ROOT}/*
    fi

    ${MKDIR} -p ${INSTALL_PREFIX} \
                ${STAGE_ROOT}

    ${ECHO} -e "    Package Configuration"
    ${ECHO} -e "        Name: \e[1;35m${SOURCE_PACKAGE_NAME}\e[0m"
    ${ECHO} -e "        Version: \e[1m${SOURCE_PACKAGE_VERSION}\e[0m"
    ${ECHO} -e "        Platform: \e[1m${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}\e[0m"
    ${ECHO} -e "        Vendor: \e[1m${PACKAGE_BASE_NAME}\e[0m"
    ${ECHO} -e "        Source Root: \e[33m${SOURCE_ROOT}\e[0m"
    ${ECHO} -e "        Stage Root: \e[33m${STAGE_ROOT}\e[0m"
    ${ECHO} -e "        Install Prefix: \e[33m${INSTALL_PREFIX}\e[0m"
fi

# Determine format of executables, shared libraries and static archives.
EXECUTABLE_SUFFIX=
OBJECT_FILE_SUFFIX=".o"
SHARED_LIBRARY_PREFIX="lib"
SHARED_LIBRARY_SUFFIX=".so"
STATIC_LIBRARY_PREFIX="lib"
STATIC_LIBRARY_SUFFIX=".a"

if [ "${HOST_OS}" = "macos" ]; then
    SHARED_LIBRARY_SUFFIX=".dylib"
elif [ "${HOST_OS}" = "mingw32" ]; then
    EXECUTABLE_SUFFIX=".exe"
    OBJECT_FILE_SUFFIX=".obj"
    SHARED_LIBRARY_SUFFIX=".dll.a"
    STATIC_LIBRARY_SUFFIX=".a"
fi

export EXECUTABLE_SUFFIX=${EXECUTABLE_SUFFIX}
export OBJECT_FILE_SUFFIX=${OBJECT_FILE_SUFFIX}
export SHARED_LIBRARY_PREFIX=${SHARED_LIBRARY_PREFIX}
export SHARED_LIBRARY_SUFFIX=${SHARED_LIBRARY_SUFFIX}
export STATIC_LIBRARY_PREFIX=${STATIC_LIBRARY_PREFIX}
export STATIC_LIBRARY_SUFFIX=${STATIC_LIBRARY_SUFFIX}

function copy-source-to-staging() {
    package-rsync -ax \
                  ${SOURCE_ROOT}/ \
                  ${STAGE_ROOT}/
}

# create-host-tool <host_tool> <host_tool_flags> <wrapper_name>
function create-host-tool() {
    host_tool=${1}
    host_tool_flags=${2}
    wrapper_name=${3}

    ${ECHO} "\
#!/bin/bash

set -e

exec ${host_tool} ${!host_tool_flags} \"\${@}\"
" > ${wrapper_name}
    ${CHMOD} +x ${wrapper_name}
}

function create-indirect-pkg-config() {
    host_pkg_config_path=${1}
    wrapper_name=${2}

    ${ECHO} "\
#!/bin/bash

set -e

PKG_CONFIG_PATH=\"${!host_pkg_config_path}\" exec ${PKG_CONFIG} \"\${@}\"
" > ${wrapper_name}
    ${CHMOD} +x ${wrapper_name}
}

function export-compiler-environment() {
    if [ -n "${EXPORTED_COMPILER_ENVIRONMENT}" ]; then
        return
    fi

    export-compiler-environment-for-build-tools
    export-compiler-environment-for-c-and-cxx-variant BUILD
    export-compiler-environment-for-c-and-cxx-variant HOST
    export-compiler-environment-for-go
    export-compiler-environment-for-swift
    EXPORTED_COMPILER_ENVIRONMENT=TRUE
}

function export-compiler-environment-for-build-tools() {
    export ACLOCAL_PATH=${PACKAGE_PREFIX}/share/aclocal

    if [ "${SYSROOT}" = "/" ]; then
        export ACLOCAL_PATH=${ACLOCAL_PATH}:/usr/share/aclocal
    fi

    export CMAKE=${CMAKE:-${BINDIR}/cmake}
    export MAKE=${MAKE:-${BINDIR}/make}
    export MESON=${MESON:-${BINDIR}/meson}
    export NINJA=${NINJA:-${BINDIR}/ninja}
    export NODE=${NODE:-${BINDIR}/node}
    export PKG_CONFIG=${PKG_CONFIG:-${BINDIR}/pkg-config}
    export PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-${PACKAGE_PREFIX}/lib/pkgconfig:${PACKAGE_PREFIX}/share/pkgconfig}

    if [ "${SYSROOT}" = "/" ]; then
        export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/lib/${BUILD_TRIPLE}/pkgconfig:/usr/share/pkgconfig
    fi
    export PYTHON=${PYTHON:-${BINDIR}/python}
}

function export-compiler-environment-for-c-and-cxx-variant() {
    BINTOOLS_PREFIX=${BINTOOLS_PREFIX:-llvm-}
    BINTOOLS_PATH_PREFIX=${BINDIR}/${BINTOOLS_PREFIX}
    ENV_PREFIX=
    LINKER_OPTIMIZATION_LEVEL=${LINKER_OPTIMIZATION_LEVEL:-2}
    OPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL:-z}
    VARIANT=${1}
    VARIANT_ARCH=${VARIANT}_ARCH
    VARIANT_ARCH_VECTOR_SIZE=${VARIANT}_ARCH_VECTOR_SIZE
    VARIANT_CPU=${VARIANT}_CPU
    VARIANT_OS=${VARIANT}_OS
    VARIANT_OS_API_LEVEL=${VARIANT}_OS_API_LEVEL

    if [ "${VARIANT}" != "HOST" ]; then
        ENV_PREFIX="${VARIANT}_"
    fi

    C_COMPILER=${C_COMPILER:-sclang}
    CXX_COMPILER=${CXX_COMPILER:-${C_COMPILER}++}

    if [ -n "${USE_GCC}" ]; then
        C_COMPILER=gcc
        CPP_COMPILER=${CPP_COMPILER:-cpp}

        DISABLE_COMPILER_TARGET=TRUE
        DISABLE_POLLY=TRUE
        DISABLE_UNUSED_ARGUMENTS=TRUE
    else
        CPP_COMPILER=${CPP_COMPILER:-${C_COMPILER}-cpp}
    fi

    FLANG=${FLANG:-${BINDIR}/flang}
    TOOL_AR=${ENV_PREFIX}AR
    TOOL_AS=${ENV_PREFIX}AS
    TOOL_CC=${ENV_PREFIX}CC
    TOOL_CCLD=${ENV_PREFIX}CCLD
    TOOL_CPP=${ENV_PREFIX}CPP
    TOOL_CXX=${ENV_PREFIX}CXX
    TOOL_CXXFILT=${ENV_PREFIX}CXXFILT
    TOOL_CXXLD=${ENV_PREFIX}CXXLD
    TOOL_DLLTOOL=${ENV_PREFIX}DLLTOOL
    TOOL_F77=${ENV_PREFIX}F77
    TOOL_FC=${ENV_PREFIX}FC
    TOOL_FORTRAN=${ENV_PREFIX}FORTRAN
    TOOL_INSTALL_NAME_TOOL=${ENV_PREFIX}INSTALL_NAME_TOOL
    TOOL_LD=${ENV_PREFIX}LD
    TOOL_LIBTOOL_DARWIN=${ENV_PREFIX}LIBTOOL_DARWIN
    TOOL_LIPO=${ENV_PREFIX}LIPO
    TOOL_MANIFEST_TOOL=${ENV_PREFIX}MANIFEST_TOOL
    TOOL_NM=${ENV_PREFIX}NM
    TOOL_OBJC=${ENV_PREFIX}OBJC
    TOOL_OBJCOPY=${ENV_PREFIX}OBJCOPY
    TOOL_OBJCPP=${ENV_PREFIX}OBJCPP
    TOOL_OBJCXX=${ENV_PREFIX}OBJCXX
    TOOL_OBJDUMP=${ENV_PREFIX}OBJDUMP
    TOOL_RANLIB=${ENV_PREFIX}RANLIB
    TOOL_RC=${ENV_PREFIX}RC
    TOOL_READELF=${ENV_PREFIX}READELF
    TOOL_SIZE=${ENV_PREFIX}SIZE
    TOOL_STRINGS=${ENV_PREFIX}STRINGS
    TOOL_STRIP=${ENV_PREFIX}STRIP
    TOOL_WINDRES=${ENV_PREFIX}WINDRES

    export ${TOOL_AR}=${!TOOL_AR:-${BINTOOLS_PATH_PREFIX}ar}
    export ${TOOL_AS}=${!TOOL_CC:-${BINDIR}/${C_COMPILER}}
    export ${TOOL_CC}=${!TOOL_CC:-${BINDIR}/${C_COMPILER}}
    export ${TOOL_CCLD}=${!TOOL_CCLD:-${ENV_PREFIX}${CC}}
    export ${TOOL_CPP}=${!TOOL_CPP:-${BINDIR}/${CPP_COMPILER}}
    export ${TOOL_CXX}=${!TOOL_CXX:-${BINDIR}/${CXX_COMPILER}}
    export ${TOOL_CXXFILT}=${!TOOL_CXXFILT:-${BINTOOLS_PATH_PREFIX}cxxfilt}
    export ${TOOL_CXXLD}=${!TOOL_CXXLD:-${ENV_PREFIX}${CXX}}
    export ${TOOL_DLLTOOL}=${!TOOL_DLLTOOL:-${BINTOOLS_PATH_PREFIX}dlltool}
    export ${TOOL_F77}=${!TOOL_F77:-${FLANG}}
    export ${TOOL_FC}=${!TOOL_FC:-${FLANG}}
    export ${TOOL_FORTRAN}=${!TOOL_FORTRAN:-${FLANG}}
    export ${TOOL_INSTALL_NAME_TOOL}=${!TOOL_INSTALL_NAME_TOOL:-${BINTOOLS_PATH_PREFIX}install-name-tool}

    if [ "${!VARIANT_OS}" = "macos" ]; then
        export ${TOOL_LD}=${!TOOL_LD:-${BINDIR}/ld64.lld}
    else
        export ${TOOL_LD}=${!TOOL_LD:-${BINDIR}/ld.lld}
    fi

    export ${TOOL_LIBTOOL_DARWIN}=${!TOOL_LIBTOOL_DARWIN:-${BINTOOLS_PATH_PREFIX}libtool-darwin}
    export ${TOOL_LIPO}=${!TOOL_LIPO:-${BINTOOLS_PATH_PREFIX}lipo}
    export ${TOOL_MANIFEST_TOOL}=${!TOOL_MANIFEST_TOOL:-${BINTOOLS_PATH_PREFIX}mt}
    export ${TOOL_NM}=${!TOOL_NM:-${BINTOOLS_PATH_PREFIX}nm}
    export ${TOOL_OBJC}=${!TOOL_OBJC:-${ENV_PREFIX}${CC}}
    export ${TOOL_OBJCOPY}=${!TOOL_OBJCOPY:-${BINTOOLS_PATH_PREFIX}objcopy}
    export ${TOOL_OBJCPP}=${!TOOL_OBJCPP:-${ENV_PREFIX}${CPP}}
    export ${TOOL_OBJCXX}=${!TOOL_OBJCXX:-${ENV_PREFIX}${CXX}}
    export ${TOOL_OBJDUMP}=${!TOOL_OBJDUMP:-${BINTOOLS_PATH_PREFIX}objdump}
    export ${TOOL_RANLIB}=${!TOOL_RANLIB:-${BINTOOLS_PATH_PREFIX}ranlib}
    export ${TOOL_RC}=${!TOOL_RC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-rc}
    export ${TOOL_READELF}=${!TOOL_READELF:-${BINTOOLS_PATH_PREFIX}readelf}
    export ${TOOL_SIZE}=${!TOOL_SIZE:-${BINTOOLS_PATH_PREFIX}size}
    export ${TOOL_STRINGS}=${!TOOL_STRINGS:-${BINTOOLS_PATH_PREFIX}strings}
    export ${TOOL_STRIP}=${!TOOL_STRIP:-${BINTOOLS_PATH_PREFIX}strip}
    export ${TOOL_WINDRES}=${!TOOL_RC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-rc}

    CXX_INCLUDE_DIR=${CXX_INCLUDE_DIR:-${PACKAGE_PREFIX}/include/c++/v1}
    CXX_STDLIB=${CXX_STDLIB:-libc++}
    OPTIMIZATION_FLAGS=${OPTIMIZATION_FLAGS:-"-DNDEBUG"}
    PIPE_CFLAG="-pipe"
    RTLIB=${RTLIB:-compiler-rt}

    # CFLAG compiler configuration

    if [ -z "${DISABLE_UNUSED_ARGUMENTS}" ]; then
        UNUSED_ARGUMENTS_CFLAG="-Qunused-arguments"
    fi

    # CFLAG target definitions

    if [ -z "${DISABLE_COMPILER_TARGET}" ]; then
        TARGET_CFLAG_VAR=${VARIANT}_TRIPLE
        TARGET_CFLAG="--target=${!TARGET_CFLAG_VAR}"
    fi

    if [ -n "${!VARIANT_ARCH}" ]; then
        MARCH_CFLAG="-march=${!VARIANT_ARCH}"
    fi

    if [ -n "${!VARIANT_CPU}" ]; then
        MTUNE_CFLAG="-mtune=${!VARIANT_CPU}"
    fi

    # CFLAG import paths

    if [ "${SYSROOT}" != "/" ]; then
        TARGET_SYSROOT_VAR=${ENV_VAR}SYSROOT
        SYSROOT_CFLAG="--sysroot=${!TARGET_SYSROOT_VAR}"
    fi

    if [ "${SYSROOT}${PACKAGE_USR_PREFIX}" != "${PACKAGE_PREFIX}" ]; then
        ISYSTEM_CFLAG="-isystem ${PACKAGE_PREFIX}/include"
        PACKAGE_PREFIX_LIBDIR_CFLAG="-L${PACKAGE_PREFIX}/lib"
    fi

    if [ -z "${DISABLE_CXX_STDLIB}" ]; then
        STDLIB_CXXLDFLAG="-stdlib=${CXX_STDLIB}"
    fi

    if [ -z "${DISABLE_CXX_INCLUDE}" ]; then
        STDLIBXX_ISYSTEM_CXXFLAG="-stdlib++-isystem ${CXX_INCLUDE_DIR}"
    fi

    # CFLAG definitions: i.e. -Dxxx[=yyy]

    if [ "${!VARIANT_OS}" = "mingw32" ]; then
        DISABLE_BUILTIN_STRCPY=TRUE
        DISABLE_FPIC=TRUE
    fi

    if [ -z "${DISABLE_FPIC}" ]; then
        FPIC_CFLAG="-fPIC"
    fi

    if [ -n "${DISABLE_BUILTIN_STRCPY}" ]; then
        BUILTIN_STRCPY_CFLAG="-fno-builtin-stpcpy"
    fi

    if [ -z "${DISABLE_FORTIFY_SOURCE_LEVEL}" ]; then
        FORTIFY_SOURCE_LEVEL=${FORTIFY_SOURCE_LEVEL:-2}
        FORTIFY_CFLAGS="-D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL}"

        if [ "${!VARIANT_OS}" = "android" ]; then
            FORTIFY_CFLAGS="-D__USE_FORTIFY_LEVEL=${FORTIFY_SOURCE_LEVEL} ${FORTIFY_CFLAGS}"
        elif [ "${!VARIANT_OS}" = "musl" ]; then
            FORTIFY_CFLAGS="-D_ALL_SOURCE=1 ${FORTIFY_CFLAGS}"
        fi
    fi

    # CFLAG code generation

    OPTIMIZATION_CFLAG="-O${OPTIMIZATION_LEVEL}"
    OPTIMIZATION_LDFLAG="-O${OPTIMIZATION_LEVEL}"

    if [ -n "${ENABLE_FLTO}" ]; then
        FLTO_OPTION=`${ECHO} ${ENABLE_FLTO} | ${TR} '[:upper:]' '[:lower:]'`
        FLTO_CFLAG="-flto=${FLTO_OPTION}"
    fi

    if [ -z "${DISABLE_POLLY}" ]; then
        LLVM_POLLY_CFLAG="-mllvm -polly"
    fi

    if [ -n "${DISABLE_LLVM_VERIFIER}" ]; then
        DISABLE_LLVM_VERIFIER_CFLAG="-Xclang -disable-llvm-verifier"
    fi

    if [ -n "${!VARIANT_ARCH_VECTOR_SIZE}" ]; then
        LLVM_FORCE_VECTOR_WIDTH_CFLAG="-mllvm -force-vector-width=${!VARIANT_ARCH_VECTOR_SIZE}"
    fi

    if [ "${!VARIANT_OS}" = "macos" ]; then
        LINKER_PLATFORM_CFLAG="-Wl,-platform_version,${HOST_OS},${HOST_OS_API_LEVEL},${HOST_OS_API_LEVEL}"
        LINKER_PLATFORM_LDFLAG="-platform_version ${HOST_OS} ${HOST_OS_API_LEVEL} ${HOST_OS_API_LEVEL}"
    fi

    if [ -z "${DISABLE_RTLIB}" ]; then
        RTLIB_CFLAG="-rtlib=${RTLIB} "
    fi

    if [ "${!VARIANT_OS}" = "macos" ]; then
        DISABLE_STRIP=TRUE
    fi

    if [ -z "${DISABLE_STRIP}" ]; then
        STRIP_CFLAG="-s"
    fi

    TOOL_COMMON_CFLAGS=${ENV_PREFIX}COMMON_CFLAGS
    TOOL_COMMON_LDFLAGS=${ENV_PREFIX}COMMON_LDFLAGS
    TOOL_COMMON_CXXFLAGS=${ENV_PREFIX}COMMON_CXXFLAGS
    TOOL_ASFLAGS=${ENV_PREFIX}ASFLAGS
    TOOL_CFLAGS=${ENV_PREFIX}CFLAGS
    TOOL_CCLDFLAGS=${ENV_PREFIX}CCLDFLAGS
    TOOL_CPPFLAGS=${ENV_PREFIX}CPPFLAGS
    TOOL_CXXFLAGS=${ENV_PREFIX}CXXFLAGS
    TOOL_CXXLDFLAGS=${ENV_PREFIX}CXXLDFLAGS
    TOOL_LDFLAGS=${ENV_PREFIX}LDFLAGS
    TOOL_LIBS=${ENV_PREFIX}LIBS

    export ${TOOL_COMMON_CFLAGS}="\
        ${UNUSED_ARGUMENTS_CFLAGS} \
        ${TARGET_CFLAG} \
        ${MARCH_CFLAG} \
        ${MTUNE_CFLAG} \
        ${SYSROOT_CFLAG} \
        ${ISYSTEM_CFLAG} \
        ${FPIC_CFLAG} \
        ${OPTIMIZATION_FLAGS} \
        ${FORTIFY_CFLAGS} \
        ${LLVM_FORCE_VECTOR_WIDTH_CFLAG} \
        ${FLTO_CFLAG} \
        ${LLVM_POLLY_CFLAG} \
        ${DISABLE_LLVM_VERIFIER_CFLAG} \
        ${LINKER_PLATFORM_CFLAG} \
        ${!TOOL_COMMON_CFLAGS} \
    "
    export ${TOOL_COMMON_LDFLAGS}="\
        ${SYSROOT_CFLAG} \
        ${PACKAGE_PREFIX_LIBDIR_CFLAG} \
        ${OPTIMIZATION_LDFLAG} \
        ${STRIP_CFLAG} \
        ${!TOOL_COMMON_LDFLAGS} \
    "

    export ${TOOL_CFLAGS}="`${ECHO} "\
        ${PIPE_CFLAG} \
        ${!TOOL_COMMON_CFLAGS} \
        ${OPTIMIZATION_CFLAG} \
        ${!TOOL_CFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_ASFLAGS}="`${ECHO} "\
        ${!TOOL_CFLAGS} \
        ${!TOOL_ASFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_CCLDFLAGS}="`${ECHO} "\
        ${!TOOL_CFLAGS} \
        ${RTLIB_CFLAG} \
        ${COMMON_LDFLAGS} \
        ${!TOOL_CCLDFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_CPPFLAGS}="`${ECHO} "\
        ${COMMON_CFLAGS} \
        ${!TOOL_CPPFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_CXXFLAGS}="`${ECHO} "\
        ${!TOOL_CFLAGS} \
        ${STDLIBXX_ISYSTEM_CXXFLAG} \
        ${!TOOL_CXXFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_CXXLDFLAGS}="`${ECHO} "\
        ${!TOOL_CCLDFLAGS} \
        ${STDLIB_CXXLDFLAG} \
        ${!TOOL_CXXLDFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_LDFLAGS}="`${ECHO} "\
        ${SYSROOT_CFLAG} \
        ${PACKAGE_PREFIX_LIBDIR_CFLAG} \
        ${FLTO_CFLAG} \
        ${LINKER_PLATFORM_LDFLAG} \
        ${!TOOL_LDFLAGS} \
    " | ${XARGS}`"
    export ${TOOL_LIBS}="`${ECHO} "\
        ${!TOOL_LIBS} \
    " | ${XARGS}`"

    if [ "${!VARIANT_OS}" = "macos" ]; then
        export MACOSX_DEPLOYMENT_TARGET=${!VARIANT_OS_API_LEVEL}
    fi
}

function export-compiler-environment-for-go() {
    export CGO_ENABLED=${CGO_ENABLED:-1}
    export CGO_CFLAGS=`${ECHO} "\
        -O${OPTIMIZATION_LEVEL} \
        ${CFLAGS} \
    " | ${XARGS}`
    export CGO_CPPFLAGS=`${ECHO} "\
        -O${OPTIMIZATION_LEVEL} \
        ${CPPFLAGS} \
    " | ${XARGS}`
    export CGO_CXXFLAGS=`${ECHO} "\
        -O${OPTIMIZATION_LEVEL} \
        ${CXXFLAGS} \
    " | ${XARGS}`
    export CGO_LDFLAGS=`${ECHO} "\
        -O${LINKER_OPTIMIZATION_LEVEL} \
        ${CCLDFLAGS} \
    " | ${XARGS}`
    export GO=${GO:-${BINDIR}/go}
    export GOROOT=${GOROOT:-${BUILD_PACKAGE_PREFIX}/go}

    if [ "${BUILD_PROCESSOR}" = "aarch64" ]; then
        export GOHOSTARCH=arm64
    elif [ "${BUILD_PROCESSOR}" = "x86_64" ]; then
        export GOHOSTARCH=amd64
    fi

    if [ "${BUILD_OS}" = "android" ]; then
        export GOHOSTOS=android
    elif [ "${BUILD_OS}" = "gnu" ] ||
         [ "${BUILD_OS}" = "musl" ]; then
        export GOHOSTOS=linux
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        export GOHOSTOS=darwin
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        export GOHOSTOS=windows
    fi

    if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
        export GOARCH=arm64
    elif [ "${HOST_PROCESSOR}" = "x86_64" ]; then
        export GOARCH=amd64
    fi

    if [ "${HOST_OS}" = "android" ]; then
        export GOOS=android
    elif [ "${HOST_OS}" = "gnu" ] ||
         [ "${HOST_OS}" = "musl" ]; then
        export GOOS=linux
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        export GOHS=darwin
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        export GOOS=windows
    fi

    if [ "${HOST_OS}" = "musl" ]; then
        export GO_LDSO=/lib/ld-${HOST_OS}-${HOST_PROCESSOR}.so.1
    fi
}

function export-compiler-environment-for-swift() {
    if [ "${SYSROOT}" != "/" ]; then
        SWIFTCFLAGS="\
            -sdk ${SYSROOT} \
            ${SWIFTCFLAGS} \
        "
    fi

    if [ -z "${DISABLE_FORTIFY_SOURCE_LEVEL}" ]; then
        for FORTIFY_CFLAG in ${FORTIFY_CFLAGS}; do
            FORTIFY_SWIFTCFLAGS="-Xcc ${FORTIFY_CFLAG} ${FORTIFY_SWIFTCFLAGS}"
        done
    fi

    if [ "${HOST_OS}" = "macos" ]; then
        SWIFTCFLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            -Xlinker -Wl,-platform_version,${HOST_OS},${HOST_OS_API_LEVEL},${HOST_OS_API_LEVEL} \
            ${FORTIFY_SWIFTCFLAGS} \
            ${SWIFTCFLAGS} \
        "
    elif [ "${HOST_OS}" = "musl" ]; then
        SWIFTCFLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            ${SWIFTCFLAGS} \
        "
    fi

    if [ "${SYSROOT}${PACKAGE_USR_PREFIX}" != "${PACKAGE_PREFIX}" ]; then
        SWIFTCFLAGS="\
            -I${PACKAGE_PREFIX}/include \
            -L${PACKAGE_PREFIX}/lib \
            ${SWIFTCFLAGS} \
        "
    fi

    export SWIFTC=${SWIFTC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-swiftc}
    export SWIFTCFLAGS=`${ECHO} "\
        -resource-dir ${PACKAGE_PREFIX}/lib/swift \
        -O${SWIFT_OPTIMIZATION_LEVEL} \
        -Xcc -pipe \
        -Xcc -stdlib++-isystem -Xcc ${CXX_INCLUDE_DIR} \
        ${FORTIFY_SWIFTCFLAGS} \
        ${SWIFTCFLAGS} \
    " | ${XARGS}`
}

function generate-compiler-tools() {
    generate-compiler-tools-variant BUILD
    generate-compiler-tools-variant HOST
}

function generate-compiler-tools-variant() {
    ENV_PREFIX=
    VARIANT=${1}
    VARIANT_OS=${VARIANT}_OS

    if [ "${VARIANT}" != "HOST" ]; then
        ENV_PREFIX="${VARIANT}_"
    fi

    GENERATED_BINDIR=${GENERATED_BINDIR:-${STAGE_ROOT}}
    TOOL_PREFIX=`${ECHO} ${VARIANT} | ${TR} '[:upper:]' '[:lower:]'`

    TOOL_AS=${ENV_PREFIX}AS
    TOOL_ASFLAGS=${ENV_PREFIX}ASFLAGS
    TOOL_CC=${ENV_PREFIX}CC
    TOOL_CFLAGS=${ENV_PREFIX}CFLAGS
    TOOL_CCLD=${ENV_PREFIX}CCLD
    TOOL_CCLDFLAGS=${ENV_PREFIX}CCLDFLAGS
    TOOL_CPP=${ENV_PREFIX}CPP
    TOOL_CPPFLAGS=${ENV_PREFIX}CPPFLAGS
    TOOL_CXX=${ENV_PREFIX}CXX
    TOOL_CXXFLAGS=${ENV_PREFIX}CXXFLAGS
    TOOL_CXXLD=${ENV_PREFIX}CXXLD
    TOOL_CXXLDFLAGS=${ENV_PREFIX}CXXLDFLAGS
    TOOL_LD=${ENV_PREFIX}LD
    TOOL_LDFLAGS=${ENV_PREFIX}LDFLAGS
    TOOL_OBJC=${ENV_PREFIX}OBJC
    TOOL_OBJCFLAGS=${ENV_PREFIX}OBJCFLAGS
    TOOL_OBJCPP=${ENV_PREFIX}OBJCPP
    TOOL_OBJCXX=${ENV_PREFIX}OBJCXX
    TOOL_OBJCXXFLAGS=${ENV_PREFIX}OBJCXXFLAGS

    create-host-tool ${!TOOL_AS} ${ENV_PREFIX}ASFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-as-clang
    create-host-tool ${!TOOL_CC} ${ENV_PREFIX}CFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang
    create-host-tool ${!TOOL_CCLD} ${ENV_PREFIX}CCLDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang
    create-host-tool ${!TOOL_CPP} ${ENV_PREFIX}CPPFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang-cpp
    create-host-tool ${!TOOL_CXX} ${ENV_PREFIX}CXXFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang++
    create-host-tool ${!TOOL_CXXLD} ${ENV_PREFIX}CCLDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang++
    create-host-tool ${!TOOL_LD} ${ENV_PREFIX}LDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld

    export ${TOOL_AS}=${GENERATED_BINDIR}/${TOOL_PREFIX}-as-clang
    export ${TOOL_ASFLAGS}="${OPTIMIZATION_CFLAG}"
    export ${TOOL_CC}=${GENERATED_BINDIR}/${TOOL_PREFIX}-clang
    export ${TOOL_CFLAGS}="${OPTIMIZATION_CFLAG}"
    export ${TOOL_CCLD}=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang
    export ${TOOL_CCLDFLAGS}="${OPTIMIZATION_LDFLAG} ${STRIP_CFLAG}"
    export ${TOOL_CPP}=${!TOOL_CC}-cpp
    export ${TOOL_CXX}=${!TOOL_CC}++
    export ${TOOL_CXXFLAGS}="${OPTIMIZATION_CFLAG}"
    export ${TOOL_CXXLD}=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang++
    export ${TOOL_CXXLDFLAGS}="${OPTIMIZATION_LDFLAG} ${STRIP_CFLAG}"
    export ${TOOL_LD}=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld
    export ${TOOL_LDFLAGS}="${OPTIMIZATION_LDFLAG} ${STRIP_CFLAG}"
    export ${TOOL_OBJC}=${!TOOL_CC}
    export ${TOOL_OBJCFLAGS}="${OPTIMIZATION_CFLAG}"
    export ${TOOL_OBJCPP}=${!TOOL_CPP}
    export ${TOOL_OBJCXX}=${!TOOL_CXX}
    export ${TOOL_OBJCXXFLAGS}="${OPTIMIZATION_CFLAG}"
}

function get-rust-build-deps() {
    RUST_PACKAGE_NAME=$(jq -r --argjson id $index \
                                '.[$id].sourcePackageName' \
                                ${RUST_PACKAGE_LIST})
    RUST_PACKAGE_VERSION=$(jq -r --argjson id $index \
                                '.[$id].sourcePackageVersion' \
                                ${RUST_PACKAGE_LIST})
    RUST_PACKAGE_URL=$(jq -r --argjson id $index \
                                '.[$id].upstreamUrl' \
                                ${RUST_PACKAGE_LIST})
}

function tool-build() {
    if [ -z "${DISABLE_TOOL_BUILD}" ]; then
        ${ECHO}
        ${ECHO} -e "    Tool Invocation"
        ${ECHO} -e "        Tool Name: \e[1m${TOOL}\e[0m"
        ${ECHO} -e "        Parallel Invocations: ${NUM_PROCESSORS}"
        ${ECHO} -e "        Log Files: \e[31m${STAGE_ROOT}/builder-compile.log\e[0m"
        ${ECHO} -e "                   \e[31m${STAGE_ROOT}/builder-compile-stderr.log\e[0m"
        ${ECHO} -e "        Time Started: \e[4m$(date)\e[0m"

        TOOL_LOG=${STAGE_ROOT}/builder-compile \
        tool-log ${TOOL} -j${NUM_PROCESSORS} \
                        "${@}"

        ${ECHO} -e "        Time Completed: \e[4m$(date)\e[0m"
    fi
}

function tool-install() {
    DESTDIR=${DESTDIR:-${INSTALL_ROOT}}
    TOOL_INSTALL=${TOOL_INSTALL_INVOCATION:-tool-install-default-invocation}

    ${ECHO}
    ${ECHO} -e "    Installation Invocation"
    ${ECHO} -e "        Tool Name: \e[1m${TOOL}\e[0m"
    ${ECHO} -e "        Destination Directory: ${DESTDIR}"
    ${ECHO} -e "        Log Files: \e[31m${STAGE_ROOT}/builder-installation.log\e[0m"
    ${ECHO} -e "                   \e[31m${STAGE_ROOT}/builder-installation-stderr.log\e[0m"
    ${ECHO} -e "        Time Started: \e[4m$(date)\e[0m"

    if [ "`${BASENAME} ${TOOL}`" = "make" ]; then
        DESTDIR_CMD="DESTDIR=${DESTDIR}"
    else
        export DESTDIR=${DESTDIR}
    fi

    TOOL_INSTALL_INVOCATION= \
    ${TOOL_INSTALL} "${@}"

    ${ECHO} -e "        Time Completed: \e[4m$(date)\e[0m"
}

function tool-install-default-invocation() {
    NUM_PROCESSORS_ARGS=${NUM_PROCESSOR_ARGS:-"-j"}

    TOOL_LOG=${STAGE_ROOT}/builder-installation \
    tool-log ${TOOL} ${NUM_PROCESSORS_ARGS}${NUM_PROCESSORS} \
                     ${INSTALL_TARGET:-install} \
                     ${DESTDIR_CMD} \
                     "${@}"
}

function make-build() {
    TOOL=${MAKE} \
    tool-build "${@}"
}

function make-install() {
    TOOL=${MAKE} \
    tool-install "${@}"
}

function ninja-build() {
    TOOL=${NINJA} \
    tool-build "${@}"
}

function ninja-install() {
    TOOL=${NINJA} \
    tool-install "${@}"
}

function package-autoreconf() {
    if [ -z "${DISABLE_AUTORECONF}" ]; then
        TOOL_LOG=${STAGE_ROOT}/builder-compile \
        tool-log ${AUTORECONF} "${@}"
    fi
}

function package-autoupdate() {
    if [ -z "${DISABLE_AUTOUPDATE}" ]; then
        TOOL_LOG=${STAGE_ROOT}/builder-compile \
        tool-log ${AUTOUPDATE} "${@}"
    fi
}

function package-bootstrap() {
    BOOTSTRAP_FILE=${BOOTSTRAP_FILE:-bootstrap}
    TOOL_LOG=${STAGE_ROOT}/builder-bootstrap \
    tool-log ${BASH} ${BOOTSTRAP_FILE} ${BOOTSTRAP_ARGS}
}

function package-bootstrap-configure-install() {
    CONFIGURE_FILE_ROOT=${CONFIGURE_FILE_ROOT:-${STAGE_ROOT}}
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}/build}

    # Configure the build components
    copy-source-to-staging

    mkdir -p ${CONFIGURE_BUILD_ROOT}

    package-push-directory ${CONFIGURE_FILE_ROOT}
        package-autoupdate
        package-gnulib-override
        package-bootstrap
    package-pop-directory

    package-configure-install-staged "${@}"
}


function package-bootstrap-configure-install-archive() {
    package-bootstrap-configure-install \
        "${@}"
    package-invoke-archive-install
}

function package-clean-texinfo-lint() {
    ${RM} -rf ${INSTALL_PREFIX}/lib/charset.alias
    ${RM} -rf ${INSTALL_PREFIX}/share/info/dir
}

function package-cmake() {
    CONFIGURE_TOOL=cmake \
    package-configure-tool-invocation \
        "${@}"
}

function package-cmake-invocation() {
    BUILD_TYPE=${BUILD_TYPE:-Release}
    CMAKE_CONFIGURE_ROOT=${CMAKE_CONFIGURE_ROOT:-${SOURCE_ROOT}}
    CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX:-${PACKAGE_PREFIX}}
    COMPILER_TARGET=${COMPILER_TARGET:-${HOST_TRIPLE}}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        if [ "${HOST_OS}" = "android" ] ||
           [ "${HOST_OS}" = "gnu" ] ||
           [ "${HOST_OS}" = "musl" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Linux}
        elif [ "${HOST_OS}" = "macos" ]; then
            CMAKE_LIBTOOL=${LIBTOOL_DARWIN}
            SYSTEM_NAME=${SYSTEM_NAME:-Darwin}
        elif [ "${HOST_OS}" = "mingw32" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Windows}
        elif [ "${HOST_OS}" = "wasi" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Fuchsia}
        fi

        CROSSCOMPILING_CMD="-DCMAKE_CROSSCOMPILING=TRUE"
        SYSTEM_NAME_CMD="-DCMAKE_SYSTEM_NAME=${SYSTEM_NAME}"
    fi

    AS_COMPILER_ID=${AS_COMPILER_ID:-Clang}
    CXX_STANDARD=${CXX_STANDARD:-20}

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${CMAKE} \
        -G Ninja \
        -DCMAKE_AR=${AR} \
        -DCMAKE_ASM_COMPILER=${AS} \
        -DCMAKE_ASM_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_ASM_COMPILER_ID=${AS_COMPILER_ID} \
        -DCMAKE_ASM_FLAGS="${ASFLAGS}" \
        -DCMAKE_ASM_FLAGS_DEBUG= \
        -DCMAKE_ASM_FLAGS_MINSIZEREL= \
        -DCMAKE_ASM_FLAGS_RELEASE= \
        -DCMAKE_ASM_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DCMAKE_C_COMPILER=${CC} \
        -DCMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_C_CREATE_SHARED_LIBRARY="${CCLD} <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_C_FLAGS="${CFLAGS}" \
        -DCMAKE_C_FLAGS_DEBUG= \
        -DCMAKE_C_FLAGS_MINSIZEREL= \
        -DCMAKE_C_FLAGS_RELEASE= \
        -DCMAKE_C_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_C_LINK_EXECUTABLE="${CCLD} <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_COMPILER=${CXX} \
        -DCMAKE_CXX_COMPILER_TARGET=${HOST_TRIPLE} \
        -DCMAKE_CXX_CREATE_SHARED_LIBRARY="${CXXLD} <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        -DCMAKE_CXX_FLAGS_DEBUG= \
        -DCMAKE_CXX_FLAGS_MINSIZEREL= \
        -DCMAKE_CXX_FLAGS_RELEASE= \
        -DCMAKE_CXX_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_CXX_LINK_EXECUTABLE="${CXXLD} <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_STANDARD=${CXX_STANDARD} \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_EXE_LINKER_FLAGS_DEBUG= \
        -DCMAKE_EXE_LINKER_FLAGS_MINSIZEREL= \
        -DCMAKE_EXE_LINKER_FLAGS_RELEASE= \
        -DCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -DCMAKE_INSTALL_NAME_TOOL=${INSTALL_NAME_TOOL} \
        -DCMAKE_LIBTOOL=${CMAKE_LIBTOOL} \
        -DCMAKE_LINKER=${LD} \
        -DCMAKE_LIPO=${LIPO} \
        -DCMAKE_MAKE_PROGRAM=${NINJA} \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_MODULE_LINKER_FLAGS_DEBUG= \
        -DCMAKE_MODULE_LINKER_FLAGS_MINSIZEREL= \
        -DCMAKE_MODULE_LINKER_FLAGS_RELEASE= \
        -DCMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_NM=${NM} \
        -DCMAKE_OBJC_COMPILER=${OBJC} \
        -DCMAKE_OBJC_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_OBJC_CREATE_SHARED_LIBRARY="${CCLD} <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_OBJC_FLAGS="${CFLAGS}" \
        -DCMAKE_OBJC_FLAGS_DEBUG= \
        -DCMAKE_OBJC_FLAGS_MINSIZEREL= \
        -DCMAKE_OBJC_FLAGS_RELEASE= \
        -DCMAKE_OBJC_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_OBJC_LINK_EXECUTABLE="${CCLD} <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_OBJCOPY=${OBJCOPY} \
        -DCMAKE_OBJCXX_COMPILER=${OBJCXX} \
        -DCMAKE_OBJCXX_COMPILER_TARGET=${HOST_TRIPLE} \
        -DCMAKE_OBJCXX_CREATE_SHARED_LIBRARY="${CXXLD} <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_OBJCXX_FLAGS="${CXXFLAGS}" \
        -DCMAKE_OBJCXX_FLAGS_DEBUG= \
        -DCMAKE_OBJCXX_FLAGS_MINSIZEREL= \
        -DCMAKE_OBJCXX_FLAGS_RELEASE= \
        -DCMAKE_OBJCXX_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_OBJCXX_LINK_EXECUTABLE="${CXXLD} <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_OBJCXX_STANDARD=${CXX_STANDARD} \
        -DCMAKE_OBJDUMP=${OBJDUMP} \
        -DCMAKE_PREFIX_PATH=${PKG_CONFIG_PATH} \
        -DCMAKE_RANLIB=${RANLIB} \
        -DCMAKE_RC_COMPILER=${RC} \
        -DCMAKE_READELF=${READELF} \
        -DCMAKE_Swift_COMPILER=${SWIFTC} \
        -DCMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_Swift_FLAGS="${SWIFTCFLAGS}" \
        -DCMAKE_STRINGS=${STRINGS} \
        -DCMAKE_STRIP=${STRIP} \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS_DEBUG= \
        -DCMAKE_SHARED_LINKER_FLAGS_MINSIZEREL= \
        -DCMAKE_SHARED_LINKER_FLAGS_RELEASE= \
        -DCMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_SYSROOT=${SYSROOT} \
        -DCMAKE_SYSTEM_PROCESSOR=${HOST_PROCESSOR} \
        "${CROSSCOMPILING_CMD}" \
        "${SYSTEM_NAME_CMD}" \
        "${@}" \
        ${CMAKE_CONFIGURE_ROOT}
}

function package-cmake-install() {
    CMAKE_STAGE_ROOT=${CMAKE_STAGE_ROOT:-${STAGE_ROOT}}
    
    # Configure the build components
    package-push-directory ${CMAKE_STAGE_ROOT}
        package-cmake \
            "${@}"

        # Build the package
        ninja-build
    package-pop-directory

    # Install the package
    PACKAGE_INSTALL_STAGE_ROOT=${CMAKE_STAGE_ROOT} \
    TOOL=ninja \
    package-install
}

function package-cmake-install-archive() {
    package-cmake-install \
        "${@}"
    package-invoke-archive-install
}

function package-configure() {
    CONFIGURE_TOOL=configure \
    USE_GENERATED_TOOLS=TRUE \
    package-configure-tool-invocation \
        "${@}"
}

function package-configure-invocation() {
    CONFIGURE_HOST_TRIPLE=${CONFIGURE_HOST_TRIPLE:-${HOST_TRIPLE}}

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log "${@}" \
        --build=${BUILD_TRIPLE} \
        --host=${CONFIGURE_HOST_TRIPLE} \
        --prefix=${PACKAGE_PREFIX} \
        ${CONFIGURE_FLAGS}
}

function package-configure-install() {
    DISABLE_AUTORECONF=TRUE \
    package-stage-configure-install \
        "${@}"
}

function package-configure-install-staged() {
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}}
    CONFIGURE_FILE=${CONFIGURE_FILE:-configure}
    CONFIGURE_FILE_ROOT=${CONFIGURE_FILE_ROOT:-${SOURCE_ROOT}}

    package-push-directory ${CONFIGURE_BUILD_ROOT}
        # Strip problematic configure checks
        ${SED} -i \
               "s/'auto-import'/'ld'/g" \
               ${CONFIGURE_FILE_ROOT}/${CONFIGURE_FILE}

        # Configure package
        package-configure \
            ${CONFIGURE_FILE_ROOT}/${CONFIGURE_FILE} \
            "${@}"

        # Build the package
        make-build
    package-pop-directory

    # Install the package
    PACKAGE_INSTALL_STAGE_ROOT=${CONFIGURE_BUILD_ROOT} \
    TOOL=make \
    package-install
}

function package-configure-install-archive() {
    package-configure-install "${@}"
    package-invoke-archive-install
}

function package-configure-tool-invocation() {
    export-compiler-environment

    if [ -n "${USE_GENERATED_TOOLS}" ]; then
        generate-compiler-tools
    fi

    package-${CONFIGURE_TOOL}-invocation \
        ${@}
}

function package-install() {
    PACKAGE_INSTALL_STAGE_ROOT=${PACKAGE_INSTALL_STAGE_ROOT:-${STAGE_ROOT}}

    package-push-directory ${PACKAGE_INSTALL_STAGE_ROOT}
        # Install package
        tool-install

        # Remove texinfo related lint
        package-clean-texinfo-lint

        # RPATH fixups
        rpath-fixup

        # Completion callback
        if [ -n "${PACKAGE_INSTALL_COMPLETION_CALLBACK}" ]; then
            ${PACKAGE_INSTALL_COMPLETION_CALLBACK}
        fi
    package-pop-directory
}

function package-invoke-archive-install() {
    # Build the package
    deb-package-build

    # Install the package
    deb-package-install
}

# package-get-path <name> <EXECUTABLE|SHARED|STATIC>
function package-get-filename() {
    NAME=${1}
    TYPE=${2}

    case ${TYPE} in
    EXECUTABLE)
        RESULT=${NAME}${EXECUTABLE_SUFFIX}
        ;;
    SHARED)
        RESULT=${SHARED_LIBRARY_PREFIX}${NAME}${SHARED_LIBRARY_SUFFIX}
        ;;
    STATIC)
        RESULT=${STATIC_LIBRARY_PREFIX}${NAME}${STATIC_LIBRARY_SUFFIX}
        ;;
    *)
        echo "package-get-filename: Unknown type ${TYPE}."
        exit 1
    esac

    echo ${RESULT}
}

# package-get-path <name> <EXECUTABLE|SHARED|STATIC> <BUILD|HOST>
function package-get-path() {
    NAME=${1}
    TYPE=${2}
    VARIANT=${3}

    if [ "${TYPE}" = "EXECUTABLE" ]; then
        SUBDIR=bin
    else
        SUBDIR=lib
    fi

    RESULT=${PACKAGE_PREFIX}/${SUBDIR}

    if [ "${VARIANT}" = "BUILD" ]; then
        RESULT=${BUILD_PACKAGE_PREFIX}/${SUBDIR}
    fi

    RESULT=${RESULT}/`package-get-filename ${NAME} ${TYPE}`

    if [ -f "${RESULT}" ]; then
        echo ${RESULT}
    fi
}

function package-go-build() {
    package-go-tool build "${@}"
}

function package-go-get() {
    package-go-tool get "${@}"
}

function package-go-mod() {
    GO_TOOL_LOG_SUFFIX=${1}-${2}
    package-go-tool mod "${@}"
}

function package-go-mod-init() {
    package-go-mod init "${@}"
}

function package-go-mod-tidy() {
    package-go-mod tidy "${@}"
}

function package-go-mod-vendor() {
    package-go-mod vendor "${@}"
}

function package-go-tool() {
    GO_STAGE_ROOT=${GO_STAGE_ROOT:-${STAGE_ROOT}}
    GO_TOOL_LOG_SUFFIX=${GO_TOOL_LOG_SUFFIX:-${1}}

    package-push-directory ${GO_STAGE_ROOT}
        TOOL_LOG=${STAGE_ROOT}/builder-go-${GO_TOOL_LOG_SUFFIX} \
        tool-log ${GO} "${@}"
    package-pop-directory
}

function package-gnulib-override() {
    GNULIB_DIR=${GNULIB_DIR:-glib}
    GNULIB_ROOT=${GNULIB_ROOT:-${STAGE_ROOT}}

    if [ -n "${ENABLE_GNULIB_OVERRIDE}" ]; then
        ${RM} -rf glib
        ${LN} -sf \
               ${SOURCE_ROOT_BASE}/gnulib-0 \
               ${GNULIB_ROOT}/${GNULIB_DIR}
    fi
}

function package-libtoolize() {
    if [ -n "${ENABLE_LIBTOOLIZE}" ]; then
        TOOL_LOG=${STAGE_ROOT}/builder-libtoolize \
        tool-log ${BINDIR}/libtoolize "${@}"
    fi
}

function package-meson-build() {
    CONFIGURE_TOOL=meson-build \
    USE_GENERATED_TOOLS=TRUE \
    package-configure-tool-invocation \
        "${@}"
}

function package-meson-build-invocation() {
    BACKEND=${BACKEND:-ninja}
    BUILD_TYPE=${BUILD_TYPE:-custom}
    CONFIG_FILE=${STAGE_ROOT}/build-config.txt
    DEBUG=${DEBUG:-false}
    ENDIAN=${ENDIAN:-little}
    BUILD_SYSTEM=${BUILD_OS}

    if [ "${BUILD_OS}" = "gnu" ] ||
       [ "${BUILD_OS}" = "musl" ]; then
        BUILD_SYSTEM="linux"
    elif [ "${BUILD_OS}" = "macos" ]; then
        BUILD_SYSTEM="darwin"
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        BUILD_SYSTEM="windows"
    fi

    HOST_SYSTEM=${HOST_OS}

    if [ "${HOST_OS}" = "gnu" ] ||
       [ "${HOST_OS}" = "musl" ]; then
        HOST_SYSTEM="linux"
    elif [ "${HOST_OS}" = "macos" ]; then
        HOST_SYSTEM="darwin"
    elif [ "${HOST_OS}" = "mingw32" ]; then
        HOST_SYSTEM="windows"
    fi

    MESON_BUILD_CONFIG=native
    HOST_CMAKE_PREFIXES="${PACKAGE_PREFIX}/lib/cmake:${PKG_CONFIG_PATH}"
    HOST_C_ARGS=`${ECHO} [\'${CFLAGS}\'] | ${SED} "s/ /','/g"`
    HOST_C_LINK_ARGS=`${ECHO} [\'${LDFLAGS}\'] | ${SED} "s/ /','/g"`
    HOST_CMAKE_PREFIX_PATH=`${ECHO} [\'${HOST_CMAKE_PREFIXES}\'] | ${SED} "s/:/','/g"`
    HOST_CPP_ARGS=`${ECHO} [\'${CXXFLAGS}\'] | ${SED} "s/ /','/g"`
    HOST_CPP_LINK_ARGS=`${ECHO} [\'${LDFLAGS}\'] | ${SED} "s/ /','/g"`

    export CMAKE_PREFIX_PATH=`${ECHO} ${HOST_CMAKE_PREFIXES} | ${TR} ':' ';'`

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        MESON_BUILD_CONFIG=cross

        BUILD_CFLAGS="-I${BUILD_PACKAGE_PREFIX}/include"
        BUILD_CMAKE_PREFIXES="${BUILD_PACKAGE_PREFIX}/lib/cmake:${BUILD_PACKAGE_PREFIX}/lib/pkgconfig:${BUILD_PACKAGE_PREFIX}/share/pkgconfig"
        BUILD_CXXFLAGS="-I${BUILD_PACKAGE_PREFIX}/include"
        BUILD_LDFLAGS="-L${BUILD_PACKAGE_PREFIX}/lib"
        BUILD_PKG_CONFIG_PATH="${BUILD_PACKAGE_PREFIX}/lib/pkgconfig:${BUILD_PACKAGE_PREFIX}/share/pkgconfig"

        BUILD_C_ARGS=`${ECHO} [\'${BUILD_CFLAGS}\'] | ${SED} "s/ /','/g"`
        BUILD_C_LINK_ARGS=`${ECHO} [\'${BUILD_LDFLAGS}\'] | ${SED} "s/ /','/g"`
        BUILD_CMAKE_PREFIX_PATH=`${ECHO} [\'${BUILD_CMAKE_PREFIXES}\'] | ${SED} "s/:/','/g"`
        BUILD_CPP_ARGS=`${ECHO} [\'${BUILD_CXXFLAGS}\'] | ${SED} "s/ /','/g"`
        BUILD_CPP_LINK_ARGS=`${ECHO} [\'${BUILD_LDFLAGS}\'] | ${SED} "s/ /','/g"`

        export CC_FOR_BUILD=${BUILD_CC}
        export CXX_FOR_BUILD=${BUILD_CXX}
        export CMAKE_FOR_BUILD=${CMAKE}
        export CMAKE_PREFIX_PATH_FOR_BUILD=`${ECHO} ${BUILD_CMAKE_PREFIXES} | ${TR} ":" ";"`

        create-indirect-pkg-config BUILD_PKG_CONFIG_PATH ${STAGE_ROOT}/build-pkgconfig

        export PKG_CONFIG_FOR_BUILD=${STAGE_ROOT}/build-pkgconfig
    fi

    ${ECHO} "\
[binaries]
${MESON_EXTRA_BINARIES}
" > ${CONFIG_FILE}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        ${ECHO} "\
[properties]
needs_exe_wrapper = true

[build_machine]
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC_FOR_BUILD}'
c_args = ${BUILD_C_ARGS}
c_ld = '${BINDIR}/ld.lld'
c_link_args = ${BUILD_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${BUILD_CMAKE_PREFIX_PATH}
cpp = '${CXX_FOR_BUILD}'
cpp_args = ${BUILD_CPP_ARGS}
cpp_ld = '${BINDIR}/ld.lld'
cpp_link_args = ${BUILD_CPP_LINK_ARGS}
cpu = '${BUILD_ARCH}'
cpu_family = '${BUILD_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
objc = '${CC_FOR_BUILD}'
objcpp = '${CXX_FOR_BUILD}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${STAGE_ROOT}/build-pkg-config'
pkgconfigpath = ''
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${BUILD_SYSTEM}'
windres = '${WINDRES}'

[host_machine]
        " >> ${CONFIG_FILE}
    fi

    ${ECHO} "\
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC}'
c_args = ${HOST_C_ARGS}
c_ld = '${LD}'
c_link_args = ${HOST_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${HOST_CMAKE_PREFIX_PATH}
cpp = '${CXX}'
cpp_args = ${HOST_CPP_ARGS}
cpp_ld = '${LD}'
cpp_link_args = ${HOST_CPP_LINK_ARGS}
cpu = '${HOST_ARCH}'
cpu_family = '${HOST_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
objc = '${OBJC}'
objcpp = '${OBJCPP}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${PKG_CONFIG}'
pkg_config_path = '${PKG_CONFIG_PATH}'
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${HOST_SYSTEM}'
windres = '${WINDRES}'
    " >> ${CONFIG_FILE}


    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        ${ECHO} "\
[target_machine]
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC}'
c_args = ${HOST_C_ARGS}
c_ld = '${LD}'
c_link_args = ${HOST_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${HOST_CMAKE_PREFIX_PATH}
cpp = '${CXX}'
cpp_args = ${HOST_CPP_ARGS}
cpp_ld = '${LD}'
cpp_link_args = ${HOST_CPP_LINK_ARGS}
cpu = '${HOST_ARCH}'
cpu_family = '${HOST_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
objc = '${OBJC}'
objcpp = '${OBJCPP}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${PKG_CONFIG}'
pkg_config_path = '${PKG_CONFIG_PATH}'
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${HOST_SYSTEM}'
windres = '${WINDRES}'
" >> ${CONFIG_FILE}
    fi

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${MESON} \
         ${SOURCE_ROOT} \
         ${STAGE_ROOT} \
         -Dlibdir=${PACKAGE_PREFIX}/lib \
         -Dprefix=${PACKAGE_PREFIX} \
         --${MESON_BUILD_CONFIG}-file ${CONFIG_FILE} \
         "${@}"
}

function package-meson-install() {
    MESON_STAGE_ROOT=${MESON_STAGE_ROOT:-${STAGE_ROOT}}

    package-push-directory ${MESON_STAGE_ROOT}
        # Configure the package
        package-meson-build \
            "${@}"

        # Build the package
        ninja-build
    package-pop-directory

    # Install the package
    PACKAGE_INSTALL_STAGE_ROOT=${MESON_STAGE_ROOT} \
    TOOL=ninja \
    package-install
}

function package-meson-install-archive() {
    package-meson-install \
        "${@}"
    package-invoke-archive-install
}

function package-python-build() {
    SETUP_PY=${SETUP_PY:-${SOURCE_ROOT}/setup.py}
    INSTALLED_FILE_LIST=${INSTALLED_FILE_LIST:-${STAGE_ROOT}/installed-file-list.txt}

    export-compiler-environment
    generate-compiler-tools

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${PYTHON} ${SETUP_PY} build -b ${STAGE_ROOT} \
                                         -j ${NUM_PROCESSORS}

    TOOL_LOG=${STAGE_ROOT}/builder-installation \
    tool-log ${PYTHON} ${SETUP_PY} install --prefix ${INSTALL_PREFIX} \
                                           --record ${INSTALLED_FILE_LIST} \
                                           --single-version-externally-managed
}

function package-stage-configure-install() {
    CONFIGURE_FILE_ROOT=${CONFIGURE_FILE_ROOT:-${STAGE_ROOT}}
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}/build}

    # Configure the build components
    copy-source-to-staging

    mkdir -p ${CONFIGURE_BUILD_ROOT}

    package-push-directory ${CONFIGURE_FILE_ROOT}
        package-autoupdate
        package-gnulib-override
        package-libtoolize -ci
        package-autoreconf -fi
    package-pop-directory

    package-configure-install-staged "${@}"
}

function package-stage-configure-install-archive() {
    package-stage-configure-install "${@}"

    package-invoke-archive-install
}

function package-swift-build() {
    export-compiler-environment

    SWIFT_BUILD_TYPE=${SWIFT_BUILD_TYPE:-release}
    TEMP_FILE=`mktemp`

    if [ -n "${HOST_ARCH_VECTOR_SIZE}" ]; then
        HOST_VECTOR_CFLAG="-mllvm\", \"-force-vector-width=${HOST_ARCH_VECTOR_SIZE}"
        HOST_VECTOR_SWIFTCFLAG="-Xllvm\", \"-force-vector-width=${HOST_ARCH_VECTOR_SIZE}"
    fi

    if [ -z "${DISABLE_POLLY}" ]; then
        POLLY_CFLAG="-mllvm\", \"-polly"
        POLLY_SWIFTCFLAG="-Xllvm\", \"-polly"
    fi

    if [ -n "${DISABLE_LLVM_VERIFIER}" ]; then
        DISABLE_LLVM_VERIFIER_CFLAG="-Xclang\", \"-disable-llvm-verifier"
    fi

    if [ -z "${DISABLE_STRIP}" ] &&
       [ "${HOST_OS}" != "macos" ]; then
        STRIP_LDFLAG="-s"
    fi

    if [ -z "${DISABLE_VERBOSE}" ]; then
        SWIFT_BUILD_FLAGS="\
            -v \
            ${SWIFT_BUILD_FLAGS} \
        "
    fi

    if [ -n "${ENABLE_FLTO}" ]; then
        FLTO_OPTION=`${ECHO} ${ENABLE_FLTO} | ${TR} '[:upper:]' '[:lower:]'`
        FLTO_CFLAG="-flto=${FLTO_OPTION}"
        FLTO_SWIFTCFLAG="-whole-module-optimization"
    fi

    if [ "${HOST_OS}" = "android" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            -Xcc -D__USE_FORTIFY_LEVEL=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFT_BUILD_FLAGS} \
        "
    elif [ "${HOST_OS}" = "musl" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFT_BUILD_FLAGS} \
        "
    elif [ "${HOST_OS}" = "mingw32" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFT_BUILD_FLAGS} \
        "
    fi

    if [ "${HOST_OS}" != "mingw32" ]; then
        TARGET=${TARGET:-${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
    else
        TARGET=${TARGET:-${HOST_PROCESSOR}-unknown-windows-gnu}
    fi

    SWIFT_BUILD_FLAGS=`${ECHO} "\
        ${SWIFT_BUILD_FLAGS} \
    " | ${XARGS}`

    ${ECHO} -e "{ \n\
        \"version\": 1, \n\
        \"sdk\": \"${SYSROOT}\", \n\
        \"toolchain-bin-dir\": \"${BINDIR}\", \n\
        \"target\": \"${TARGET}\", \n\
        \"extra-cc-flags\": [ \n\
            \"-march=${HOST_ARCH}\", \n\
            \"-mtune=${HOST_CPU}\", \n\
            \"-pipe\", \n\
            \"-resource-dir=${PACKAGE_PREFIX}/lib/clang/13.0.0\", \n\
            \"-stdlib++-isystem\", \"${PACKAGE_PREFIX}/include/c++/v1\", \n\
            \"-target\", \"${TARGET}\", \n\
            \"-I${PACKAGE_PREFIX}/lib/swift\", \n\
            \"-I${PACKAGE_PREFIX}/lib/swift/Block\", \n\
            \"-O${OPTIMIZATION_LEVEL}\", \n\
            \"--sysroot=${SYSROOT}\", \n\
            \"${FLTO_CFLAG}\", \n\
            \"${FPIC_CFLAG}\", \n\
            \"${HOST_VECTOR_CFLAG}\", \n\
            \"${POLLY_CFLAG}\" \n\
        ], \n\
        \"extra-cpp-flags\": [ \n\
        ], \n\
        \"extra-linker-flags\": [ \n\
            \"-O${LINKER_OPTIMIZATION_LEVEL}\", \n\
            \"${DISABLE_LLVM_VERIFIER_CFLAG}\", \n\
            \"${FLTO_CFLAG}\", \n\
            \"${STRIP_LDFLAG}\", \n\
        ], \n\
        \"extra-swiftc-flags\": [ \n\
            \"-resource-dir\", \"${PACKAGE_PREFIX}/lib/swift\", \n\
            \"-sdk\", \"${SYSROOT}\", \n\
            \"-target-cpu\", \"${HOST_CPU}\", \n\
            \"-L${PACKAGE_PREFIX}/lib\", \n\
            \"-O${SWIFT_OPTIMIZATION_LEVEL}\", \n\
            \"-Xfrontend\", \"-disable-llvm-verify\", \n\
            \"${FLTO_SWIFTCFLAG}\", \n\
            \"${HOST_VECTOR_SWIFTCFLAG}\", \n\
            \"${POLLY_SWIFTCFLAG}\" \n\
        ] \n\
    } \n\
    " > ${TEMP_FILE}

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${BINDIR}/swift \
        build \
        --build-path ${STAGE_ROOT} \
        --configuration ${SWIFT_BUILD_TYPE} \
        --destination ${TEMP_FILE} \
        ${SWIFT_BUILD_FLAGS}
}

function rpath-fixup() {
    if [ "${HOST_OS}" = "android" ] ||
       [ "${HOST_OS}" = "gnu" ] ||
       [ "${HOST_OS}" = "musl" ] ; then
        if [ "${HOST_OS}" = "gnu" ]; then
            SDK_PLATFORM_DIR=linux
        else
            SDK_PLATFORM_DIR=${HOST_OS}
        fi

        COMPONENT_RPATH=${COMPONENT_RPATH:-"\$ORIGIN/../lib:\$ORIGIN/../lib/swift/${SDK_PLATFORM_DIR}"}

        for COMPONENT in ${RPATH_COMPONENTS}; do
            patchelf --set-rpath ${COMPONENT_RPATH} \
                                 ${COMPONENT}
        done
    elif [ "${HOST_OS}" = "macos" ]; then
        for COMPONENT in ${RPATH_COMPONENTS}; do
            ${INSTALL_NAME_TOOL} -add_rpath "@loader_path/../lib" ${COMPONENT}
            ${INSTALL_NAME_TOOL} -add_rpath "@loader_path/../lib/swift/macosx" ${COMPONENT}
        done
    fi
}

function yarn-build() {
    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${BINDIR}/yarn

    TOOL_LOG=${STAGE_ROOT}/builder-compile \
    tool-log ${BINDIR}/yarn compile
}
