#!/bin/bash

set -e

# source deb packaging scripts
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api

if [ "${SOURCE_PACKAGE_NAME}" != "" ]; then
    # package specific variables
    export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
    export PACKAGE_NAME=${PACKAGE_NAME:-${PACKAGE_BASE_NAME}-${QUALIFIED_PACKAGE_NAME}}
    export INSTALL_ROOT=${INSTALL_ROOT:-${TEMP_ROOT_BASE}/${QUALIFIED_PACKAGE_NAME}}
    export INSTALL_PREFIX=${INSTALL_PREFIX:-${INSTALL_ROOT}${PACKAGE_PREFIX}}
    export STAGE_ROOT=${STAGE_ROOT:-${STAGE_ROOT_BASE}/${QUALIFIED_PACKAGE_NAME}}
    export SOURCE_ROOT=${SOURCE_ROOT:-${SOURCE_ROOT_BASE}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}}

    # pre-build cleanup
    ${RM} -rf ${INSTALL_PREFIX}/* \
              ${STAGE_ROOT}/*
    ${MKDIR} -p ${INSTALL_PREFIX} \
                ${STAGE_ROOT}

    ${ECHO} -e "    Package Configuration"
    ${ECHO} -e "        Name: \e[1;35m${SOURCE_PACKAGE_NAME}\e[0m"
    ${ECHO} -e "        Version: \e[1m${SOURCE_PACKAGE_VERSION}\e[0m"
    ${ECHO} -e "        Platform: \e[1m${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}\e[0m"
    ${ECHO} -e "        Vendor: \e[1m${PACKAGE_BASE_NAME}\e[0m"
    ${ECHO} -e "        Source Root: \e[33m${SOURCE_ROOT}\e[0m"
    ${ECHO} -e "        Stage Root: \e[33m${STAGE_ROOT}\e[0m"
    ${ECHO} -e "        Install Prefix: \e[33m${INSTALL_PREFIX}\e[0m"
fi

# Determine format of executables, shared libraries and static archives.
EXECUTABLE_SUFFIX=
OBJECT_FILE_SUFFIX=".o"
SHARED_LIBRARY_PREFIX="lib"
SHARED_LIBRARY_SUFFIX=".so"
STATIC_LIBRARY_PREFIX="lib"
STATIC_LIBRARY_SUFFIX=".a"

if [ "${HOST_OS}" = "macos" ]; then
    SHARED_LIBRARY_SUFFIX=".dylib"
elif [ "${HOST_OS}" = "mingw32" ]; then
    EXECUTABLE_SUFFIX=".exe"
    OBJECT_FILE_SUFFIX=".obj"
    SHARED_LIBRARY_SUFFIX=".dll.a"
    STATIC_LIBRARY_SUFFIX=".a"
fi

export EXECUTABLE_SUFFIX=${EXECUTABLE_SUFFIX}
export OBJECT_FILE_SUFFIX=${OBJECT_FILE_SUFFIX}
export SHARED_LIBRARY_PREFIX=${SHARED_LIBRARY_PREFIX}
export SHARED_LIBRARY_SUFFIX=${SHARED_LIBRARY_SUFFIX}
export STATIC_LIBRARY_PREFIX=${STATIC_LIBRARY_PREFIX}
export STATIC_LIBRARY_SUFFIX=${STATIC_LIBRARY_SUFFIX}

function copy-source-to-staging() {
    package-rsync -ax \
                  ${SOURCE_ROOT}/ \
                  ${STAGE_ROOT}/
}

# create-host-tool <host_tool> <host_tool_flags> <wrapper_name>
function create-host-tool() {
    host_tool=${1}
    host_tool_flags=${2}
    wrapper_name=${3}

    ${ECHO} "\
#!/bin/bash

set -e

exec ${host_tool} ${!host_tool_flags} \"\${@}\"
" > ${wrapper_name}
    ${CHMOD} +x ${wrapper_name}
}

function create-indirect-pkg-config() {
    host_pkg_config_path=${1}
    wrapper_name=${2}

    ${ECHO} "\
#!/bin/bash

set -e

PKG_CONFIG_PATH=\"${!host_pkg_config_path}\" exec ${PKG_CONFIG} \"\${@}\"
" > ${wrapper_name}
    ${CHMOD} +x ${wrapper_name}
}

function export-compiler-environment() {
    if [ -n "${BUILD_CC}" ]; then
        return
    fi

    BINTOOLS_PREFIX=${BINTOOLS_PREFIX:-llvm-}
    BINTOOLS_PATH_PREFIX=${BINDIR}/${BINTOOLS_PREFIX}
    CXX_INCLUDE_DIR=${CXX_INCLUDE_DIR:-${PACKAGE_PREFIX}/include/c++/v1}
    FORTIFY_SOURCE_LEVEL=${FORTIFY_SOURCE_LEVEL:-2}
    OPTIMIZATION_FLAGS=${OPTIMIZATION_FLAGS:-"-DNDEBUG"}

    export CLANG=${CLANG:-sclang}
    export FLANG=${FLANG:-${BINDIR}/flang}
    export ACLOCAL_PATH=${PACKAGE_PREFIX}/share/aclocal
    export AR=${AR:-${BINTOOLS_PATH_PREFIX}ar}
    export AS=${CC:-${BINDIR}/${CLANG}}
    export BUILD_AS=${BUILD_AS:-${BINDIR}/${CLANG}}
    export BUILD_CC=${BUILD_CC:-${BINDIR}/${CLANG}}
    export BUILD_CXX=${BUILD_CXX:-${BUILD_CC}++}

    if [ "${BUILD_OS}" = "macos" ]; then
        export BUILD_LD=${BUILD_LD:-${BINDIR}/ld64.lld}
    else
        export BUILD_LD=${BUILD_LD:-${BINDIR}/ld.lld}
    fi

    export CC=${CC:-${BINDIR}/${CLANG}}
    export CCLD=${CCLD:-${CC}}
    export CMAKE=${CMAKE:-${BINDIR}/cmake}
    export CPP=${CPP:-${CC}-cpp}
    export CXX=${CXX:-${CC}++}
    export CXXFILT=${CXXFILT:-${BINTOOLS_PATH_PREFIX}cxxfilt}
    export CXXLD=${CXXLD:-${CXX}}
    export DLLTOOL=${DLLTOOL:-${BINTOOLS_PATH_PREFIX}dlltool}
    export F77=${F77:-${FLANG}}
    export FC=${FC:-${FLANG}}
    export FORTRAN=${FORTRAN:-${FLANG}}
    export GO=${GO:-${BINDIR}/go}
    export GOROOT=${GOROOT:-${BUILD_PACKAGE_PREFIX}/go}
    export INSTALL_NAME_TOOL=${INSTALL_NAME_TOOL:-${BINTOOLS_PATH_PREFIX}install-name-tool}

    if [ "${HOST_OS}" = "macos" ]; then
        export LD=${LD:-${BINDIR}/ld64.lld}
    else
        export LD=${LD:-${BINDIR}/ld.lld}
    fi

    export LIPO=${LIPO:-${BINTOOLS_PATH_PREFIX}lipo}
    export MAKE=${MAKE:-${BINDIR}/make}
    export MAKEINFO=${MAKEINFO:-${BINDIR}/true}
    export MANIFEST_TOOL=${MANIFEST_TOOL:-${BINTOOLS_PATH_PREFIX}mt}
    export MESON=${MESON:-${BINDIR}/meson}
    export NINJA=${NINJA:-${BINDIR}/ninja}
    export NM=${NM:-${BINTOOLS_PATH_PREFIX}nm}
    export NODE=${NODE:-${BINDIR}/node}
    export OBJC=${OBJC:-${CC}}
    export OBJCOPY=${OBJCOPY:-${BINTOOLS_PATH_PREFIX}objcopy}
    export OBJCPP=${OBJCPP:-${CPP}}
    export OBJCXX=${OBJCXX:-${CXX}}
    export OBJDUMP=${OBJDUMP:-${BINTOOLS_PATH_PREFIX}objdump}
    export PKG_CONFIG=${PKG_CONFIG:-${BINDIR}/pkg-config}
    export PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-${PACKAGE_PREFIX}/lib/pkgconfig:${PACKAGE_PREFIX}/share/pkgconfig}
    export PYTHON=${PYTHON:-${BINDIR}/python}
    export RANLIB=${RANLIB:-${BINTOOLS_PATH_PREFIX}ranlib}
    export RC=${RC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-rc}
    export READELF=${READELF:-${BINTOOLS_PATH_PREFIX}readelf}
    export SIZE=${SIZE:-${BINTOOLS_PATH_PREFIX}size}
    export STRINGS=${STRINGS:-${BINTOOLS_PATH_PREFIX}strings}
    export STRIP=${STRIP:-${BINTOOLS_PATH_PREFIX}strip}
    export SWIFTC=${SWIFTC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-swiftc}
    export WINDRES=${RC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-rc}

    if [ "${BUILD_PROCESSOR}" = "aarch64" ]; then
        GOHOSTARCH=arm64
    elif [ "${BUILD_PROCESSOR}" = "x86_64" ]; then
        GOHOSTARCH=amd64
    fi

    if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
        GOARCH=arm64
    elif [ "${HOST_PROCESSOR}" = "x86_64" ]; then
        GOARCH=amd64
    fi

    COMMON_CFLAGS="\
        -Qunused-arguments \
        ${COMMON_CFLAGS} \
    "

    if [ -n "${HOST_ARCH}" ]; then
        COMMON_CFLAGS="\
            -march=${HOST_ARCH} \
            ${COMMON_CFLAGS} \
        "
    fi

    if [ -n "${HOST_CPU}" ]; then
        COMMON_CFLAGS="\
            -mtune=${HOST_CPU} \
            ${COMMON_CFLAGS} \
        "
    fi

    if [ "${SYSROOT}" != "/" ]; then
        COMMON_CFLAGS="\
            --sysroot=${SYSROOT} \
            --target=${HOST_TRIPLE} \
            ${COMMON_CFLAGS} \
        "
        COMMON_LDFLAGS="\
            --sysroot=${SYSROOT} \
            ${COMMON_LDFLAGS} \
        "
        LDFLAGS="\
            --sysroot=${SYSROOT} \
            ${LDFLAGS} \
        "
        SWIFTCFLAGS="\
            -sdk ${SYSROOT} \
            ${SWIFTCFLAGS} \
        "
    else
        export ACLOCAL_PATH=${ACLOCAL_PATH}:/usr/share/aclocal
        export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/lib/${BUILD_TRIPLE}/pkgconfig:/usr/share/pkgconfig
    fi

    if [ "${SYSROOT}${PACKAGE_USR_PREFIX}" != "${PACKAGE_PREFIX}" ]; then
        COMMON_CFLAGS="\
            -isystem ${PACKAGE_PREFIX}/include \
            -L${PACKAGE_PREFIX}/lib \
            ${COMMON_CFLAGS} \
        "
        COMMON_LDFLAGS="\
            -L${PACKAGE_PREFIX}/lib \
            ${COMMON_LDFLAGS} \
        "
        LDFLAGS="\
            -L${PACKAGE_PREFIX}/lib \
            ${LDFLAGS} \
        "
        SWIFTCFLAGS="\
            -I${PACKAGE_PREFIX}/include \
            -L${PACKAGE_PREFIX}/lib \
            ${SWIFTCFLAGS} \
        "
    fi

    if [ "${BUILD_OS}" = "android" ]; then
        GOHOSTOS=android
    elif [ "${BUILD_OS}" = "gnu" ] ||
         [ "${BUILD_OS}" = "musl" ]; then
        GOHOSTOS=linux
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        GOHOSTOS=windows
    fi

    if [ "${HOST_OS}" = "android" ]; then
        COMMON_CFLAGS="\
            -fPIC \
            -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            -D__USE_FORTIFY_LEVEL=${FORTIFY_SOURCE_LEVEL} \
            ${COMMON_CFLAGS} \
        "
        GOOS=android
        SWIFTCFLAGS="\
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFTCFLAGS} \
        "
    elif [ "${HOST_OS}" = "gnu" ]; then
        COMMON_CFLAGS="\
            -fPIC \
            -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${COMMON_CFLAGS} \
        "
        GOOS=linux
    elif [ "${HOST_OS}" = "macos" ]; then
        COMMON_CFLAGS="\
            -Wl,-platform_version,${HOST_OS},${HOST_OS_API_LEVEL},${HOST_OS_API_LEVEL} \
            ${COMMON_CFLAGS} \
        "
        LDFLAGS="\
            -platform_version ${HOST_OS} ${HOST_OS_API_LEVEL} ${HOST_OS_API_LEVEL} \
            ${LDFLAGS} \
        "
        GOOS=darwin
    elif [ "${HOST_OS}" = "musl" ]; then
        COMMON_CFLAGS="\
            -fPIC \
            -D_ALL_SOURCE=1 \
            -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${COMMON_CFLAGS} \
        "
        GO_LDSO=/lib/ld-${HOST_OS}-${HOST_PROCESSOR}.so.1
        GOOS=linux
        SWIFTCFLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFTCFLAGS} \
        "
    elif [ "${HOST_OS}" = "mingw32" ]; then
        COMMON_CFLAGS="\
            -fno-builtin-stpcpy \
            -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${COMMON_CFLAGS} \
        "
        GOOS=windows
        SWIFTCFLAGS="\
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFTCFLAGS} \
        "
    fi

    if [ -z "${DISABLE_CXX_INCLUDE}" ]; then
        CXXFLAGS="\
            -stdlib++-isystem ${CXX_INCLUDE_DIR} \
            ${CXXFLAGS} \
        "
    fi

    if [ -z "${DISABLE_POLLY}" ]; then
        COMMON_LLVM_CFLAGS="\
            -mllvm -polly \
            ${COMMON_LLVM_CFLAGS} \
        "
    fi

    if [ -n "${ENABLE_FLTO}" ]; then
        FLTO_OPTION=`${ECHO} ${ENABLE_FLTO} | ${TR} '[:upper:]' '[:lower:]'`
        COMMON_CFLAGS="\
            -flto=${FLTO_OPTION} \
            ${COMMON_CFLAGS} \
        "
        LDFLAGS="\
            ${FLTO_CFLAG} \
            ${LDFLAGS} \
        "
    fi

    if [ -z "${ENABLE_LLVM_VERIFIER}" ]; then
        COMMON_LDFLAGS="\
            -disable-verify \
            ${COMMON_LDFLAGS} \
        "
    fi

    if [ -n "${HOST_ARCH_VECTOR_SIZE}" ]; then
        COMMON_LLVM_CFLAGS="\
            -mllvm -force-vector-width=${HOST_ARCH_VECTOR_SIZE} \
            ${COMMON_LLVM_CFLAGS} \
        "
    fi

    export ASFLAGS=`${ECHO} "\
        -pipe \
        ${COMMON_CFLAGS} \
        ${COMMON_LLVM_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${ASMFLAGS} \
    " | ${XARGS}`
    export CFLAGS=`${ECHO} "\
        -pipe \
        ${COMMON_CFLAGS} \
        ${COMMON_LLVM_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${CFLAGS} \
    " | ${XARGS}`
    export CCLDFLAGS=`${ECHO} "\
        -pipe \
        -rtlib=compiler-rt \
        ${COMMON_CFLAGS} \
        ${COMMON_LLVM_CFLAGS} \
        ${COMMON_LDFLAGS} \
        ${CCLDFLAGS} \
    " | ${XARGS}`
    export CPPFLAGS=`${ECHO} "\
        ${COMMON_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${CPPFLAGS} \
    " | ${XARGS}`
    export CXXFLAGS=`${ECHO} "\
        -pipe \
        ${COMMON_CFLAGS} \
        ${COMMON_LLVM_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${CXXFLAGS} \
    " | ${XARGS}`
    export GO_LDSO=${GO_LDSO}
    export GOARCH=${GOARCH}
    export GOHOSTARCH=${GOHOSTARCH}
    export GOHOSTOS=${GOHOSTOS}
    export GOOS=${GOOS}
    export LDFLAGS=`${ECHO} "\
        ${LDFLAGS} \
    " | ${XARGS}`
    export LIBS=`${ECHO} "\
        ${LIBS} \
    " | ${XARGS}`
    export LIBTOOLFLAGS=`${ECHO} "\
        ${LIBTOOLFLAGS} \
    " | ${XARGS}`
    export SWIFTCFLAGS=`${ECHO} "\
        -resource-dir ${PACKAGE_PREFIX}/lib/swift \
        -Xcc -pipe \
        -Xcc -stdlib++-isystem -Xcc ${CXX_INCLUDE_DIR} \
        ${SWIFTCFLAGS} \
    " | ${XARGS}`
}

function generate-compiler-tools() {
    GENERATED_BINDIR=${GENERATED_BINDIR:-${STAGE_ROOT}}
    LINKER_OPTIMIZATION_LEVEL=${LINKER_OPTIMIZATION_LEVEL:-2}
    OPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL:-z}
    TOOL_PREFIX=${TOOL_PREFIX:-host}

    create-host-tool ${AS} ASFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-as-clang
    create-host-tool ${CC} CFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang
    create-host-tool ${CCLD} CCLDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang
    create-host-tool ${CPP} CPPFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang-cpp
    create-host-tool ${CXX} CXXFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang++
    create-host-tool ${CXXLD} CCLDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang++
    create-host-tool ${LD} LDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld

    export AS=${GENERATED_BINDIR}/${TOOL_PREFIX}-as-clang
    export ASFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CC=${GENERATED_BINDIR}/${TOOL_PREFIX}-clang
    export CFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CCLD=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang
    export CCLDFLAGS="-O${LINKER_OPTIMIZATION_LEVEL}"
    export CPP=${CC}-cpp
    export CPPFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CXX=${CC}++
    export CXXFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CXXLD=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld-clang++
    export CXXLDFLAGS="-O${OPTIMIZATION_LEVEL}"
    export LD=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld
    export LDFLAGS="-O${LINKER_OPTIMIZATION_LEVEL}"

    if [ "${BUILD_TRIPLE}" = "${HOST_TRIPLE}" ]; then
        export CCLDFLAGS=`${ECHO} "\
            -L${PACKAGE_PREFIX}/lib \
            ${CCLDFLAGS} \
        " | ${XARGS}`
        export LDFLAGS=`${ECHO} "\
            -L${PACKAGE_PREFIX}/lib \
            ${LDFLAGS} \
        " | ${XARGS}`
    fi

    if [ -z "${DISABLE_STRIP}" ] &&
       [ "${HOST_OS}" != "macos" ]; then
        export LDFLAGS=`${ECHO} "\
            -s \
            ${LDFLAGS} \
        " | ${XARGS}`
    fi
}

function get-rust-build-deps() {
    RUST_PACKAGE_NAME=$(jq -r --argjson id $index \
                                '.[$id].sourcePackageName' \
                                ${RUST_PACKAGE_LIST})
    RUST_PACKAGE_VERSION=$(jq -r --argjson id $index \
                                '.[$id].sourcePackageVersion' \
                                ${RUST_PACKAGE_LIST})
    RUST_PACKAGE_URL=$(jq -r --argjson id $index \
                                '.[$id].upstreamUrl' \
                                ${RUST_PACKAGE_LIST})
}

function tool-build() {
    ${ECHO}
    ${ECHO} -e "    Tool Invocation"
    ${ECHO} -e "        Tool Name: \e[1m${TOOL}\e[0m"
    ${ECHO} -e "        Parallel Invocations: ${NUM_PROCESSORS}"
    ${ECHO} -e "        Log Files: \e[31m${STAGE_ROOT}/builder-compile.log\e[0m"
    ${ECHO} -e "                   \e[31m${STAGE_ROOT}/builder-compile-stderr.log\e[0m"
    ${ECHO} -e "        Time Started: \e[4m$(date)\e[0m"

    TOOL_LOG=${STAGE_ROOT}/builder-compile \
    tool-log ${TOOL} -j${NUM_PROCESSORS} \
                     "${@}"

    ${ECHO} -e "        Time Completed: \e[4m$(date)\e[0m"
}

function tool-install() {
    DESTDIR=${DESTDIR:-${INSTALL_ROOT}}

    ${ECHO}
    ${ECHO} -e "    Installation Invocation"
    ${ECHO} -e "        Tool Name: \e[1m${TOOL}\e[0m"
    ${ECHO} -e "        Destination Directory: ${DESTDIR}"
    ${ECHO} -e "        Log Files: \e[31m${STAGE_ROOT}/builder-installation.log\e[0m"
    ${ECHO} -e "                   \e[31m${STAGE_ROOT}/builder-installation-stderr.log\e[0m"
    ${ECHO} -e "        Time Started: \e[4m$(date)\e[0m"

    if [ "${TOOL}" = "${MAKE}" ]; then
        DESTDIR_CMD="DESTDIR=${DESTDIR}"
    else
        export DESTDIR=${DESTDIR}
    fi

    TOOL_LOG=${STAGE_ROOT}/builder-installation \
    tool-log ${TOOL} -j${NUM_PROCESSORS} \
                     ${INSTALL_TARGET:-install} \
                     ${DESTDIR_CMD} \
                     "${@}"
    ${ECHO} -e "        Time Completed: \e[4m$(date)\e[0m"
}

function make-build() {
    TOOL=${MAKE} \
    tool-build "${@}"
}

function make-install() {
    TOOL=${MAKE} \
    tool-install "${@}"
}

function ninja-build() {
    TOOL=${NINJA} \
    tool-build "${@}"
}

function ninja-install() {
    TOOL=${NINJA} \
    tool-install "${@}"
}

function package-autoreconf() {
    if [ -z "${DISABLE_AUTORECONF}" ]; then
        TOOL_LOG=${STAGE_ROOT}/builder-compile \
        tool-log ${AUTORECONF} "${@}"
    fi
}

function package-autoupdate() {
    if [ -z "${DISABLE_AUTOUPDATE}" ]; then
        TOOL_LOG=${STAGE_ROOT}/builder-compile \
        tool-log ${AUTOUPDATE} "${@}"
    fi
}

function package-bootstrap() {
    BOOTSTRAP_FILE=${BOOTSTRAP_FILE:-bootstrap}
    TOOL_LOG=${STAGE_ROOT}/builder-bootstrap \
    tool-log ${BASH} ${BOOTSTRAP_FILE} ${BOOTSTRAP_ARGS}
}

function package-bootstrap-configure-install() {
    CONFIGURE_FILE_ROOT=${CONFIGURE_FILE_ROOT:-${STAGE_ROOT}}
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}/build}

    # Configure the build components
    copy-source-to-staging

    mkdir -p ${CONFIGURE_BUILD_ROOT}

    package-push-directory ${CONFIGURE_FILE_ROOT}
        package-autoupdate
        package-gnulib-override
        package-bootstrap
    package-pop-directory

    package-configure-install-staged "${@}"
}


function package-bootstrap-configure-install-archive() {
    package-bootstrap-configure-install "${@}"

    package-invoke-archive-install
}

function package-clean-texinfo-lint() {
    ${RM} -rf ${INSTALL_PREFIX}/lib/charset.alias
    ${RM} -rf ${INSTALL_PREFIX}/share/info/dir
}

function package-cmake-invocation() {
    BUILD_TYPE=${BUILD_TYPE:-Release}
    CMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX:-${PACKAGE_PREFIX}}
    COMPILER_TARGET=${COMPILER_TARGET:-${HOST_TRIPLE}}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        if [ "${HOST_OS}" = "android" ] ||
           [ "${HOST_OS}" = "gnu" ] ||
           [ "${HOST_OS}" = "musl" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Linux}
        elif [ "${HOST_OS}" = "macos" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Darwin}
        elif [ "${HOST_OS}" = "mingw32" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Windows}
        elif [ "${HOST_OS}" = "wasi" ]; then
            SYSTEM_NAME=${SYSTEM_NAME:-Fuchsia}
        fi

        CROSSCOMPILING_CMD="-DCMAKE_CROSSCOMPILING=TRUE"
        SYSTEM_NAME_CMD="-DCMAKE_SYSTEM_NAME=${SYSTEM_NAME}"
    fi

    AS_COMPILER_ID=${AS_COMPILER_ID:-Clang}
    CXX_STANDARD=${CXX_STANDARD:-20}

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${CMAKE} \
        -G Ninja \
        -DCMAKE_AR=${AR} \
        -DCMAKE_ASM_COMPILER=${AS} \
        -DCMAKE_ASM_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_ASM_COMPILER_ID=${AS_COMPILER_ID} \
        -DCMAKE_ASM_FLAGS="${ASMFLAGS}" \
        -DCMAKE_ASM_FLAGS_DEBUG= \
        -DCMAKE_ASM_FLAGS_MINSIZEREL= \
        -DCMAKE_ASM_FLAGS_RELEASE= \
        -DCMAKE_ASM_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DCMAKE_C_COMPILER=${CC} \
        -DCMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_C_CREATE_SHARED_LIBRARY="${CCLD} <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_C_FLAGS="${CFLAGS}" \
        -DCMAKE_C_FLAGS_DEBUG= \
        -DCMAKE_C_FLAGS_MINSIZEREL= \
        -DCMAKE_C_FLAGS_RELEASE= \
        -DCMAKE_C_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_C_LINK_EXECUTABLE="${CCLD} <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_COMPILER=${CXX} \
        -DCMAKE_CXX_COMPILER_TARGET=${HOST_TRIPLE} \
        -DCMAKE_CXX_CREATE_SHARED_LIBRARY="${CXXLD} <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_FLAGS="${CXXFLAGS}" \
        -DCMAKE_CXX_FLAGS_DEBUG= \
        -DCMAKE_CXX_FLAGS_MINSIZEREL= \
        -DCMAKE_CXX_FLAGS_RELEASE= \
        -DCMAKE_CXX_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_CXX_LINK_EXECUTABLE="${CXXLD} <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_STANDARD=${CXX_STANDARD} \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_EXE_LINKER_FLAGS_DEBUG= \
        -DCMAKE_EXE_LINKER_FLAGS_MINSIZEREL= \
        -DCMAKE_EXE_LINKER_FLAGS_RELEASE= \
        -DCMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX} \
        -DCMAKE_LINKER=${LD} \
        -DCMAKE_MAKE_PROGRAM=${NINJA} \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_MODULE_LINKER_FLAGS_DEBUG= \
        -DCMAKE_MODULE_LINKER_FLAGS_MINSIZEREL= \
        -DCMAKE_MODULE_LINKER_FLAGS_RELEASE= \
        -DCMAKE_MODULE_LINKER_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_NM=${NM} \
        -DCMAKE_OBJCOPY=${OBJCOPY} \
        -DCMAKE_OBJDUMP=${OBJDUMP} \
        -DCMAKE_PREFIX_PATH=${PKG_CONFIG_PATH} \
        -DCMAKE_RANLIB=${RANLIB} \
        -DCMAKE_RC_COMPILER=${RC} \
        -DCMAKE_READELF=${READELF} \
        -DCMAKE_Swift_COMPILER=${SWIFTC} \
        -DCMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_Swift_FLAGS="${SWIFTCFLAGS}" \
        -DCMAKE_STRINGS=${STRINGS} \
        -DCMAKE_STRIP=${STRIP} \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SHARED_LINKER_FLAGS_DEBUG= \
        -DCMAKE_SHARED_LINKER_FLAGS_MINSIZEREL= \
        -DCMAKE_SHARED_LINKER_FLAGS_RELEASE= \
        -DCMAKE_SHARED_LINKER_FLAGS_RELWITHDEBINFO= \
        -DCMAKE_SYSROOT=${SYSROOT} \
        -DCMAKE_SYSTEM_PROCESSOR=${HOST_PROCESSOR} \
        "${CROSSCOMPILING_CMD}" \
        "${SYSTEM_NAME_CMD}" \
        "${@}"
}

function package-cmake() {
    export-compiler-environment
    generate-compiler-tools
    package-cmake-invocation ${@}
}

function package-configure() {
    export-compiler-environment
    generate-compiler-tools
    package-configure-invocation \
        ${@}
}

function package-configure-invocation() {
    CONFIGURE_HOST_TRIPLE=${CONFIGURE_HOST_TRIPLE:-${HOST_TRIPLE}}

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log "${@}" \
        --build=${BUILD_TRIPLE} \
        --host=${CONFIGURE_HOST_TRIPLE} \
        --prefix=${PACKAGE_PREFIX} \
        ${CONFIGURE_FLAGS}
}

function package-configure-install() {
    DISABLE_AUTORECONF=TRUE \
    package-stage-configure-install "${@}"
}

function package-configure-install-staged() {
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}}
    CONFIGURE_FILE=${CONFIGURE_FILE:-configure}
    CONFIGURE_FILE_ROOT=${CONFIGURE_FILE_ROOT:-${SOURCE_ROOT}}

    package-push-directory ${CONFIGURE_BUILD_ROOT}
        # Strip problematic configure checks
        ${SED} -i \
               "s/'auto-import'/'ld'/g" \
               ${CONFIGURE_FILE_ROOT}/${CONFIGURE_FILE}

        # Configure package
        package-configure \
            ${CONFIGURE_FILE_ROOT}/${CONFIGURE_FILE} \
            "${@}"

        # Build the package
        make-build
    package-pop-directory

    # Install the package
    package-install
}

function package-configure-install-archive() {
    package-configure-install "${@}"

    package-invoke-archive-install
}

function package-install() {
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}}
    package-push-directory ${CONFIGURE_BUILD_ROOT}
        # Install package
        make-install

        # Remove texinfo related lint
        package-clean-texinfo-lint

        # RPATH fixups
        rpath-fixup
    package-pop-directory
}

function package-invoke-archive-install() {
    # Build the package
    deb-package-build

    # Install the package
    deb-package-install
}

# package-get-path <name> <EXECUTABLE|SHARED|STATIC>
function package-get-filename() {
    NAME=${1}
    TYPE=${2}

    case ${TYPE} in
    EXECUTABLE)
        RESULT=${NAME}${EXECUTABLE_SUFFIX}
        ;;
    SHARED)
        RESULT=${SHARED_LIBRARY_PREFIX}${NAME}${SHARED_LIBRARY_SUFFIX}
        ;;
    STATIC)
        RESULT=${STATIC_LIBRARY_PREFIX}${NAME}${STATIC_LIBRARY_SUFFIX}
        ;;
    *)
        echo "package-get-filename: Unknown type ${TYPE}."
        exit 1
    esac

    echo ${RESULT}
}

# package-get-path <name> <EXECUTABLE|SHARED|STATIC> <BUILD|HOST>
function package-get-path() {
    NAME=${1}
    TYPE=${2}
    VARIANT=${3}
    RESULT=${PACKAGE_PREFIX}/lib

    if [ "${VARIANT}" = "BUILD" ]; then
        RESULT=${BUILD_PACKAGE_PREFIX}/lib
    fi

    RESULT=${RESULT}/`package-get-filename ${NAME} ${TYPE}`
    echo ${RESULT}
}

function package-gnulib-override() {
    GNULIB_DIR=${GNULIB_DIR:-glib}
    GNULIB_ROOT=${GNULIB_ROOT:-${STAGE_ROOT}}

    if [ -n "${ENABLE_GNULIB_OVERRIDE}" ]; then
        ${RM} -rf glib
        ${LN} -sf \
               ${SOURCE_ROOT_BASE}/gnulib-0 \
               ${GNULIB_ROOT}/${GNULIB_DIR}
    fi
}

function package-libtoolize() {
    if [ -n "${ENABLE_LIBTOOLIZE}" ]; then
        TOOL_LOG=${STAGE_ROOT}/builder-libtoolize \
        tool-log ${BINDIR}/libtoolize "${@}"
    fi
}

function package-meson-build() {
    export-compiler-environment
    generate-compiler-tools

    BACKEND=${BACKEND:-ninja}
    BUILD_TYPE=${BUILD_TYPE:-custom}
    CONFIG_FILE=${STAGE_ROOT}/build-config.txt
    DEBUG=${DEBUG:-false}
    ENDIAN=${ENDIAN:-little}
    BUILD_SYSTEM=${BUILD_OS}

    if [ "${BUILD_OS}" = "gnu" ] ||
       [ "${BUILD_OS}" = "musl" ]; then
        HOST_SYSTEM="linux"
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        BUILD_SYSTEM="windows"
    fi

    HOST_SYSTEM=${HOST_OS}

    if [ "${HOST_OS}" = "gnu" ] ||
       [ "${HOST_OS}" = "musl" ]; then
        HOST_SYSTEM="linux"
    elif [ "${HOST_OS}" = "mingw32" ]; then
        HOST_SYSTEM="windows"
    fi

    MESON_BUILD_CONFIG=native
    HOST_CMAKE_PREFIXES="${PACKAGE_PREFIX}/lib/cmake:${PKG_CONFIG_PATH}"
    HOST_C_ARGS=`${ECHO} [\'${CFLAGS}\'] | ${SED} "s/ /','/g"`
    HOST_C_LINK_ARGS=`${ECHO} [\'${LDFLAGS}\'] | ${SED} "s/ /','/g"`
    HOST_CMAKE_PREFIX_PATH=`${ECHO} [\'${HOST_CMAKE_PREFIXES}\'] | ${SED} "s/:/','/g"`
    HOST_CPP_ARGS=`${ECHO} [\'${CXXFLAGS}\'] | ${SED} "s/ /','/g"`
    HOST_CPP_LINK_ARGS=`${ECHO} [\'${LDFLAGS}\'] | ${SED} "s/ /','/g"`

    export CMAKE_PREFIX_PATH=`${ECHO} ${HOST_CMAKE_PREFIXES} | ${TR} ':' ';'`

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        MESON_BUILD_CONFIG=cross

        BUILD_CFLAGS="-I${BUILD_PACKAGE_PREFIX}/include"
        BUILD_CMAKE_PREFIXES="${BUILD_PACKAGE_PREFIX}/lib/cmake:${BUILD_PACKAGE_PREFIX}/lib/pkgconfig:${BUILD_PACKAGE_PREFIX}/share/pkgconfig"
        BUILD_CXXFLAGS="-I${BUILD_PACKAGE_PREFIX}/include"
        BUILD_LDFLAGS="-L${BUILD_PACKAGE_PREFIX}/lib"
        BUILD_PKG_CONFIG_PATH="${BUILD_PACKAGE_PREFIX}/lib/pkgconfig:${BUILD_PACKAGE_PREFIX}/share/pkgconfig"

        BUILD_C_ARGS=`${ECHO} [\'${BUILD_CFLAGS}\'] | ${SED} "s/ /','/g"`
        BUILD_C_LINK_ARGS=`${ECHO} [\'${BUILD_LDFLAGS}\'] | ${SED} "s/ /','/g"`
        BUILD_CMAKE_PREFIX_PATH=`${ECHO} [\'${BUILD_CMAKE_PREFIXES}\'] | ${SED} "s/:/','/g"`
        BUILD_CPP_ARGS=`${ECHO} [\'${BUILD_CXXFLAGS}\'] | ${SED} "s/ /','/g"`
        BUILD_CPP_LINK_ARGS=`${ECHO} [\'${BUILD_LDFLAGS}\'] | ${SED} "s/ /','/g"`

        export CC_FOR_BUILD=${BINDIR}/${CLANG}
        export CXX_FOR_BUILD=${BINDIR}/${CLANG}++
        export CMAKE_FOR_BUILD=${CMAKE}
        export CMAKE_PREFIX_PATH_FOR_BUILD=`${ECHO} ${BUILD_CMAKE_PREFIXES} | ${TR} ":" ";"`

        create-indirect-pkg-config BUILD_PKG_CONFIG_PATH ${STAGE_ROOT}/build-pkgconfig

        export PKG_CONFIG_FOR_BUILD=${STAGE_ROOT}/build-pkgconfig
    fi

    ${ECHO} "\
[binaries]
${MESON_EXTRA_BINARIES}
" > ${CONFIG_FILE}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        ${ECHO} "\
[properties]
needs_exe_wrapper = true

[build_machine]
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC_FOR_BUILD}'
c_args = ${BUILD_C_ARGS}
c_ld = '${BINDIR}/ld.lld'
c_link_args = ${BUILD_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${BUILD_CMAKE_PREFIX_PATH}
cpp = '${CXX_FOR_BUILD}'
cpp_args = ${BUILD_CPP_ARGS}
cpp_ld = '${BINDIR}/ld.lld'
cpp_link_args = ${BUILD_CPP_LINK_ARGS}
cpu = '${BUILD_ARCH}'
cpu_family = '${BUILD_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${STAGE_ROOT}/build-pkg-config'
pkgconfigpath = ''
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${BUILD_SYSTEM}'
windres = '${WINDRES}'

[host_machine]
        " >> ${CONFIG_FILE}
    fi

    ${ECHO} "\
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC}'
c_args = ${HOST_C_ARGS}
c_ld = '${LD}'
c_link_args = ${HOST_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${HOST_CMAKE_PREFIX_PATH}
cpp = '${CXX}'
cpp_args = ${HOST_CPP_ARGS}
cpp_ld = '${LD}'
cpp_link_args = ${HOST_CPP_LINK_ARGS}
cpu = '${HOST_ARCH}'
cpu_family = '${HOST_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${PKG_CONFIG}'
pkg_config_path = '${PKG_CONFIG_PATH}'
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${HOST_SYSTEM}'
windres = '${WINDRES}'
    " >> ${CONFIG_FILE}


    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        ${ECHO} "\
[target_machine]
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC}'
c_args = ${HOST_C_ARGS}
c_ld = '${LD}'
c_link_args = ${HOST_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${HOST_CMAKE_PREFIX_PATH}
cpp = '${CXX}'
cpp_args = ${HOST_CPP_ARGS}
cpp_ld = '${LD}'
cpp_link_args = ${HOST_CPP_LINK_ARGS}
cpu = '${HOST_ARCH}'
cpu_family = '${HOST_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${PKG_CONFIG}'
pkg_config_path = '${PKG_CONFIG_PATH}'
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${HOST_SYSTEM}'
windres = '${WINDRES}'
" >> ${CONFIG_FILE}
    fi

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${MESON} \
         ${SOURCE_ROOT} \
         ${STAGE_ROOT} \
         -Dlibdir=${PACKAGE_PREFIX}/lib \
         -Dprefix=${PACKAGE_PREFIX} \
         --${MESON_BUILD_CONFIG}-file ${CONFIG_FILE} \
         "${@}"
}

function package-python-build() {
    SETUP_PY=${SETUP_PY:-${SOURCE_ROOT}/setup.py}
    INSTALLED_FILE_LIST=${INSTALLED_FILE_LIST:-${STAGE_ROOT}/installed-file-list.txt}

    export-compiler-environment
    generate-compiler-tools

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${PYTHON} ${SETUP_PY} build -b ${STAGE_ROOT} \
                                         -j ${NUM_PROCESSORS}

    TOOL_LOG=${STAGE_ROOT}/builder-installation \
    tool-log ${PYTHON} ${SETUP_PY} install --prefix ${INSTALL_PREFIX} \
                                           --record ${INSTALLED_FILE_LIST} \
                                           --single-version-externally-managed
}

function package-stage-configure-install() {
    CONFIGURE_FILE_ROOT=${CONFIGURE_FILE_ROOT:-${STAGE_ROOT}}
    CONFIGURE_BUILD_ROOT=${CONFIGURE_BUILD_ROOT:-${STAGE_ROOT}/build}

    # Configure the build components
    copy-source-to-staging

    mkdir -p ${CONFIGURE_BUILD_ROOT}

    package-push-directory ${CONFIGURE_FILE_ROOT}
        package-autoupdate
        package-gnulib-override
        package-libtoolize -ci
        package-autoreconf -fi
    package-pop-directory

    package-configure-install-staged "${@}"
}

function package-stage-configure-install-archive() {
    package-stage-configure-install "${@}"

    package-invoke-archive-install
}

function package-swift-build() {
    export-compiler-environment

    SWIFT_BUILD_TYPE=${SWIFT_BUILD_TYPE:-release}
    TEMP_FILE=`mktemp`

    if [ -n "${HOST_ARCH_VECTOR_SIZE}" ]; then
        HOST_VECTOR_CFLAG="-mllvm\", \"-force-vector-width=${HOST_ARCH_VECTOR_SIZE}"
        HOST_VECTOR_SWIFTCFLAG="-Xllvm\", \"-force-vector-width=${HOST_ARCH_VECTOR_SIZE}"
    fi

    if [ -z "${DISABLE_POLLY}" ]; then
        POLLY_CFLAG="-mllvm\", \"-polly"
        POLLY_SWIFTCFLAG="-Xllvm\", \"-polly"
    fi

    if [ -z "${DISABLE_STRIP}" ] &&
       [ "${HOST_OS}" != "macos" ]; then
        STRIP_LDFLAG="-s"
    fi

    if [ -z "${DISABLE_VERBOSE}" ]; then
        SWIFT_BUILD_FLAGS="\
            -v \
            ${SWIFT_BUILD_FLAGS} \
        "
    fi

    if [ -n "${ENABLE_FLTO}" ]; then
        FLTO_OPTION=`${ECHO} ${ENABLE_FLTO} | ${TR} '[:upper:]' '[:lower:]'`
        FLTO_CFLAG="-flto=${FLTO_OPTION}"
        FLTO_SWIFTCFLAG="-whole-module-optimization"
    fi

    if [ "${HOST_OS}" = "android" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            -Xcc -D__USE_FORTIFY_LEVEL=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFT_BUILD_FLAGS} \
        "
    elif [ "${HOST_OS}" = "musl" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFT_BUILD_FLAGS} \
        "
    elif [ "${HOST_OS}" = "mingw32" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_FORTIFY_SOURCE=${FORTIFY_SOURCE_LEVEL} \
            ${SWIFT_BUILD_FLAGS} \
        "
    fi

    if [ "${HOST_OS}" != "mingw32" ]; then
        FPIC_CFLAG="-fPIC"
        TARGET=${TARGET:-${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
    else
        TARGET=${TARGET:-${HOST_PROCESSOR}-unknown-windows-gnu}
    fi

    SWIFT_BUILD_FLAGS=`${ECHO} "\
        ${SWIFT_BUILD_FLAGS} \
    " | ${XARGS}`

    ${ECHO} -e "{ \n\
        \"version\": 1, \n\
        \"sdk\": \"${SYSROOT}\", \n\
        \"toolchain-bin-dir\": \"${BINDIR}\", \n\
        \"target\": \"${TARGET}\", \n\
        \"extra-cc-flags\": [ \n\
            \"-march=${HOST_ARCH}\", \n\
            \"-mtune=${HOST_CPU}\", \n\
            \"-pipe\", \n\
            \"-resource-dir=${PACKAGE_PREFIX}/lib/clang/13.0.0\", \n\
            \"-stdlib++-isystem\", \"${PACKAGE_PREFIX}/include/c++/v1\", \n\
            \"-target\", \"${TARGET}\", \n\
            \"-I${PACKAGE_PREFIX}/lib/swift\", \n\
            \"-I${PACKAGE_PREFIX}/lib/swift/Block\", \n\
            \"-O${OPTIMIZATION_LEVEL}\", \n\
            \"--sysroot=${SYSROOT}\", \n\
            \"${FLTO_CFLAG}\", \n\
            \"${FPIC_CFLAG}\", \n\
            \"${HOST_VECTOR_CFLAG}\", \n\
            \"${POLLY_CFLAG}\" \n\
        ], \n\
        \"extra-cpp-flags\": [ \n\
        ], \n\
        \"extra-linker-flags\": [ \n\
            \"-disable-verify\", \n\
            \"-O${LINKER_OPTIMIZATION_LEVEL}\", \n\
            \"${FLTO_CFLAG}\", \n\
            \"${STRIP_LDFLAG}\", \n\
        ], \n\
        \"extra-swiftc-flags\": [ \n\
            \"-resource-dir\", \"${PACKAGE_PREFIX}/lib/swift\", \n\
            \"-sdk\", \"${SYSROOT}\", \n\
            \"-target-cpu\", \"${HOST_CPU}\", \n\
            \"-L${PACKAGE_PREFIX}/lib\", \n\
            \"-O${SWIFT_OPTIMIZATION_LEVEL}\", \n\
            \"-Xfrontend\", \"-disable-llvm-verify\", \n\
            \"${FLTO_SWIFTCFLAG}\", \n\
            \"${HOST_VECTOR_SWIFTCFLAG}\", \n\
            \"${POLLY_SWIFTCFLAG}\" \n\
        ] \n\
    } \n\
    " > ${TEMP_FILE}

    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${BINDIR}/swift \
        build \
        --build-path ${STAGE_ROOT} \
        --configuration ${SWIFT_BUILD_TYPE} \
        --destination ${TEMP_FILE} \
        ${SWIFT_BUILD_FLAGS}
}

function rpath-fixup() {
    if [ "${HOST_OS}" = "android" ] ||
       [ "${HOST_OS}" = "gnu" ] ||
       [ "${HOST_OS}" = "musl" ] ; then
        if [ "${HOST_OS}" = "gnu" ]; then
            SDK_PLATFORM_DIR=linux
        else
            SDK_PLATFORM_DIR=${HOST_OS}
        fi

        COMPONENT_RPATH=${COMPONENT_RPATH:-"\$ORIGIN/../lib:\$ORIGIN/../lib/swift/${SDK_PLATFORM_DIR}"}

        for COMPONENT in ${RPATH_COMPONENTS}; do
            patchelf --set-rpath ${COMPONENT_RPATH} \
                                 ${COMPONENT}
        done
    elif [ "${HOST_OS}" = "macos" ]; then
        for COMPONENT in ${RPATH_COMPONENTS}; do
            ${INSTALL_NAME_TOOL} -add_rpath "@loader_path/../lib" ${COMPONENT}
            ${INSTALL_NAME_TOOL} -add_rpath "@loader_path/../lib/swift/macosx" ${COMPONENT}
        done
    fi
}

function yarn-build() {
    TOOL_LOG=${STAGE_ROOT}/builder-invocation \
    tool-log ${BINDIR}/yarn

    TOOL_LOG=${STAGE_ROOT}/builder-compile \
    tool-log ${BINDIR}/yarn compile
}
