#!bin/bash

set -e

function package-get-common-variables() {
    source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
}

function package-get-packaging-api() {
    source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api
}

function package-invoke-category-builder() {
    package-get-common-variables
    ${ECHO} -e "Builder Category Invocation Started"
    ${BASH} ${VAL_VERDE_GH_TEAM}-platform-sdk-${@}
    ${ECHO} -e "Builder Category Invocation Complete"
    ${ECHO}
}

function package-install-build-archive() {
    package-get-packaging-api
    ${ECHO} -e "    Skipping re-build: \e[1;35m${PACKAGE_NAME}\e[0m"
    DISABLE_BUILD_ARCHIVE=TRUE \
    package-archive-build-install
}

function package-invoke-archive-action() {
    package-get-common-variables
    package-get-packaging-api
    PACKAGE_ACTION="${1}"
    PACKAGE_INPUT=(${@:2})
    PACKAGE_COUNT=$((${#PACKAGE_INPUT[@]} / 2))
    for i in `seq 0 $(($PACKAGE_COUNT - 1))`; do
        PACKAGE_NAME_INDEX=$((i * 2))
        SYSTEM_TYPE_INDEX=$((i * 2 + 1))
        PKG_NAME=${PACKAGE_INPUT[$PACKAGE_NAME_INDEX]}
        SYSTEM_TYPE=${PACKAGE_INPUT[$SYSTEM_TYPE_INDEX]}
        SYSTEM_OS=${SYSTEM_TYPE}_OS
        SYSTEM_OS_API=${SYSTEM_TYPE}_OS_API_LEVEL
        SYSTEM_CPU=${SYSTEM_TYPE}_CPU
        PKG_SUFFIX=${!SYSTEM_OS}${!SYSTEM_OS_API}-${!SYSTEM_CPU}

        if [[ "${PKG_NAME}"  == *"stage"* ]]; then
            PKG_NAME=${PKG_NAME%-*}
            PKG_SUFFIX=${PKG_SUFFIX}-stage
        fi

        PKG_PREFIX=${PACKAGE_BASE_NAME}-${PKG_NAME}
        PACKAGE_FILE_NAME=${PKG_PREFIX}-${PKG_SUFFIX}

        if [ "${PACKAGE_ACTION}" = "uninstall" ]; then
            ARCHIVE_CHECK=$(package-archive-check-existence "${PACKAGE_FILE_NAME}") \
            package-archive-uninstall ${PACKAGE_FILE_NAME}
        elif [ "${PACKAGE_ACTION}" = "install" ]; then
            DISABLE_BUILD_ARCHIVE=TRUE \
            PACKAGE_NAME=${PACKAGE_FILE_NAME} \
            package-archive-build-install
        fi
    done

    unset QUALIFIED_ARCHIVE \
          QUALIFIED_FILE_NAME
}

function package-invoke-builder() {
    parse-builder-args "${@}"
    export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU}
    export PACKAGE_NAME=${PACKAGE_NAME:-${PACKAGE_BASE_NAME}-${QUALIFIED_PACKAGE_NAME}}

    package-get-common-variables
    package-get-packaging-api

    SEARCH_PATH=${ARCHIVE_PATH} \
    SEARCH_INPUT=${PACKAGE_NAME} \
    SEARCH_EXTENSION=${PACKAGE_ARCHIVE_CLASS} \
    tool-check

    if [ ${FILE_EXISTS} == 'true' ]; then
        SEARCH_RESULTS_ARRAY=( ${SEARCH_RESULTS} )
        for file in "${SEARCH_RESULTS_ARRAY[@]}"; do
            PACKAGE_NAME=`${BASENAME} ${file%.*}`
            package-install-build-archive
        done
    else
        ${ECHO} -e "Builder Invocation Started"
        ${BASH} ${VAL_VERDE_GH_TEAM}-platform-sdk-${@}
        ${ECHO} -e "Builder Invocation Complete"
        ${ECHO}
    fi

    unset DISABLE_BUILD_ARCHIVE \
          DISABLE_INSTALL_ARCHIVE \
          NON_PERSISTENT_ARCHIVE \
          SOURCE_PACKAGE_NAME \
          SOURCE_PACKAGE_VERSION \
          PACKAGE_NAME \
          QUALIFIED_PACKAGE_NAME
}

function parse-builder-args() {
    if [ ${1##*-} == 'cross' ] \
       || [[ ${1##*-} == *"bootstrap"* ]] \
       || [[ ${1##*-} == *"darwin"* ]] \
       || [[ ${1##*-} == *"musl"* ]] \
       || [[ ${1##*-} == *"android"* ]] \
       || [[ ${1##*-} == *"windows"* ]]; then
        export SOURCE_PACKAGE_NAME=${1%-*}
    else
        export SOURCE_PACKAGE_NAME=$1
    fi

    if [ ${SOURCE_PACKAGE_NAME} == "xcb-proto" ]; then
        SOURCE_PACKAGE_NAME=xcbproto
    elif [ ${SOURCE_PACKAGE_NAME} == "yarn-yautja-server" ]; then
        SOURCE_PACKAGE_NAME=yautja-server
    fi

    export SOURCE_PACKAGE_VERSION=$2
    
    if [ "${3}" ]; then
        if [ $3 == "none" ]; then
            export DISABLE_BUILD_ARCHIVE=TRUE
            export DISABLE_INSTALL_ARCHIVE=TRUE
        elif [ $3 == "no-install" ]; then
            export DISABLE_INSTALL_ARCHIVE=TRUE
        elif [ $3 == "bootstrap-only" ]; then
            export NON_PERSISTENT_ARCHIVE=TRUE
        fi
    fi
}
