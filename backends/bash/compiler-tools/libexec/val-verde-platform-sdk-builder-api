#!?bin/bash

set -e

function get-common-variables() {
    source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
}

function category-invoke-builder() {
    get-common-variables
    ${ECHO} -e "Builder Category Invocation Started"
    ${BASH} ${VAL_VERDE_GH_TEAM}-platform-sdk-${@}
    ${ECHO} -e "Builder Category Invocation Complete"
    ${ECHO}
}

function package-install-build-archive() {
    source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api
    ${ECHO} -e "    Skipping re-build: \e[1;35m${PACKAGE_NAME}\e[0m"
    if [[ "${PACKAGE_NAME}" == *"stage"* ]]; then
        DISABLE_INSTALL_DEB= \
        deb-package-install
    else
        deb-package-install
    fi
}

function package-invoke-builder() {
    parse-builder-args "${@}"
    export QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
    export PACKAGE_NAME=${PACKAGE_NAME:-${PACKAGE_BASE_NAME}-${QUALIFIED_PACKAGE_NAME}}

    get-common-variables

    SEARCH_PATH=${DEB_PATH} \
    SEARCH_INPUT=${PACKAGE_NAME} \
    SEARCH_EXTENSION=deb \
    tool-check

    if [ ${FILE_EXISTS} == 'true' ]; then
        SEARCH_RESULTS_ARRAY=( ${SEARCH_RESULTS} )
        for file in "${SEARCH_RESULTS_ARRAY[@]}"; do
            PACKAGE_NAME=$(echo $file | cut -d '/' -f5 | cut -d '.' -f1) \
            package-install-build-archive
        done
    else
        ${ECHO} -e "Builder Invocation Started"
        ${BASH} ${VAL_VERDE_GH_TEAM}-platform-sdk-${@}
        ${ECHO} -e "Builder Invocation Complete"
        ${ECHO}
    fi

    unset DISABLE_BUILD_DEB \
          DISABLE_INSTALL_DEB \
          PACKAGE_NAME \
          QUALIFIED_PACKAGE_NAME \
          SOURCE_PACKAGE_NAME \
          SOURCE_PACKAGE_VERSION
}

function parse-builder-args() {
    if [ ${1##*-} == 'cross' ] \
       || [[ ${1##*-} == *"bootstrap"* ]] \
       || [[ ${1##*-} == *"musl"* ]] \
       || [[ ${1##*-} == *"android"* ]] \
       || [[ ${1##*-} == *"windows"* ]]; then
        export SOURCE_PACKAGE_NAME=${1%-*}
    else
        export SOURCE_PACKAGE_NAME=$1
    fi

    if [ ${SOURCE_PACKAGE_NAME} == "kernel-headers" ]; then
        SOURCE_PACKAGE_NAME=linux
    elif [ ${SOURCE_PACKAGE_NAME} == "xcb-proto" ]; then
        SOURCE_PACKAGE_NAME=xcbproto
    elif [ ${SOURCE_PACKAGE_NAME} == "yarn-yautja-server" ]; then
        SOURCE_PACKAGE_NAME=yautja-server
    fi

    export SOURCE_PACKAGE_VERSION=$2
    
    if [ "${3}" ]; then
        if [ $3 == "none" ]; then
            export DISABLE_BUILD_DEB=TRUE
            export DISABLE_INSTALL_DEB=TRUE
        elif [ $3 == "no-install" ]; then
            export DISABLE_INSTALL_DEB=TRUE
        fi
    fi
}
