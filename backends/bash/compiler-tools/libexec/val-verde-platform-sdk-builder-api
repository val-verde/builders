#!bin/bash

set -e

function package-get-common-variables() {
    source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
}

function package-get-packaging-api() {
    source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api
}

function package-invoke-category-builder() {
    package-get-common-variables
    ${ECHO} -e "Builder Category Invocation Started"
    ${BASH} ${VAL_VERDE_GH_TEAM}-platform-sdk-${@}
    ${ECHO} -e "Builder Category Invocation Complete"
    ${ECHO}
}

function package-install-build-archive() {
    package-get-packaging-api
    ${ECHO} -e "    Skipping re-build: \e[1;35m${1}\e[0m"
    DISABLE_BUILD_ARCHIVE=TRUE \
    package-archive-build-install "${1}"
}

function package-invoke-archive-action() {
    package-get-common-variables
    package-get-packaging-api

    PACKAGE_ACTION="${1}"
    PACKAGE_INPUT=(${@:2})
    PACKAGE_COUNT=$((${#PACKAGE_INPUT[@]} / 2))

    for i in `seq 0 $(($PACKAGE_COUNT - 1))`; do
        PACKAGE_NAME_INDEX=$((i * 2))
        SYSTEM_TYPE_INDEX=$((i * 2 + 1))
        PKG_NAME=${PACKAGE_INPUT[$PACKAGE_NAME_INDEX]}
        SYSTEM_TYPE=${PACKAGE_INPUT[$SYSTEM_TYPE_INDEX]}
        SYSTEM_OS=${SYSTEM_TYPE}_OS
        SYSTEM_OS_API=${SYSTEM_TYPE}_OS_API_LEVEL
        SYSTEM_CPU=${SYSTEM_TYPE}_CPU
        PKG_SUFFIX=${!SYSTEM_OS}${!SYSTEM_OS_API}-${!SYSTEM_CPU}

        if [[ "${PKG_NAME}"  == *"stage"* ]]; then
            PKG_NAME=${PKG_NAME%-*}
            PKG_SUFFIX=${PKG_SUFFIX}-stage
        fi

        PKG_PREFIX=${PACKAGE_BASE_NAME}-${PKG_NAME}
        PACKAGE_FILE_NAME=${PKG_PREFIX}-${PKG_SUFFIX}

        if [ "${PACKAGE_ACTION}" = "uninstall" ]; then
            package-archive-uninstall "${PACKAGE_FILE_NAME}"
        elif [ "${PACKAGE_ACTION}" = "install" ]; then
            DISABLE_BUILD_ARCHIVE=TRUE \
            package-archive-build-install "${PACKAGE_FILE_NAME}"
        fi
    done
}

function package-invoke-builder() {
    parse-builder-args "${@}"

    package-get-common-variables
    package-get-qualified-package-name "${SOURCE_PACKAGE_NAME}" "${SOURCE_PACKAGE_VERSION}"

    package-get-packaging-api

    SEARCH_PATH=${ARCHIVE_PATH} \
    SEARCH_INPUT=${PACKAGE_NAME} \
    SEARCH_EXTENSION=${PACKAGE_ARCHIVE_CLASS} \
    tool-check

    if [ ${FILE_EXISTS} == 'true' ]; then
        SEARCH_RESULTS_ARRAY=( ${SEARCH_RESULTS} )
        for file in "${SEARCH_RESULTS_ARRAY[@]}"; do
            PACKAGE_NAME_INPUT=`${BASENAME} ${file%.*}`
            DISABLE_BUILD_ARCHIVE=${DISABLE_BUILD_ARCHIVE} \
            DISABLE_INSTALL_ARCHIVE=${DISABLE_INSTALL_ARCHIVE} \
	        package-install-build-archive "${PACKAGE_NAME_INPUT}"
        done
    else
        ${ECHO} -e "Builder Invocation Started"
        DISABLE_BUILD_ARCHIVE=${DISABLE_BUILD_ARCHIVE} \
        DISABLE_INSTALL_ARCHIVE=${DISABLE_INSTALL_ARCHIVE} \
        NON_PERSISTENT_ARCHIVE=${NON_PERSISTENT_ARCHIVE} \
        SOURCE_PACKAGE_NAME=${SOURCE_PACKAGE_NAME} \
        SOURCE_PACKAGE_VERSION=${SOURCE_PACKAGE_VERSION} \
	    ${BASH} ${VAL_VERDE_GH_TEAM}-platform-sdk-${@}
        ${ECHO} -e "Builder Invocation Complete"
        ${ECHO}
    fi

    unset \
        DISABLE_BUILD_ARCHIVE \
        DISABLE_INSTALL_ARCHIVE \
        NON_PERSISTENT_ARCHIVE
}

function parse-builder-args() {
    BUILDER_INPUT_SCRIPT=${1}
    SOURCE_PACKAGE_VERSION=${2}
    BUILDER_ACTION_OPTION=${3}

    if [[ ${BUILDER_INPUT_SCRIPT} == *"cross" ]] ||
       [[ ${BUILDER_INPUT_SCRIPT} == *"bootstrap" ]] ||
       [[ ${BUILDER_INPUT_SCRIPT} == *"darwin" ]] ||
       [[ ${BUILDER_INPUT_SCRIPT} == *"musl" ]] ||
       [[ ${BUILDER_INPUT_SCRIPT} == *"android" ]] ||
       [[ ${BUILDER_INPUT_SCRIPT} == *"windows" ]]; then
        SOURCE_PACKAGE_NAME=${BUILDER_INPUT_SCRIPT%-*}
    else
        SOURCE_PACKAGE_NAME=${BUILDER_INPUT_SCRIPT}
    fi

    if [ ${SOURCE_PACKAGE_NAME} == "xcb-proto" ]; then
        SOURCE_PACKAGE_NAME=xcbproto
    elif [ ${SOURCE_PACKAGE_NAME} == "yarn-yautja-server" ]; then
        SOURCE_PACKAGE_NAME=yautja-server
    fi
    
    if [ -n "${BUILDER_ACTION_OPTION}" ]; then
        if [ "${BUILDER_ACTION_OPTION}" == "none" ]; then
            DISABLE_BUILD_ARCHIVE=TRUE
            DISABLE_INSTALL_ARCHIVE=TRUE
        elif [ "${BUILDER_ACTION_OPTION}" == "no-install" ]; then
            DISABLE_INSTALL_ARCHIVE=TRUE
        elif [ "${BUILDER_ACTION_OPTION}" == "bootstrap-only" ]; then
            NON_PERSISTENT_ARCHIVE=TRUE
        fi
    fi
}
