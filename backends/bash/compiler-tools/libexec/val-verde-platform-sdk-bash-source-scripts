#!/bin/bash

set -e

# builder configuration defaults
BASE_DIRECTORY=$(echo "${PACKAGE_ROOT}" | cut -d "/" -f2)
DEPENDS=${DEPENDS:=''}
NUM_PROCESSORS=${NUM_PROCESSORS:-"$(($(getconf _NPROCESSORS_ONLN) + 1))"}
TARGETS=${TARGETS:-install}
VERSION=${VERSION:='1.0.0'}

# global path variables
export BUILD_PACKAGE_PREFIX=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}/sysroot/usr
export BUILD_TRIPLE=${BUILD_PROCESSOR}-${BUILD_KERNEL}-${BUILD_OS}
export HOST_TRIPLE=${HOST_PROCESSOR}-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}
export PACKAGE_PREFIX=${PACKAGE_PREFIX:-${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/sysroot/usr}
export SYSROOT=${SYSROOT:-${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/sysroot}

export DPKG_ADMINDIR=/var/lib/dpkg
export LD_LIBRARY_PATH=${BUILD_PACKAGE_PREFIX}/lib
export NODE_PATH=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/web
export PACKAGE_ARCH=all
export PACKAGE_CLASS=deb
export PATH=${BUILD_PACKAGE_PREFIX}/bin:${PATH}
export TEMPDIR=${TEMPDIR:-/tmp}

# package specific variables
PACKAGE_NAME=${PACKAGE_NAME:-${PACKAGE_BASE_NAME}-${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}}
QUALIFIED_PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
INSTALL_ROOT=${INSTALL_ROOT:-${TEMPDIR}/org.${VAL_VERDE_GH_TEAM}/${QUALIFIED_PACKAGE_NAME}}
INSTALL_PREFIX=${INSTALL_PREFIX:-${INSTALL_ROOT}${PACKAGE_PREFIX}}
STAGE_ROOT=${STAGE_ROOT:-${STAGE_ROOT_BASE}/${SOURCE_PACKAGE_NAME}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}}
PACKAGE_SOURCES_ROOT=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/sources \
SOURCE_ROOT=${SOURCE_ROOT:-${PACKAGE_SOURCES_ROOT}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}}

# pre-build cleanup
rm -rf ${INSTALL_PREFIX}/* \
       ${STAGE_ROOT}/*
mkdir -p ${INSTALL_PREFIX} \
         ${STAGE_ROOT}

# source deb packaging scripts
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-deb-packaging-scripts

function copy-source-to-staging() {
    rsync -aPx ${SOURCE_ROOT}/ \
               ${STAGE_ROOT}
}

# create-host-tool <host_tool> <host_tool_flags> <wrapper_name>
function create-host-tool() {
    host_tool=${1}
    host_tool_flags=${2}
    wrapper_name=${3}

    echo "\
#!/bin/bash

set -e

exec ${host_tool} ${!host_tool_flags} \"\${@}\"
" > ${wrapper_name}
    chmod +x ${wrapper_name}
}

function create-indirect-pkg-config() {
    host_pkg_config_path=${1}
    wrapper_name=${2}

    echo "\
#!/bin/bash

set -e

PKG_CONFIG_PATH=\"${!host_pkg_config_path}\" exec ${PKG_CONFIG} \"\${@}\"
" > ${wrapper_name}
    chmod +x ${wrapper_name}
}

function export-compiler-environment() {
    export BINDIR=${BINDIR:-${BUILD_PACKAGE_PREFIX}/bin}

    BINTOOLS_PREFIX=${BINTOOLS_PREFIX:-llvm-}
    BINTOOLS_PATH_PREFIX=${BINDIR}/${BINTOOLS_PREFIX}
    CXX_INCLUDE_DIR=${CXX_INCLUDE_DIR:-${PACKAGE_PREFIX}/include/c++/v1}
    OPTIMIZATION_FLAGS=${OPTIMIZATION_FLAGS:-"-DNDEBUG"}

    export ACLOCAL_PATH=${PACKAGE_PREFIX}/share/aclocal
    export AR=${AR:-${BINTOOLS_PATH_PREFIX}ar}
    export AS=${CC:-${BINDIR}/clang}
    export BUILD_CC=${CC:-${BINDIR}/clang}
    export CC=${CC:-${BINDIR}/clang}
    export CCLD=${CCLD:-${CC}}
    export CMAKE=${CMAKE:-${BINDIR}/cmake}
    export CPP=${CPP:-${CC}-cpp}
    export CXX=${CXX:-${CC}++}
    export CXXLD=${CXXLD:-${CXX}}
    export DLLTOOL=${DLLTOOL:-${BINTOOLS_PATH_PREFIX}dlltool}
    export LD=${LD:-${BINDIR}/ld.lld}
    export MAKE=${MAKE:-${BINDIR}/make}
    export MAKEINFO=${MAKEINFO:-${BINDIR}/true}
    export MANIFEST_TOOL=${MANIFEST_TOOL:-${BINTOOLS_PATH_PREFIX}mt}
    export MESON=${MESON:-${BINDIR}/meson}
    export NINJA=${NINJA:-${BINDIR}/ninja}
    export NM=${NM:-${BINTOOLS_PATH_PREFIX}nm}
    export NODE=${NODE:-${BINDIR}/node}
    export OBJCOPY=${OBJCOPY:-${BINTOOLS_PATH_PREFIX}objcopy}
    export OBJDUMP=${OBJDUMP:-${BINTOOLS_PATH_PREFIX}objdump}
    export PKG_CONFIG=${PKG_CONFIG:-${BUILD_PACKAGE_PREFIX}/bin/pkg-config}
    export PKG_CONFIG_PATH=${PKG_CONFIG_PATH:-${PACKAGE_PREFIX}/lib/pkgconfig}
    export PYTHON=${PYTHON:-${BINDIR}/python}
    export RANLIB=${RANLIB:-${BINTOOLS_PATH_PREFIX}ranlib}
    export RC=${RC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-rc}
    export READELF=${READELF:-${BINTOOLS_PATH_PREFIX}readelf}
    export SIZE=${SIZE:-${BINTOOLS_PATH_PREFIX}size}
    export STRINGS=${STRINGS:-${BINTOOLS_PATH_PREFIX}strings}
    export STRIP=${STRIP:-${BINTOOLS_PATH_PREFIX}strip}
    export SWIFTC=${SWIFTC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-swiftc}
    export WINDRES=${RC:-${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-rc}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        COMMON_CFLAGS="\
            --sysroot=${SYSROOT} \
            --target=${HOST_TRIPLE} \
            ${COMMON_CFLAGS} \
        "
        LDFLAGS="\
            --sysroot=${SYSROOT} \
            ${LDFLAGS} \
        "
        SWIFTCFLAGS="\
            -sdk ${SYSROOT} \
            ${SWIFTCFLAGS} \
        "
    else
        COMMON_CFLAGS="\
            -isystem ${PACKAGE_PREFIX}/include \
            ${COMMON_CFLAGS} \
        "
        SWIFTCFLAGS="\
            -I${PACKAGE_PREFIX}/include \
            -L${PACKAGE_PREFIX}/lib \
            ${SWIFTCFLAGS} \
        "

        export ACLOCAL_PATH=${ACLOCAL_PATH}:/usr/share/aclocal
        export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/usr/lib/${BUILD_TRIPLE}/pkgconfig:/usr/share/pkgconfig
    fi

    if [ "${HOST_OS}" = "android" ]; then
        COMMON_CFLAGS="\
            -fPIC \
            -D__USE_FORTIFY_LEVEL=0 \
            ${COMMON_CFLAGS} \
        "
        SWIFTCFLAGS="\
            -Xcc -D__USE_FORTIFY_LEVEL=0 \
            ${SWIFTCFLAGS} \
        "
    elif [ "${HOST_OS}" = "gnu" ]; then
        COMMON_CFLAGS="\
            -fPIC \
            ${COMMON_CFLAGS} \
        "
    elif [ "${HOST_OS}" = "musl" ]; then
        COMMON_CFLAGS="\
            -fPIC \
            -D_ALL_SOURCE=1 \
            -D__USE_FORTIFY_LEVEL=0 \
            ${COMMON_CFLAGS} \
        "
        SWIFTCFLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            -Xcc -D__USE_FORTIFY_LEVEL=0 \
            ${SWIFTCFLAGS} \
        "
    elif [ "${HOST_OS}" = "mingw32" ]; then
        COMMON_CFLAGS="\
            -fno-builtin-stpcpy \
            ${COMMON_CFLAGS} \
        "
    fi

    if [ -z "${DISABLE_CXX_INCLUDE}" ]; then
        CXXFLAGS="\
            -stdlib++-isystem ${CXX_INCLUDE_DIR} \
            ${CXXFLAGS} \
        "
    fi

    if [ -z "${DISABLE_POLLY}" ]; then
        COMMON_CFLAGS="\
            -mllvm -polly \
            ${COMMON_CFLAGS} \
        "
    fi

    if [ -n "${ENABLE_FLTO}" ]; then
        FLTO_OPTION=`echo ${ENABLE_FLTO} | tr '[:upper:]' '[:lower:]'`
        COMMON_CFLAGS="\
            -flto=${FLTO_OPTION} \
            ${COMMON_CFLAGS} \
        "
        LDFLAGS="\
            ${FLTO_CFLAG} \
            ${LDFLAGS} \
        "
    fi

    if [ -z "${ENABLE_LLVM_VERIFIER}" ]; then
        COMMON_LDFLAGS="\
            -disable-verify \
            ${COMMON_LDFLAGS} \
        "
    fi

    if [ -n "${HOST_ARCH}" ]; then
        COMMON_CFLAGS="\
            -march=${HOST_ARCH} \
            ${COMMON_CFLAGS} \
        "
    fi

    if [ -n "${HOST_CPU}" ]; then
        COMMON_CFLAGS="\
            -mtune=${HOST_CPU} \
            ${COMMON_CFLAGS} \
        "
    fi

    export ASFLAGS=`echo "\
        -pipe \
        ${COMMON_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${ASMFLAGS} \
    " | xargs`
    export CFLAGS=`echo "\
        -pipe \
        ${COMMON_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${CFLAGS} \
    " | xargs`
    export CCLDFLAGS=`echo "\
        -pipe \
        -rtlib=compiler-rt \
        ${COMMON_CFLAGS} \
        ${COMMON_LDFLAGS} \
        ${CCLDFLAGS} \
    " | xargs`
    export CPPFLAGS=`echo "\
        ${COMMON_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${CPPFLAGS} \
    " | xargs`
    export CXXFLAGS=`echo "\
        -pipe \
        ${COMMON_CFLAGS} \
        ${OPTIMIZATION_FLAGS} \
        ${CXXFLAGS} \
    " | xargs`
    export LDFLAGS=`echo "\
        ${LDFLAGS} \
    " | xargs`
    export LIBS=`echo "\
        ${LIBS} \
    " | xargs`
    export LIBTOOLFLAGS=`echo "\
        ${LIBTOOLFLAGS} \
    " | xargs`
    export SWIFTCFLAGS=`echo "\
        -Xcc -pipe \
        -Xcc -stdlib++-isystem -Xcc ${CXX_INCLUDE_DIR} \
        ${SWIFTCFLAGS} \
    " | xargs`
}

function generate-compiler-tools() {
    GENERATED_BINDIR=${GENERATED_BINDIR:-${STAGE_ROOT}}
    LINKER_OPTIMIZATION_LEVEL=${LINKER_OPTIMIZATION_LEVEL:-2}
    OPTIMIZATION_LEVEL=${OPTIMIZATION_LEVEL:-z}
    TOOL_PREFIX=${TOOL_PREFIX:-host}

    create-host-tool ${AS} ASFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang-as
    create-host-tool ${CC} CFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang
    create-host-tool ${CCLD} CCLDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang-ld
    create-host-tool ${CPP} CPPFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang-cpp
    create-host-tool ${CXX} CXXFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang++
    create-host-tool ${CXXLD} CCLDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-clang++-ld
    create-host-tool ${LD} LDFLAGS ${GENERATED_BINDIR}/${TOOL_PREFIX}-ld

    export AS=${GENERATED_BINDIR}/${TOOL_PREFIX}-clang-as
    export ASFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CC=${GENERATED_BINDIR}/${TOOL_PREFIX}-clang
    export CFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CCLD=${CC}-ld
    export CCLDFLAGS="-O${LINKER_OPTIMIZATION_LEVEL}"
    export CPP=${CC}-cpp
    export CPPFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CXX=${CC}++
    export CXXFLAGS="-O${OPTIMIZATION_LEVEL}"
    export CXXLD=${CXX}-ld
    export CXXLDFLAGS="-O${OPTIMIZATION_LEVEL}"
    export LD=${GENERATED_BINDIR}/${TOOL_PREFIX}-ld
    export LDFLAGS="-O${LINKER_OPTIMIZATION_LEVEL}"

    if [ "${BUILD_TRIPLE}" = "${HOST_TRIPLE}" ]; then
        export CCLDFLAGS=`echo "\
            -L${PACKAGE_PREFIX}/lib \
            ${CCLDFLAGS} \
        " | xargs`
        export LDFLAGS=`echo "\
            -L${PACKAGE_PREFIX}/lib \
            ${LDFLAGS} \
        " | xargs`
    fi

    if [ -z "${DISABLE_STRIP}" ]; then
        export LDFLAGS=`echo "\
            -s \
            ${LDFLAGS} \
        " | xargs`
    fi
}

function git-clone() {
    GIT_BRANCH=$1
    TARGET_ROOT=${TARGET_ROOT:-${SOURCE_ROOT}}
    ENABLE_SUBMODULES=${ENABLE_SUBMODULES:-"false"}
    
    pushd /sources
    
    if [ -d "${TARGET_ROOT}" ]; then
        rm -rf ${TARGET_ROOT}
    fi

    if [[ ${ENABLE_SUBMODULES} = "false" ]]; then
        git clone ${GIT_URL} \
          --branch ${GIT_BRANCH} \
          --single-branch \
          ${TARGET_ROOT}
    else
        git clone ${GIT_URL} \
          --branch ${GIT_BRANCH} \
          --single-branch \
          --recurse-submodules \
          ${TARGET_ROOT}
    fi

    popd
}

function make-build() {
    TARGETS=${TARGETS:-install}

    pushd ${STAGE_ROOT}
    ${MAKE} -j${NUM_PROCESSORS} \
              ${TARGETS}
    popd
}

function ninja-build() {
    TARGETS=${TARGETS:-install}

    pushd ${STAGE_ROOT}
    ${NINJA} -j${NUM_PROCESSORS} \
               ${TARGETS}
    popd
}

function package-cmake-invocation() {
    BUILD_TYPE=${BUILD_TYPE:-MinSizeRel}
    CMAKE_BINDIR=${CMAKE_BINDIR:-${BINDIR}}
    COMPILER_TARGET=${COMPILER_TARGET:-${HOST_TRIPLE}}
    SYSTEM_NAME=${SYSTEM_NAME:-Linux}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        CROSSCOMPILING_CMD="-DCMAKE_CROSSCOMPILING=TRUE"
        SYSTEM_NAME_CMD="-DCMAKE_SYSTEM_NAME=${SYSTEM_NAME}"
    fi

    AS_COMPILER_ID=${AS_COMPILER_ID:-Clang}
    CXX_STANDARD=${CXX_STANDARD:-20}

    ${CMAKE_BINDIR}/cmake \
        -G Ninja \
        -DCMAKE_AR=${AR} \
        -DCMAKE_ASM_COMPILER=${AS} \
        -DCMAKE_ASM_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_ASM_COMPILER_ID=${AS_COMPILER_ID} \
        -DCMAKE_ASM_FLAGS_DEBUG="${ASMFLAGS}" \
        -DCMAKE_ASM_FLAGS_MINSIZEREL="${ASMFLAGS}" \
        -DCMAKE_ASM_FLAGS_RELEASE="${ASMFLAGS}" \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
        -DCMAKE_C_COMPILER=${CC} \
        -DCMAKE_C_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_C_CREATE_SHARED_LIBRARY="${CCLD} <CMAKE_SHARED_LIBRARY_C_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_C_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_C_FLAGS_DEBUG="${CFLAGS}" \
        -DCMAKE_C_FLAGS_MINSIZEREL="${CFLAGS}" \
        -DCMAKE_C_FLAGS_RELEASE="${CFLAGS}" \
        -DCMAKE_C_LINK_EXECUTABLE="${CCLD} <FLAGS> <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_COMPILER=${CXX} \
        -DCMAKE_CXX_COMPILER_TARGET=${HOST_TRIPLE} \
        -DCMAKE_CXX_CREATE_SHARED_LIBRARY="${CXXLD} <CMAKE_SHARED_LIBRARY_CXX_FLAGS> <LANGUAGE_COMPILE_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_CXX_FLAGS> <SONAME_FLAG><TARGET_SONAME> -o <TARGET> <OBJECTS> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_FLAGS_DEBUG="${CXXFLAGS}" \
        -DCMAKE_CXX_FLAGS_MINSIZEREL="${CXXFLAGS}" \
        -DCMAKE_CXX_FLAGS_RELEASE="${CXXFLAGS}" \
        -DCMAKE_CXX_LINK_EXECUTABLE="${CXXLD} <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> <LINK_LIBRARIES>" \
        -DCMAKE_CXX_STANDARD=${CXX_STANDARD} \
        -DCMAKE_EXE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_INSTALL_PREFIX=${INSTALL_PREFIX} \
        -DCMAKE_LINKER=${LD} \
        -DCMAKE_MAKE_PROGRAM=${NINJA} \
        -DCMAKE_MODULE_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_NM=${NM} \
        -DCMAKE_OBJCOPY=${OBJCOPY} \
        -DCMAKE_OBJDUMP=${OBJDUMP} \
        -DCMAKE_PREFIX_PATH=${PKG_CONFIG_PATH} \
        -DCMAKE_RANLIB=${RANLIB} \
        -DCMAKE_RC_COMPILER=${RC} \
        -DCMAKE_READELF=${READELF} \
        -DCMAKE_Swift_COMPILER=${SWIFTC} \
        -DCMAKE_Swift_COMPILER_TARGET=${COMPILER_TARGET} \
        -DCMAKE_Swift_FLAGS="${SWIFTCFLAGS}" \
        -DCMAKE_STRINGS=${STRINGS} \
        -DCMAKE_STRIP=${STRIP} \
        -DCMAKE_SHARED_LINKER_FLAGS="${LDFLAGS}" \
        -DCMAKE_SYSROOT=${SYSROOT} \
        -DCMAKE_SYSTEM_PROCESSOR=${HOST_PROCESSOR} \
        "${CROSSCOMPILING_CMD}" \
        "${SYSTEM_NAME_CMD}" \
        "${@}"
}

function package-cmake() {
    export-compiler-environment
    generate-compiler-tools
    package-cmake-invocation ${@}
}

function package-configure-invocation() {
    CONFIGURE_HOST_TRIPLE=${CONFIGURE_HOST_TRIPLE:-${HOST_TRIPLE}}

    "${@}" \
        --build=${BUILD_TRIPLE} \
        --host=${CONFIGURE_HOST_TRIPLE} \
	--prefix=${INSTALL_PREFIX} \
        ${CONFIGURE_FLAGS}
}

function package-configure() {
    export-compiler-environment
    generate-compiler-tools
    package-configure-invocation \
        ${@}
}

function package-meson-build() {
    export-compiler-environment
    generate-compiler-tools

    BACKEND=${BACKEND:-ninja}
    BUILD_TYPE=${BUILD_TYPE:-custom}
    CONFIG_FILE=${STAGE_ROOT}/build-config.txt
    DEBUG=${DEBUG:-false}
    ENDIAN=${ENDIAN:-little}
    BUILD_SYSTEM=${BUILD_OS}

    if [ "${BUILD_OS}" = "gnu" ] ||
       [ "${BUILD_OS}" = "musl" ]; then
        HOST_SYSTEM="linux"
    elif [ "${BUILD_OS}" = "mingw32" ]; then
        BUILD_SYSTEM="windows"
    fi

    HOST_SYSTEM=${HOST_OS}

    if [ "${HOST_OS}" = "gnu" ] ||
       [ "${HOST_OS}" = "musl" ]; then
        HOST_SYSTEM="linux"
    elif [ "${HOST_OS}" = "mingw32" ]; then
        HOST_SYSTEM="windows"
    fi

    MESON_BUILD_CONFIG=native
    HOST_CMAKE_PREFIXES="${PACKAGE_PREFIX}/lib/cmake:${PKG_CONFIG_PATH}"
    HOST_C_ARGS=`echo [\'${CFLAGS}\'] | sed "s/ /','/g"`
    HOST_C_LINK_ARGS=`echo [\'${LDFLAGS}\'] | sed "s/ /','/g"`
    HOST_CMAKE_PREFIX_PATH=`echo [\'${HOST_CMAKE_PREFIXES}\'] | sed "s/:/','/g"`
    HOST_CPP_ARGS=`echo [\'${CXXFLAGS}\'] | sed "s/ /','/g"`
    HOST_CPP_LINK_ARGS=`echo [\'${LDFLAGS}\'] | sed "s/ /','/g"`

    export CMAKE_PREFIX_PATH=`echo ${HOST_CMAKE_PREFIXES} | tr ':' ';'`

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        MESON_BUILD_CONFIG=cross

        BUILD_CFLAGS="-I${BUILD_PACKAGE_PREFIX}/include"
        BUILD_CMAKE_PREFIXES="${BUILD_PACKAGE_PREFIX}/lib/cmake:${BUILD_PACKAGE_PREFIX}/lib/pkgconfig"
        BUILD_CXXFLAGS="-I${BUILD_PACKAGE_PREFIX}/include"
        BUILD_LDFLAGS="-L${BUILD_PACKAGE_PREFIX}/include"
        BUILD_PKG_CONFIG_PATH="${BUILD_PACKAGE_PREFIX}/lib/pkgconfig"

        BUILD_C_ARGS=`echo [\'${BUILD_CFLAGS}\'] | sed "s/ /','/g"`
        BUILD_C_LINK_ARGS=`echo [\'${BUILD_LDFLAGS}\'] | sed "s/ /','/g"`
        BUILD_CMAKE_PREFIX_PATH=`echo [\'${BUILD_CMAKE_PREFIXES}\'] | sed "s/:/','/g"`
        BUILD_CPP_ARGS=`echo [\'${BUILD_CXXFLAGS}\'] | sed "s/ /','/g"`
        BUILD_CPP_LINK_ARGS=`echo [\'${BUILD_LDFLAGS}\'] | sed "s/ /','/g"`

        export CC_FOR_BUILD=${BINDIR}/clang
        export CXX_FOR_BUILD=${BINDIR}/clang++
        export CMAKE_FOR_BUILD=${CMAKE}
        export CMAKE_PREFIX_PATH_FOR_BUILD=`echo ${BUILD_CMAKE_PREFIXES} | tr ":" ";"`

        create-indirect-pkg-config BUILD_PKG_CONFIG_PATH ${STAGE_ROOT}/build-pkgconfig

        export PKG_CONFIG_FOR_BUILD=${STAGE_ROOT}/build-pkgconfig
    fi

    echo "\
[binaries]
${MESON_EXTRA_BINARIES}
" > ${CONFIG_FILE}

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        echo "\
[build_machine]
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC_FOR_BUILD}'
c_args = ${BUILD_C_ARGS}
c_ld = '${BINDIR}/ld.lld'
c_link_args = ${BUILD_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${BUILD_CMAKE_PREFIX_PATH}
cpp = '${CXX_FOR_BUILD}'
cpp_args = ${BUILD_CPP_ARGS}
cpp_ld = '${BINDIR}/ld.lld'
cpp_link_args = ${BUILD_CPP_LINK_ARGS}
cpu = '${BUILD_ARCH}'
cpu_family = '${BUILD_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${STAGE_ROOT}/build-pkg-config'
pkgconfigpath = ''
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${BUILD_SYSTEM}'
windres = '${WINDRES}'

[host_machine]
        " >> ${CONFIG_FILE}
    fi

    echo "\
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC}'
c_args = ${HOST_C_ARGS}
c_ld = '${LD}'
c_link_args = ${HOST_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${HOST_CMAKE_PREFIX_PATH}
cpp = '${CXX}'
cpp_args = ${HOST_CPP_ARGS}
cpp_ld = '${LD}'
cpp_link_args = ${HOST_CPP_LINK_ARGS}
cpu = '${HOST_ARCH}'
cpu_family = '${HOST_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${PKG_CONFIG}'
pkg_config_path = '${PKG_CONFIG_PATH}'
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${HOST_SYSTEM}'
windres = '${WINDRES}'
    " >> ${CONFIG_FILE}


    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        echo "\
[target_machine]
ar = '${AR}'
backend = '${BACKEND}'
buildtype = '${BUILD_TYPE}'
c = '${CC}'
c_args = ${HOST_C_ARGS}
c_ld = '${LD}'
c_link_args = ${HOST_C_LINK_ARGS}
cmake='${CMAKE}'
cmake_prefix_path=${HOST_CMAKE_PREFIX_PATH}
cpp = '${CXX}'
cpp_args = ${HOST_CPP_ARGS}
cpp_ld = '${LD}'
cpp_link_args = ${HOST_CPP_LINK_ARGS}
cpu = '${HOST_ARCH}'
cpu_family = '${HOST_PROCESSOR}'
debug = '${DEBUG}'
endian = '${ENDIAN}'
optimization = '${OPTIMIZATION_LEVEL}'
pkgconfig = '${PKG_CONFIG}'
pkg_config_path = '${PKG_CONFIG_PATH}'
python = '${PYTHON}'
nm = '${NM}'
ranlib = '${RANLIB}'
strip = '${STRIP}'
strings = '${STRINGS}'
system = '${HOST_SYSTEM}'
windres = '${WINDRES}'
" >> ${CONFIG_FILE}
    fi

    ${MESON} \
         ${SOURCE_ROOT} \
         ${STAGE_ROOT} \
         -Dlibdir=${INSTALL_PREFIX}/lib \
         -Dprefix=${INSTALL_PREFIX} \
         --${MESON_BUILD_CONFIG}-file ${CONFIG_FILE} \
         ${@}
}

function package-python-build() {
    SETUP_PY=${SETUP_PY:-${SOURCE_ROOT}/setup.py}
    INSTALLED_FILE_LIST=${INSTALLED_FILE_LIST:-${STAGE_ROOT}/installed-file-list.txt}

    export-compiler-environment
    generate-compiler-tools

    ${PYTHON} ${SETUP_PY} build -b ${STAGE_ROOT} \
                                -j ${NUM_PROCESSORS}
    ${PYTHON} ${SETUP_PY} install --prefix ${INSTALL_PREFIX} \
                                  --record ${INSTALLED_FILE_LIST} \
                                  --single-version-externally-managed
}

function package-swift-build() {
    export-compiler-environment

    SDK_PLATFORM_DIR=`echo ${SYSTEM_NAME} | tr '[:upper:]' '[:lower:]'`
    SWIFT_BUILD_TYPE=${SWIFT_BUILD_TYPE:-release}
    TEMP_FILE=`mktemp`

    if [ -z "${DISABLE_POLLY}" ]; then
        POLLY_CFLAG="\"-mllvm\", \"-polly\""
        POLLY_SWIFTCFLAG="\"-Xllvm\", \"-polly\""
    fi

    if [ -z "${DISABLE_STRIP}" ]; then
        STRIP_LDFLAG="-s"
    fi

    if [ -n "${ENABLE_FLTO}" ]; then
        FLTO_OPTION=`echo ${ENABLE_FLTO} | tr '[:upper:]' '[:lower:]'`
        FLTO_CFLAG="-flto=${FLTO_OPTION}"
        FLTO_SWIFTCFLAG="-whole-module-optimization"
    fi

    if [ "${HOST_OS}" = "android" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D__USE_FORTIFY_LEVEL=0 \
            ${SWIFT_BUILD_FLAGS} \
        "
    elif [ "${HOST_OS}" = "musl" ]; then
        SWIFT_BUILD_FLAGS="\
            -Xcc -D_ALL_SOURCE=1 \
            -Xcc -D__USE_FORTIFY_LEVEL=0 \
            ${SWIFT_BUILD_FLAGS} \
        "
    fi

    if [ "${HOST_OS}" != "mingw32" ]; then
        FPIC_CFLAG="-fPIC"
        TARGET=${TARGET:-${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
    else
        TARGET=${TARGET:-${HOST_PROCESSOR}-unknown-windows-gnu}
    fi

    echo -e "{ \n\
        \"version\": 1, \n\
        \"sdk\": \"${SYSROOT}\", \n\
        \"toolchain-bin-dir\": \"${BINDIR}\", \n\
        \"target\": \"${TARGET}\", \n\
        \"extra-cc-flags\": [ \n\
            \"-march=${HOST_ARCH}\", \n\
            \"-mtune=${HOST_CPU}\", \n\
            \"-pipe\", \n\
            \"-resource-dir=${PACKAGE_PREFIX}/lib/clang/12.0.0\", \n\
            \"-target\", \"${TARGET}\", \n\
            \"-I${PACKAGE_PREFIX}/lib/swift\", \n\
            \"-I${PACKAGE_PREFIX}/lib/swift/Block\", \n\
            \"-O${OPTIMIZATION_LEVEL}\", \n\
            \"--sysroot=${SYSROOT}\", \n\
            \"${FLTO_CFLAG}\", \n\
            \"${FPIC_CFLAG}\", \n\
            ${POLLY_CFLAG} \n\
        ], \n\
        \"extra-cpp-flags\": [ \n\
        ], \n\
        \"extra-linker-flags\": [ \n\
            \"-disable-verify\", \n\
            \"-O${LINKER_OPTIMIZATION_LEVEL}\", \n\
            \"${FLTO_CFLAG}\", \n\
            \"${STRIP_LDFLAG}\", \n\
        ], \n\
        \"extra-swiftc-flags\": [ \n\
            \"-target-cpu\", \"${HOST_CPU}\", \n\
            \"-L${PACKAGE_PREFIX}/lib\", \n\
            \"-O${SWIFT_OPTIMIZATION_LEVEL}\", \n\
            \"-Xfrontend\", \"-disable-llvm-verify\", \n\
            \"${FLTO_SWIFTCFLAG}\", \n\
            ${POLLY_SWIFTCFLAG} \n\
        ] \n\
    } \n\
    " > ${TEMP_FILE}

    ${BINDIR}/swift \
        build \
        --build-path ${STAGE_ROOT} \
        --configuration ${SWIFT_BUILD_TYPE} \
        --destination ${TEMP_FILE} \
        --enable-test-discovery \
        ${SWIFT_BUILD_FLAGS}
}

function rpath-fixup() {
    SDK_PLATFORM_DIR=`echo ${SYSTEM_NAME} | tr '[:upper:]' '[:lower:]'`

    if [ "${SDK_PLATFORM_DIR}" != "windows" ]; then
        if [ "${SDK_PLATFORM_DIR}" != "${HOST_OS}" ]; then
            SDK_PLATFORM_DIR=${HOST_OS}
        fi

        COMPONENT_RPATH=${COMPONENT_RPATH:-"\$ORIGIN/../lib:\$ORIGIN/../lib/swift/${SDK_PLATFORM_DIR}"}

        for COMPONENT in ${COMPONENTS}; do
            patchelf --set-rpath ${COMPONENT_RPATH} \
                                 ${COMPONENT}
        done
    fi
}

function yarn-build() {
    yarn
    yarn compile
}
