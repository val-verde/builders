#!/bin/bash

set -e

# Source deb packaging helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-deb-packaging-scripts
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-bash-source-scripts

function fetch-sources() {
    GIT_INDEX_OVERRIDE=${GIT_INDEX_OVERRIDE:-0}
    OTHER_INDEX_OVERRIDE=${OTHER_INDEX_OVERRIDE:-0}
    SOURCE_FILE=${SOURCE_FILE:-/usr/share/${VAL_VERDE_GH_TEAM}/${VAL_VERDE_GH_TEAM}-sources.json}

    pushd /sources
    
    echo "Processing source file..."${SOURCE_FILE}
    gitSourcesCount=( $(jq '.[0] | .gitSources | length' ${SOURCE_FILE}) )
    otherSourcesCount=( $(jq '.[1] | .otherSources | length' ${SOURCE_FILE}) )

    git config --global user.email "openvalverde@gmail.com"

    for index in `seq "${GIT_INDEX_OVERRIDE}" $(($gitSourcesCount - 1))`; do
        SOURCE_PACKAGE_NAME=$(jq -r ".[0] | .gitSources | .[$index].sourcePackageName" ${SOURCE_FILE})
        SOURCE_BRANCH_IND=$(jq -r ".[0] | .gitSources | .[$index].sourceBranchIndicator" ${SOURCE_FILE})
        SOURCE_PACKAGE_VERSION=$(jq -r ".[0] | .gitSources | .[$index].sourcePackageVersion" ${SOURCE_FILE})
        SOURCE_URL=$(jq -r ".[0] | .gitSources | .[$index].sourcePackageUrl" ${SOURCE_FILE})
        SUBMODULES_FLAG=$(jq -r ".[0] | .gitSources | .[$index].enableSubmodules" ${SOURCE_FILE})

        PACKAGE_BASE_URL=${SOURCE_URL/'${VAL_VERDE_GH_TEAM}'/${VAL_VERDE_GH_TEAM}}
        export PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}        
        
        if [[ ${PACKAGE_BASE_URL} == *'${SOURCE_PACKAGE_NAME}'* ]]; then
            PACKAGE_URL=${PACKAGE_BASE_URL//'${SOURCE_PACKAGE_NAME}'/${SOURCE_PACKAGE_NAME}}
        else
            PACKAGE_URL=${PACKAGE_BASE_URL}
        fi

        if [[ ${SOURCE_BRANCH_IND} == "default" ]]; then
            SOURCE_BRANCH=val-verde-mainline
        elif [[ ${SOURCE_BRANCH_IND} == "default-next" ]]; then
            SOURCE_BRANCH=val-verde-mainline-next
        elif [[ ${SOURCE_BRANCH_IND} == "default-next-testing" ]]; then
            SOURCE_BRANCH=val-verde-mainline-next-testing
        elif [[ ${SOURCE_BRANCH_IND} == "android" ]]; then
            SOURCE_BRANCH=val-verde-android-mainline
            PACKAGE_NAME=${PACKAGE_NAME}-android
        elif [[ ${SOURCE_BRANCH_IND} == "android-next" ]]; then
            SOURCE_BRANCH=val-verde-android-mainline-next
            PACKAGE_NAME=${PACKAGE_NAME}-android
        elif [[ ${SOURCE_BRANCH_IND} == "android-next-testing" ]]; then
            SOURCE_BRANCH=val-verde-android-mainline-next-testing
            PACKAGE_NAME=${PACKAGE_NAME}-android
        elif [[ ${SOURCE_BRANCH_IND} == "windows" ]]; then
            SOURCE_BRANCH=val-verde-windows-mainline
            PACKAGE_NAME=${PACKAGE_NAME}-windows
        else
            SOURCE_BRANCH=${SOURCE_BRANCH_IND}
        fi
        
        export PACKAGE_PREFIX=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/sources/${PACKAGE_NAME}
        export INSTALL_ROOT=${TEMPDIR}/org.${VAL_VERDE_GH_TEAM}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-sources
        export INSTALL_PREFIX=${INSTALL_ROOT}${PACKAGE_PREFIX}
        
        # Prepare install directory for source package
        mkdir -p ${INSTALL_PREFIX}
        if [[ ${SUBMODULES_FLAG} = 'true' ]]; then
            GIT_URL=${PACKAGE_URL} \
            TARGET_ROOT=${INSTALL_PREFIX} \
            ENABLE_SUBMODULES=true \
            git-clone ${SOURCE_BRANCH}
        else
            GIT_URL=${PACKAGE_URL} \
            TARGET_ROOT=${INSTALL_PREFIX} \
            git-clone ${SOURCE_BRANCH}
        fi

        # Prepare source root
        pushd ${INSTALL_PREFIX}
        rm -rf .git*
        rm -rf "^.git*"
        git init
        git add -A
        git commit -m "Val verde source base commit."
        popd

        # Build the source deb package
        deb-package-build

        # Install the source deb package
        deb-package-install

        # Clean up
        rm -rf ${INSTALL_ROOT}
        echo "Retrieved and packaged..."${PACKAGE_NAME}
    done
    
    for index in `seq "${OTHER_INDEX_OVERRIDE}" $(($otherSourcesCount - 1))`; do
        SOURCE_PACKAGE_NAME=$(jq -r ".[1] | .otherSources | .[$index].sourcePackageName" ${SOURCE_FILE})
        SOURCE_BRANCH_IND=$(jq -r ".[1] | .otherSources | .[$index].sourceBranchIndicator" ${SOURCE_FILE})
        SOURCE_PACKAGE_VERSION=$(jq -r ".[1] | .otherSources | .[$index].sourcePackageVersion" ${SOURCE_FILE})
        SOURCE_URL=$(jq -r ".[1] | .otherSources | .[$index].sourcePackageUrl" ${SOURCE_FILE})
        SUBMODULES_FLAG=$(jq -r ".[0] | .otherSources | .[$index].enableSubmodules" ${SOURCE_FILE})

        PACKAGE_BASE_URL=${SOURCE_URL/'${VAL_VERDE_GH_TEAM}'/${VAL_VERDE_GH_TEAM}}
        export PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}

        if [[ ${PACKAGE_BASE_URL} == *'${SOURCE_PACKAGE_NAME}'* || ${PACKAGE_BASE_URL} == *'${SOURCE_PACKAGE_VERSION}'* ]]; then
            PACKAGE_URL=${PACKAGE_BASE_URL//'${SOURCE_PACKAGE_NAME}'/${SOURCE_PACKAGE_NAME}}
            PACKAGE_URL=${PACKAGE_URL//'${SOURCE_PACKAGE_VERSION}'/${SOURCE_PACKAGE_VERSION}}
        else
            PACKAGE_URL=${PACKAGE_BASE_URL}
        fi

        export PACKAGE_PREFIX=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/sources/${PACKAGE_NAME}
        export INSTALL_ROOT=${TEMPDIR}/org.${VAL_VERDE_GH_TEAM}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-sources
        export INSTALL_PREFIX=${INSTALL_ROOT}${PACKAGE_PREFIX}

        # Prepare install directory for source package
        mkdir -p ${INSTALL_PREFIX}

        if [[ ${SOURCE_BRANCH_IND} == "wget" ]]; then
            wget -c ${PACKAGE_URL} -O ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz
            tar -xzvf ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz \
                -C ${INSTALL_PREFIX} --strip 1
            rm ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz
        elif [[ ${SOURCE_BRANCH_IND} == "wget-xz" ]]; then
            wget -c ${PACKAGE_URL} -O ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.xz
            tar -xvf ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.xz \
                -C ${INSTALL_PREFIX} --strip 1
            rm ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.xz
        elif [[ ${SOURCE_BRANCH_IND} == "wget-unzip" ]]; then
            ANDROID_NDK_URL=https://dl.google.com/android/repository
            wget -c ${ANDROID_NDK_URL}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-${BUILD_KERNEL}-${BUILD_PROCESSOR}.zip \
                 -O ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.zip
            unzip ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.zip \
                 -d ${INSTALL_PREFIX}
            rm ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.zip
        fi

        if [[ ${SUBMODULES_FLAG} = 'true' ]]; then
            pushd ${INSTALL_PREFIX}
            git submodule init
            git submodule update
            popd
        fi
        
        # Build the source deb package
        deb-package-build

        # Install the source deb package
        deb-package-install

        # Clean up
        rm -rf ${INSTALL_ROOT}
        echo "Retrieved and packaged..."${PACKAGE_NAME}
    done

    popd
}
