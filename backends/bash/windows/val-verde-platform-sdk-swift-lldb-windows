#!/bin/bash

set -e

# Set all environment vars
export SOURCE_PACKAGE_NAME=swift-lldb
export SOURCE_PACKAGE_VERSION=5

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-libxml2-2-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-llvm-project-13-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-lua-5-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-ncurses-6-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swift-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-xz-5-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
export LLVM_SOURCE_ROOT=${SOURCE_ROOT_BASE}/${QUALIFIED_LLVM_PATH}
export LLVM_NATIVE_STAGE_ROOT=${LLVM_NATIVE_STAGE_ROOT:-${STAGE_ROOT_BASE}/${QUALIFIED_LLVM_PATH}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}}
export LLVM_STAGE_ROOT=${STAGE_ROOT_BASE}/${QUALIFIED_LLVM_PATH}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export SOURCE_ROOT=${SOURCE_ROOT_BASE}/${QUALIFIED_LLVM_PATH}/lldb
export SWIFT_STAGE_ROOT=${STAGE_ROOT_BASE}/swift-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}
export SWIFT_NATIVE_STAGE_ROOT=${SWIFT_NATIVE_STAGE_ROOT:-${STAGE_ROOT_BASE}/swift-${SOURCE_PACKAGE_VERSION}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}}
export SWIFT_STAGE_ROOT=${STAGE_ROOT_BASE}/swift-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}

# Configure the build components

cd ${STAGE_ROOT}
CFLAGS="\
    -Wno-register \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -Wno-register \
    ${CXXFLAGS} \
" \
CXX_STANDARD=17 \
LDFLAGS="\
    -lole32 \
    -lpsapi \
    -luuid \
    ${LDFLAGS} \
"
package-cmake \
    -DClang_DIR=${LLVM_STAGE_ROOT}/lib/cmake/clang \
    -DCLANG_LINK_CLANG_DYLIB=FALSE \
    -DCMAKE_EXE_LINKER_FLAGS="-O2" \
    -DCURSES_INCLUDE_DIRS=${PACKAGE_PREFIX}/include/ncurses \
    -DCURSES_LIBRARIES=${PACKAGE_PREFIX}/lib/libncurses.dll.a \
    -DLibEdit_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DLibEdit_LIBRARIES=${PACKAGE_PREFIX}/bin/libedit.dll.a \
    -DLIBLZMA_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DLIBLZMA_LIBRARY=${PACKAGE_PREFIX}/lib/liblzma.dll.a \
    -DLIBXML2_INCLUDE_DIR=${PACKAGE_PREFIX}/include/libxml2 \
    -DLIBXML2_LIBRARY=${PACKAGE_PREFIX}/lib/libxml2.dll.a \
    -DLLDB_ENABLE_PYTHON=FALSE \
    -DLLDB_ENABLE_SWIFT_SUPPORT=TRUE \
    -DLLDB_ENABLE_WERROR=FALSE \
    -DLLDB_INCLUDE_TESTS=FALSE \
    -DLLDB_PATH_TO_NATIVE_SWIFT_BUILD=${SWIFT_NATIVE_STAGE_ROOT}/lib/cmake/swift \
    -DLLDB_PYTHON_DEFAULT_RELATIVE_PATH=lib/python${PYTHON_VERSION} \
    -DLLDB_TABLEGEN=${STAGE_ROOT_BASE}/${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}/bin/lldb-tblgen \
    -DLLVM_BUILD_LIBRARY_DIR=${LLVM_STAGE_ROOT}/lib \
    -DLLVM_BUILD_LLVM_DYLIB=FALSE \
    -DLLVM_BUILD_MAIN_SRC_DIR=${LLVM_SOURCE_ROOT}/llvm \
    -DLLVM_DIR=${LLVM_STAGE_ROOT}/lib/cmake/llvm \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DLLVM_ENABLE_LLD=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_INCLUDE_TESTS=FALSE \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=TRUE \
    -DLLVM_LINK_LLVM_DYLIB=FALSE \
    -DLLVM_MAIN_INCLUDE_DIR=${LLVM_SOURCE_ROOT}/llvm/include \
    -DLLVM_TABLEGEN=${LLVM_NATIVE_STAGE_ROOT}/bin/llvm-tblgen \
    -DNATIVE_Clang_DIR=${LLVM_NATIVE_STAGE_ROOT}/lib/cmake/clang \
    -DNATIVE_LLVM_DIR=${LLVM_NATIVE_STAGE_ROOT}/lib/cmake/lib \
    -DPython3_EXECUTABLE=${BUILD_PACKAGE_PREFIX}/bin/python3 \
    -DPANEL_LIBRARIES=${PACKAGE_PREFIX}/lib/libpanel.dll.a \
    -DSwift_DIR=${SWIFT_STAGE_ROOT}/lib/cmake/swift \
    -DSWIG_EXECUTABLE=${BUILD_PACKAGE_PREFIX}/bin/swig \
    ${SOURCE_ROOT}

# Package the components
ninja-install

# Build the package
deb-package-build

# Install the package
deb-package-install
