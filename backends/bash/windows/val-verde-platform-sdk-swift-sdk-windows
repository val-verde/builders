#!/bin/bash

set -e

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-bash-source-scripts

export COMPILER_TARGET=${HOST_PROCESSOR}-unknown-windows-gnu

# remove host foundation and libdispatch to avoid module collisions
PACKAGES_TO_MANAGE=( 'swift-corelibs-foundation'     'BUILD' \
                     'swift-corelibs-libdispatch'    'BUILD' )

PACKAGE_ACTION=UNINSTALL \
deb-package-mgmt ${PACKAGES_TO_MANAGE[@]}

# windows libdispatch build
package-invoke-builder swift-corelibs-libdispatch-windows

# windows foundation build
package-invoke-builder swift-corelibs-foundation-windows

# windows xctest build
package-invoke-builder swift-corelibs-xctest-windows

# windows llbuild build
package-invoke-builder swift-llbuild-windows

# windows swift-tools-support-core build
package-invoke-builder swift-tools-support-core-windows

# windows yams build
package-invoke-builder yams-windows

# windows swift-argument-parser build
CFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    ${CXXFLAGS} \
" \
SWIFTCFLAGS="\
    -use-ld=${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-mslink \
    ${SWIFTCFLAGS} \
" \
package-invoke-builder swift-argument-parser-cross

# windows swift-driver build
CFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    ${CXXFLAGS} \
" \
SWIFTCFLAGS="\
    -use-ld=${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-mslink \
    ${SWIFTCFLAGS} \
" \
package-invoke-builder swift-driver-cross

# windows swiftpm build
CFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    ${CFLAGS} \
" \
CXXFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    ${CXXFLAGS} \
" \
SWIFTCFLAGS="\
    -use-ld=${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-mslink \
    ${SWIFTCFLAGS} \
" \
package-invoke-builder swift-package-manager-cross

# reinstall swiftpm for build and host
PACKAGES_TO_MANAGE=( 'swift-argument-parser'         'BUILD' \
                     'swift-corelibs-foundation'     'BUILD' \
                     'swift-corelibs-libdispatch'    'BUILD' \
                     'swift-corelibs-xctest'         'BUILD' \
                     'swift-driver'                  'BUILD' \
                     'swift-llbuild'                 'BUILD' \
                     'swift-package-manager'         'BUILD' \
                     'swift-tools-support-core'      'BUILD' \
                     'yams'                          'BUILD' \
                     'swift-argument-parser'         'HOST' \
                     'swift-corelibs-foundation'     'HOST' \
                     'swift-corelibs-libdispatch'    'HOST' \
                     'swift-corelibs-xctest'         'HOST' \
                     'swift-driver'                  'HOST' \
                     'swift-llbuild'                 'HOST' \
                     'swift-package-manager'         'HOST' \
                     'swift-tools-support-core'      'HOST' \
                     'yams'                          'HOST' )

PACKAGE_ACTION=INSTALL \
deb-package-mgmt ${PACKAGES_TO_MANAGE[@]}

# windows swift-syntax build
package-invoke-builder swift-syntax-cross

# windows swift-format build
package-invoke-builder swift-format-cross

# windows swift-doc build
package-invoke-builder swift-doc-cross

# windows sourcekit-lsp build
package-invoke-builder sourcekit-lsp-windows
