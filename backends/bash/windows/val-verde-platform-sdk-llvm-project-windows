#!/bin/bash

set -e

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-libffi-3-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-winpthreads-6-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-z3-4-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-zlib-1-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU} (>=1.0.0) \
"

COMPILER_RT_SANITIZERS_TO_BUILD="asan;cfi;dfsan;hwasan;msan;safestack;tsan;ubsan_minimal"
CUDA_GPU_PRIMARY_ARCH=61
CUDA_GPU_SECONDARY_ARCH=35
EXTRA_PROJECTS=${EXTRA_PROJECTS:-"clang-tools-extra;clang-tools-extra;mlir;parallel-libs;polly;pstl"}

if [ "${HOST_PROCESSOR}" = "x86_64" ]; then
    EXTRA_PROJECTS="${EXTRA_PROJECTS};openmp"
fi

# Invoke one-shot template for cmake/install
function package-install-completion-callback() {
    package-rsync -ax \
                  ${STAGE_ROOT}/bin/dsymutil* \
                  ${STAGE_ROOT}/bin/ld64.lld* \
                  ${STAGE_ROOT}/bin/llvm-as* \
                  ${STAGE_ROOT}/bin/llvm-dlltool* \
                  ${STAGE_ROOT}/bin/llvm-install-name-tool* \
                  ${STAGE_ROOT}/bin/llvm-libtool-darwin* \
                  ${STAGE_ROOT}/bin/llvm-link* \
                  ${STAGE_ROOT}/bin/llvm-lipo* \
                  ${STAGE_ROOT}/bin/llvm-ml* \
                  ${STAGE_ROOT}/bin/llvm-mt* \
                  ${STAGE_ROOT}/bin/llvm-otool* \
                  ${STAGE_ROOT}/bin/llvm-pdbutil* \
                  ${STAGE_ROOT}/bin/llvm-readelf* \
                  ${STAGE_ROOT}/bin/llvm-readobj* \
                  ${STAGE_ROOT}/bin/llvm-windres* \
                  ${STAGE_ROOT}/bin/opt* \
                  ${INSTALL_PREFIX}/bin/

    if [ "${BUILD_TRIPLE}" != "${HOST_TRIPLE}" ]; then
        package-rsync -ax \
                      ${STAGE_ROOT}/NATIVE/bin/`package-get-filename llvm-config EXECUTABLE BUILD` \
                      ${STAGE_ROOT}/bin/`package-get-filename host-llvm-config EXECUTABLE BUILD`
    fi

    CLANG_RT_LIB=`package-get-filename clang_rt.builtins-${HOST_PROCESSOR} STATIC`
    DST_CLANG_RT_LIB=`package-get-filename clang_rt.builtins-${HOST_PROCESSOR} STATIC`
    DST_SDK_PLATFORM_DIR=${DST_SDK_PLATFORM_DIR:-windows}
    CLANG_RESOURCE_VERSION=`package-get-source-package-version llvm-project`
    ${LN} -sf \
          ${CLANG_RT_LIB} \
          ${INSTALL_PREFIX}/lib/clang/${CLANG_RESOURCE_VERSION}/lib/${DST_SDK_PLATFORM_DIR}/${DST_CLANG_RT_LIB}
}

function tool-install-invocation() {
    INSTALL_TARGET="tools/clang/install" \
    tool-install

    INSTALL_TARGET="projects/compiler-rt/install tools/lld/install tools/mlir/install" \
    tool-install

    NUM_PROCESSORS=`awk '/MemTotal/ { printf "%d", $2/(1024*1024*5) }' /proc/meminfo` \
    INSTALL_TARGET="tools/flang/install" \
    tool-install

    tool-install
}

if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
    COMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG=FALSE
else
    COMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG=TRUE
fi

# Make native tools available in PATH/LD_LIBRARY_PATH
export LD_LIBRARY_PATH=${STAGE_ROOT}/NATIVE/lib:${LD_LIBRARY_PATH}
export PATH=${STAGE_ROOT}/NATIVE/bin:${PATH}

CXX_STANDARD=17
export-compiler-environment

CROSS_TOOLCHAIN_FLAGS_NATIVE=`package-cmake-invocation-arguments-for-variant BUILD`

COMMON_CFLAGS="\
    -fms-compatibility-version=19.2 \
    -fms-extensions \
    -D_Unwind_Personality_Fn=__personality_routine \
    ${COMMON_CFLAGS} \
" \
CMAKE_CONFIGURE_ROOT=${SOURCE_ROOT}/llvm \
DISABLE_TOOL_BUILD=TRUE \
PACKAGE_INSTALL_COMPLETION_CALLBACK=package-install-completion-callback \
TOOL_INSTALL_INVOCATION=tool-install-invocation \
package-cmake-install-archive \
    -DBUILD_SHARED_LIBS=TRUE \
    -DCCACHE_PROGRAM=`package-get-path ccache EXECUTABLE BUILD` \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_LINKER=lld \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_STD_C=gnu17 \
    -DCLANG_DEFAULT_STD_CXX=gnucxx20 \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_ENABLE_ARCMT=TRUE \
    -DCLANG_ENABLE_STATIC_ANALYZER=TRUE \
    -DCLANG_INCLUDE_DOCS=FALSE \
    -DCLANG_INCLUDE_TESTS=FALSE \
    -DCLANG_LINK_CLANG_DYLIB=FALSE \
    -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_${CUDA_GPU_PRIMARY_ARCH} \
    -DCLANG_TOOL_ARCMT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_CLANG_REFACTOR_TEST_BUILD=FALSE \
    -DCLANG_TOOL_C_ARCMT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_C_INDEX_TEST_BUILD=FALSE \
    -DCMAKE_ASM_MASM_COMPILER=${BINDIR}/${VAL_VERDE_GH_TEAM}-platform-sdk-ml64 \
    -DCOMPILER_RT_BUILD_LIBFUZZER=TRUE \
    -DCOMPILER_RT_BUILD_MEMPROF=TRUE \
    -DCOMPILER_RT_BUILD_PROFILE=TRUE \
    -DCOMPILER_RT_BUILD_SANITIZERS=TRUE \
    -DCOMPILER_RT_BUILD_XRAY=TRUE \
    -DCOMPILER_RT_CAN_EXECUTE_TESTS=FALSE \
    -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=${HOST_4_TRIPLE} \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=FALSE \
    -DCOMPILER_RT_HAS_ATOMIC_KEYWORD=TRUE \
    -DCOMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG=${COMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG} \
    -DCOMPILER_RT_HAS_FFREESTANDING_FLAG=FALSE \
    -DCOMPILER_RT_HAS_LIBSTDCXX=FALSE \
    -DCOMPILER_RT_HAS_NODEFAULTLIBS_FLAG=FALSE \
    -DCOMPILER_RT_INCLUDE_TESTS=FALSE \
    -DCOMPILER_RT_SANITIZERS_TO_BUILD=${COMPILER_RT_SANITIZER_TO_BUILD} \
    -DCROSS_TOOLCHAIN_FLAGS_NATIVE="-DBUILD_SHARED_LIBS=TRUE;-DLLVM_ENABLE_RTTI=TRUE;-DLLVM_HOST_TRIPLE=${HOST_4_TRIPLE};${CROSS_TOOLCHAIN_FLAGS_NATIVE}" \
    -DCUDA_NVCC_EXECUTABLE=${BINDIR}/clang \
    -DCUDA_TOOLKIT_INCLUDE=${PACKAGE_PREFIX}/include \
    -DDARWIN_macosx_OVERRIDE_SDK_VERSION=${MACOS_VERSION} \
    -DDARWIN_osx_BUILTIN_ARCHS="arm64;x86_64" \
    -DDARWIN_osx_BUILTIN_MIN_VER=${MACOS_VERSION} \
    -DDARWIN_osx_SYSROOT=${SOURCE_ROOT_BASE}/macosx-${MACOS_VERSION} \
    -DDEFAULT_SYSROOT=${SYSROOT} \
    -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=TRUE \
    -DFFI_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DFFI_INCLUDE_PATH=${PACKAGE_PREFIX}/include \
    -DFFI_LIBRARY_DIR=${PACKAGE_PREFIX}/lib \
    -DFFI_LIBRARY_PATH=`package-get-path ffi SHARED HOST` \
    -DHAVE_GNU_POSIX_REGEX=TRUE \
    -DHAVE_INOTIFY=TRUE \
    -DHAVE_LIBCXXABI=TRUE \
    -DHAVE_LIBUNWIND=TRUE \
    -DHAVE_THREAD_SAFETY_ATTRIBUTES=TRUE \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${PACKAGE_PREFIX}/include/c++/v1 \
    -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=FALSE \
    -DLIBCXX_ENABLE_ASSERTIONS=FALSE \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=TRUE \
    -DLIBCXX_ENABLE_EXCEPTIONS=TRUE \
    -DLIBCXX_ENABLE_FILESYSTEM=TRUE \
    -DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=TRUE \
    -DLIBCXX_ENABLE_PARALLEL_ALGORITHMS=TRUE \
    -DLIBCXX_ENABLE_RTTI=TRUE \
    -DLIBCXX_ENABLE_SHARED=TRUE \
    -DLIBCXX_ENABLE_STATIC=TRUE \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=TRUE \
    -DLIBCXX_ENABLE_THREADS=TRUE \
    -DLIBCXX_HAS_ATOMIC_LIB=FALSE \
    -DLIBCXX_HAS_MUSL_LIBC=FALSE \
    -DLIBCXX_HAS_PTHREAD_API=FALSE \
    -DLIBCXX_HAS_WIN32_THREAD_API=TRUE \
    -DLIBCXX_INCLUDE_BENCHMARKS=FALSE \
    -DLIBCXX_INCLUDE_DOCS=FALSE \
    -DLIBCXX_INCLUDE_TESTS=FALSE \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=TRUE \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=FALSE \
    -DLIBCXX_SUPPORTS_NODEFAULTLIBS_FLAG=FALSE \
    -DLIBCXX_SUPPORTS_NOSTDINCXX_FLAG=TRUE \
    -DLIBCXX_USE_COMPILER_RT=TRUE \
    -DLIBCXXABI_ENABLE_ASSERTIONS=FALSE \
    -DLIBCXXABI_ENABLE_EXCEPTIONS=TRUE \
    -DLIBCXXABI_ENABLE_SHARED=FALSE \
    -DLIBCXXABI_ENABLE_STATIC=TRUE \
    -DLIBCXXABI_ENABLE_THREADS=TRUE \
    -DLIBCXXABI_HAS_NOSTDINCXX_FLAG=TRUE \
    -DLIBCXXABI_HAS_WIN32_THREADS_API=TRUE \
    -DLIBCXXABI_INSTALL_LIBRARY=TRUE \
    -DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=FALSE \
    -DLIBCXXABI_USE_COMPILER_RT=TRUE \
    -DLIBCXXABI_USE_LLVM_UNWINDER=TRUE \
    -DLIBCXXABI_USE_SJLJ_EXCEPTIONS=FALSE \
    -DLIBOMP_ENABLE_ASSERTIONS=FALSE \
    -DLIBOMP_HAVE_VERSION_SCRIPT_FLAG=FALSE \
    -DLIBOMPTARGET_BUILD_AMDGCN_BCLIB=FALSE \
    -DLIBOMPTARGET_BUILD_NVPTX_BCLIB=FALSE \
    -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES="${CUDA_GPU_PRIMARY_ARCH},${CUDA_GPU_SECONDARY_ARCH}" \
    -DLIBOMPTARGET_SEARCH_LIBFFI_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DLIBOMPTARGET_SEARCH_LIBFFI_LIBRARIES=`package-get-path ffi SHARED HOST` \
    -DLIBUNWIND_ENABLE_ASSERTIONS=FALSE \
    -DLIBUNWIND_ENABLE_PEDANTIC=FALSE \
    -DLIBUNWIND_ENABLE_SHARED=TRUE \
    -DLIBUNWIND_ENABLE_STATIC=TRUE \
    -DLIBUNWIND_ENABLE_THREADS=TRUE \
    -DLIBUNWIND_HAS_NOSTDINCXX_FLAG=TRUE \
    -DLIBUNWIND_INCLUDE_DOCS=FALSE \
    -DLIBUNWIND_INSTALL_LIBRARY=TRUE \
    -DLIBUNWIND_SUPPORTS_FNO_EXCEPTIONS_FLAG=TRUE \
    -DLIBUNWIND_SUPPORTS_FNO_RTTI_FLAG=TRUE \
    -DLIBUNWIND_SUPPORTS_NODEFAULTLIBS_FLAG=FALSE \
    -DLIBUNWIND_USE_COMPILER_RT=TRUE \
    -DLLD_INCLUDE_TESTS=FALSE \
    -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
    -DLLVM_BUILD_DOCS=FALSE \
    -DLLVM_BUILD_EXAMPLES=FALSE \
    -DLLVM_BUILD_LLVM_DYLIB=FALSE \
    -DLLVM_BUILD_TESTS=FALSE \
    -DLLVM_BUILD_UTILS=TRUE \
    -DLLVM_CCACHE_BUILD=TRUE \
    -DLLVM_DEFAULT_TARGET_TRIPLE=${HOST_4_TRIPLE} \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_BACKTRACES=FALSE \
    -DLLVM_ENABLE_DOXYGEN=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_FFI=TRUE \
    -DLLVM_ENABLE_LIBCXX=TRUE \
    -DLLVM_ENABLE_LLD=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=FALSE \
    -DLLVM_ENABLE_PIC=FALSE \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;flang;libcxx;libcxxabi;libunwind;lld;${EXTRA_PROJECTS}" \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_ENABLE_TERMINFO=FALSE \
    -DLLVM_ENABLE_THREADS=TRUE \
    -DLLVM_ENABLE_UNWIND_TABLES=FALSE \
    -DLLVM_ENABLE_WARNINGS=FALSE \
    -DLLVM_ENABLE_Z3_SOLVER=TRUE \
    -DLLVM_ENABLE_ZLIB=TRUE \
    -DLLVM_HOST_TRIPLE=${HOST_4_TRIPLE} \
    -DLLVM_INCLUDE_BENCHMARKS=FALSE \
    -DLLVM_INCLUDE_DOCS=FALSE \
    -DLLVM_INCLUDE_EXAMPLES=FALSE \
    -DLLVM_INCLUDE_GO_TESTS=FALSE \
    -DLLVM_INCLUDE_TESTS=FALSE \
    -DLLVM_INCLUDE_UTILS=TRUE \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=FALSE \
    -DLLVM_LINK_LLVM_DYLIB=FALSE \
    -DLLVM_OPTIMIZED_TABLEGEN=TRUE \
    -DLLVM_POLLY_LINK_INTO_TOOLS=TRUE \
    -DLLVM_TARGETS_TO_BUILD="all" \
    -DLLVM_TOOL_LLVM_C_TEST_BUILD=FALSE \
    -DLLVM_USE_HOST_TOOLS=TRUE \
    -DLLVM_USE_NEWPM=FALSE \
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=TRUE \
    -DLLVM_USE_RELATIVE_PATHS_IN_FILES=TRUE \
    -DLLVM_VERSION_SUFFIX="-${PACKAGE_BASE_NAME}" \
    -DLLVM_Z3_INSTALL_DIR=${PACKAGE_PLATFORM_SYSROOT} \
    -DMLIR_ENABLE_BINDINGS_PYTHON=TRUE \
    -DMLIR_ENABLE_CUDA_RUNNER=FALSE \
    -DMLIR_ENABLE_SPIRV_CPU_RUNNER=TRUE \
    -DMLIR_ENABLE_VULKAN_RUNNER=TRUE \
    -DOpenCL_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DOpenCL_LIBRARY=`package-get-path OpenCL SHARED HOST` \
    -DPython3_EXECUTABLE=${PYTHON} \
    -DPython3_ROOT_DIR=${PACKAGE_PREFIX} \
    -DPOLLY_ENABLE_GPGPU_CODEGEN=FALSE \
    -DPYTHON_HOME=${PACKAGE_PREFIX} \
    -DSANITIZER_CXX_ABI=libc++ \
    -DVulkan_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DVulkan_LIBRARY=`package-get-path vulkan-1 SHARED HOST` \
    -DZ3_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DZ3_LIBRARIES=`package-get-path z3 SHARED HOST` \
    -DZ3_RETURNCODE=0 \
    -DZ3_RETURNCODE__TRYRUN_OUTPUT=4.8.13 \
    -DZLIB_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DZLIB_LIBRARY_RELEASE=`package-get-path zlib SHARED HOST`
