#!/bin/bash

set -e

# Set all environment vars
export SOURCE_PACKAGE_NAME=llvm-project
export SOURCE_PACKAGE_VERSION=13

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-elfutils-0-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-libffi-3-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-python-3-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-z3-4-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-zlib-1-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
export LLVM_NATIVE_STAGE_ROOT=${LLVM_NATIVE_STAGE_ROOT:-${STAGE_ROOT_BASE}/${QUALIFIED_LLVM_PATH}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}}

CUDA_GPU_PRIMARY_ARCH=61
CUDA_GPU_SECONDARY_ARCH=35
EXTRA_PROJECTS=${EXTRA_PROJECTS:-"clang-tools-extra;libclc;mlir;openmp;parallel-libs;polly;pstl"}

# Invoke one-shot template for cmake/install
function package-install-completion-callback() {
    ${LN} -sf \
          lld \
          ${STAGE_ROOT}/bin/ld64.lld
    package-rsync -ax \
                  ${STAGE_ROOT}/bin/llvm-as* \
                  ${STAGE_ROOT}/bin/llvm-dlltool* \
                  ${STAGE_ROOT}/bin/llvm-install-name-tool* \
                  ${STAGE_ROOT}/bin/llvm-link* \
                  ${STAGE_ROOT}/bin/llvm-lipo* \
                  ${STAGE_ROOT}/bin/llvm-mt* \
                  ${STAGE_ROOT}/bin/llvm-pdbutil* \
                  ${STAGE_ROOT}/bin/llvm-readelf* \
                  ${STAGE_ROOT}/bin/llvm-readobj* \
                  ${INSTALL_PREFIX}/bin/

    # remove libcxx as it is superceded by llvm-project.
    HOST_PROCESSOR=`${ECHO} ${HOST_PROCESSOR} | ${TR} _ -`
    PACKAGES_TO_MANAGE=( 'libcxx-13' 'HOST' )

    PACKAGE_ACTION=UNINSTALL \
    deb-package-mgmt ${PACKAGES_TO_MANAGE[@]}
}

function tool-install-invocation() {
    INSTALL_TARGET="tools/clang/install" \
    tool-install

    INSTALL_TARGET="projects/compiler-rt/install tools/lld/install tools/mlir/install" \
    tool-install

    NUM_PROCESSORS=`awk '/MemTotal/ { printf "%d", $2/(1024*1024*5) }' /proc/meminfo` \
    INSTALL_TARGET=tools/flang/install \
    tool-install

    tool-install
}

if [ "${HOST_PROCESSOR}" = "aarch64" ]; then
    COMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG=FALSE
else
    COMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG=TRUE
fi

export PATH=${PATH}:${LLVM_NATIVE_STAGE_ROOT}/bin

CMAKE_CONFIGURE_ROOT=${SOURCE_ROOT}/llvm \
CXX_STANDARD=17 \
DISABLE_TOOL_BUILD=TRUE \
PACKAGE_INSTALL_COMPLETION_CALLBACK=package-install-completion-callback \
TOOL_INSTALL_INVOCATION=tool-install-invocation \
package-cmake-install-archive \
    -DBUILD_SHARED_LIBS=FALSE \
    -DCLANG_DEFAULT_CXX_STDLIB=libc++ \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_STD_C=gnu2x \
    -DCLANG_DEFAULT_STD_CXX=gnucxx20 \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_ENABLE_ARCMT=TRUE \
    -DCLANG_ENABLE_STATIC_ANALYZER=TRUE \
    -DCLANG_INCLUDE_DOCS=FALSE \
    -DCLANG_INCLUDE_TESTS=FALSE \
    -DCLANG_LINK_CLANG_DYLIB=TRUE \
    -DCLANG_OPENMP_NVPTX_DEFAULT_ARCH=sm_${CUDA_GPU_PRIMARY_ARCH} \
    -DCLANG_TOOL_ARCMT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_CLANG_IMPORT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_CLANG_REFACTOR_TEST_BUILD=FALSE \
    -DCLANG_TOOL_C_ARCMT_TEST_BUILD=FALSE \
    -DCLANG_TOOL_C_INDEX_TEST_BUILD=FALSE \
    -DCMAKE_LIPO=${BINDIR}/llvm-lipo \
    -DCOMPILER_RT_BUILD_LIBFUZZER=FALSE \
    -DCOMPILER_RT_BUILD_MEMPROF=FALSE \
    -DCOMPILER_RT_BUILD_PROFILE=FALSE \
    -DCOMPILER_RT_BUILD_SANITIZERS=FALSE \
    -DCOMPILER_RT_BUILD_XRAY=FALSE \
    -DCOMPILER_RT_CAN_EXECUTE_TESTS=FALSE \
    -DCOMPILER_RT_DEFAULT_TARGET_TRIPLE=${HOST_TRIPLE} \
    -DCOMPILER_RT_EXCLUDE_ATOMIC_BUILTIN=FALSE \
    -DCOMPILER_RT_HAS_ATOMIC_KEYWORD=TRUE \
    -DCOMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG=${COMPILER_RT_HAS_FVISIBILITY_HIDDEN_FLAG} \
    -DCOMPILER_RT_HAS_NODEFAULTLIBS_FLAG=FALSE \
    -DCOMPILER_RT_INCLUDE_TESTS=FALSE \
    -DCROSS_TOOLCHAIN_FLAGS_NATIVE="-DCMAKE_C_COMPILER=${BINDIR}/sclang;-DCMAKE_CXX_COMPILER=${BINDIR}/sclang++" \
    -DDARWIN_macosx_OVERRIDE_SDK_VERSION=11 \
    -DDARWIN_osx_SYSROOT=${SOURCE_ROOT_BASE}/macosx-11 \
    -DENABLE_EXPERIMENTAL_NEW_PASS_MANAGER=TRUE \
    -DFFI_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DFFI_INCLUDE_PATH=${PACKAGE_PREFIX}/include \
    -DFFI_LIBRARY_DIR=${PACKAGE_PREFIX}/lib \
    -DFFI_LIBRARY_PATH=`package-get-path ffi SHARED HOST` \
    -DHAVE_INOTIFY=TRUE \
    -DHAVE_LIBCXXABI=TRUE \
    -DHAVE_LIBUNWIND=TRUE \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_CXX_ABI_INCLUDE_PATHS=${PACKAGE_PREFIX}/include/c++/v1 \
    -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=FALSE \
    -DLIBCXX_ENABLE_ASSERTIONS=FALSE \
    -DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=TRUE \
    -DLIBCXX_ENABLE_EXCEPTIONS=TRUE \
    -DLIBCXX_ENABLE_FILESYSTEM=TRUE \
    -DLIBCXX_ENABLE_NEW_DELETE_DEFINITIONS=FALSE \
    -DLIBCXX_ENABLE_PARALLEL_ALGORITHMS=TRUE \
    -DLIBCXX_ENABLE_RTTI=TRUE \
    -DLIBCXX_ENABLE_SHARED=TRUE \
    -DLIBCXX_ENABLE_STATIC=TRUE \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=TRUE \
    -DLIBCXX_ENABLE_THREADS=TRUE \
    -DLIBCXX_HAS_ATOMIC_LIB=FALSE \
    -DLIBCXX_HAS_MUSL_LIBC=TRUE \
    -DLIBCXX_HAS_PTHREAD_API=TRUE \
    -DLIBCXX_HAS_WIN32_THREAD_API=FALSE \
    -DLIBCXX_INCLUDE_BENCHMARKS=FALSE \
    -DLIBCXX_INCLUDE_DOCS=FALSE \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_SHARED_LIBRARY=TRUE \
    -DLIBCXX_STATICALLY_LINK_ABI_IN_STATIC_LIBRARY=TRUE \
    -DLIBCXX_SUPPORTS_NODEFAULTLIBS_FLAG=TRUE \
    -DLIBCXX_SUPPORTS_NOSTDINCXX_FLAG=TRUE \
    -DLIBCXX_USE_COMPILER_RT=TRUE \
    -DLIBCXXABI_ENABLE_ASSERTIONS=FALSE \
    -DLIBCXXABI_ENABLE_EXCEPTIONS=TRUE \
    -DLIBCXXABI_ENABLE_SHARED=FALSE \
    -DLIBCXXABI_ENABLE_STATIC=TRUE \
    -DLIBCXXABI_ENABLE_THREADS=TRUE \
    -DLIBCXXABI_HAS_NOSTDINCXX_FLAG=TRUE \
    -DLIBCXXABI_INSTALL_LIBRARY=TRUE \
    -DLIBCXXABI_STATICALLY_LINK_UNWINDER_IN_SHARED_LIBRARY=FALSE \
    -DLIBCXXABI_USE_COMPILER_RT=TRUE \
    -DLIBCXXABI_USE_LLVM_UNWINDER=TRUE \
    -DLIBOMP_ENABLE_ASSERTIONS=FALSE \
    -DLIBOMP_USE_VERSION_SYMBOLS=FALSE \
    -DLIBOMPTARGET_DEP_LIBELF_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DLIBOMPTARGET_DEP_LIBELF_LIBRARIES=`package-get-path elf SHARED HOST` \
    -DLIBOMPTARGET_NVPTX_ALTERNATE_HOST_COMPILER=gcc-8 \
    -DLIBOMPTARGET_NVPTX_COMPUTE_CAPABILITIES="${CUDA_GPU_PRIMARY_ARCH},${CUDA_GPU_SECONDARY_ARCH}" \
    -DLIBOMPTARGET_SEARCH_LIBFFI_INCLUDE_DIRS=${PACKAGE_PREFIX}/include \
    -DLIBOMPTARGET_SEARCH_LIBFFI_LIBRARY_DIRS=${PACKAGE_PREFIX}/lib \
    -DLIBUNWIND_ENABLE_ASSERTIONS=FALSE \
    -DLIBUNWIND_ENABLE_PEDANTIC=FALSE \
    -DLIBUNWIND_ENABLE_SHARED=TRUE \
    -DLIBUNWIND_ENABLE_STATIC=TRUE \
    -DLIBUNWIND_ENABLE_THREADS=TRUE \
    -DLIBUNWIND_HAS_NOSTDINCXX_FLAG=TRUE \
    -DLIBUNWIND_INCLUDE_DOCS=FALSE \
    -DLIBUNWIND_INSTALL_LIBRARY=TRUE \
    -DLIBUNWIND_SUPPORTS_FNO_EXCEPTIONS_FLAG=TRUE \
    -DLIBUNWIND_SUPPORTS_FNO_RTTI_FLAG=TRUE \
    -DLIBUNWIND_SUPPORTS_NODEFAULTLIBS_FLAG=TRUE \
    -DLIBUNWIND_USE_COMPILER_RT=TRUE \
    -DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
    -DLLVM_BUILD_DOCS=FALSE \
    -DLLVM_BUILD_EXAMPLES=FALSE \
    -DLLVM_BUILD_LLVM_DYLIB=TRUE \
    -DLLVM_BUILD_TESTS=FALSE \
    -DLLVM_BUILD_UTILS=TRUE \
    -DLLVM_DEFAULT_TARGET_TRIPLE=${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS} \
    -DLLVM_ENABLE_ASSERTIONS=FALSE \
    -DLLVM_ENABLE_DOXYGEN=FALSE \
    -DLLVM_ENABLE_EH=TRUE \
    -DLLVM_ENABLE_FFI=TRUE \
    -DLLVM_ENABLE_LIBCXX=FALSE \
    -DLLVM_ENABLE_LLD=TRUE \
    -DLLVM_ENABLE_LTO=${ENABLE_FLTO} \
    -DLLVM_ENABLE_PIC=TRUE \
    -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;flang;libcxx;libcxxabi;libunwind;lld;${EXTRA_PROJECTS}" \
    -DLLVM_ENABLE_RTTI=TRUE \
    -DLLVM_ENABLE_TERMINFO=FALSE \
    -DLLVM_ENABLE_THREADS=TRUE \
    -DLLVM_ENABLE_UNWIND_TABLES=FALSE \
    -DLLVM_ENABLE_WARNINGS=FALSE \
    -DLLVM_ENABLE_Z3_SOLVER=TRUE \
    -DLLVM_ENABLE_ZLIB=TRUE \
    -DLLVM_HOST_TRIPLE=${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS} \
    -DLLVM_INCLUDE_BENCHMARKS=FALSE \
    -DLLVM_INCLUDE_DOCS=FALSE \
    -DLLVM_INCLUDE_EXAMPLES=FALSE \
    -DLLVM_INCLUDE_GO_TESTS=FALSE \
    -DLLVM_INCLUDE_TESTS=FALSE \
    -DLLVM_INCLUDE_UTILS=TRUE \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=TRUE \
    -DLLVM_LINK_LLVM_DYLIB=TRUE \
    -DLLVM_OPTIMIZED_TABLEGEN=TRUE \
    -DLLVM_POLLY_LINK_INTO_TOOLS=TRUE \
    -DLLVM_TARGETS_TO_BUILD="AArch64;AMDGPU;ARM;Hexagon;NVPTX;PowerPC;RISCV;WebAssembly;X86" \
    -DLLVM_TOOL_LLVM_C_TEST_BUILD=FALSE \
    -DLLVM_USE_HOST_TOOLS=TRUE \
    -DLLVM_USE_NEWPM=FALSE \
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=TRUE \
    -DLLVM_USE_RELATIVE_PATHS_IN_FILES=TRUE \
    -DLLVM_VERSION_SUFFIX="-${PACKAGE_BASE_NAME}" \
    -DLLVM_Z3_INSTALL_DIR=${SYSROOT} \
    -DMLIR_CUDA_RUNNER_ENABLED=FALSE \
    -DMLIR_VULKAN_RUNNER_ENABLED=TRUE \
    -DMLIR_LINALG_ODS_GEN_EXE=${LLVM_NATIVE_STAGE_ROOT}/bin/mlir-linalg-ods-gen \
    -DMLIR_LINALG_ODS_YAML_GEN_EXE=${LLVM_NATIVE_STAGE_ROOT}/bin/mlir-linalg-ods-yaml-gen \
    -DMLIR_TABLEGEN=${LLVM_NATIVE_STAGE_ROOT}/bin/mlir-tblgen \
    -DPython3_EXECUTABLE=${PYTHON} \
    -DPOLLY_ENABLE_GPGPU_CODEGEN=TRUE \
    -DSANITIZER_CXX_ABI=libcxxabi \
    -DZ3_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DZ3_LIBRARIES=`package-get-path z3 SHARED HOST` \
    -DZ3_RETURNCODE=0 \
    -DZ3_RETURNCODE__TRYRUN_OUTPUT=4.8.8 \
    -DZLIB_INCLUDE_DIR=${PACKAGE_PREFIX}/include \
    -DZLIB_LIBRARY_RELEASE=`package-get-path z SHARED HOST`
