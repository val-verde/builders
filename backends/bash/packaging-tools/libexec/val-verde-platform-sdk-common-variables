#!/bin/bash

set -e

# Source common api
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-api

# builder configuration defaults
BASE_DIRECTORY=$(echo "${PACKAGE_ROOT}" | cut -d "/" -f2)
DEPENDS=${DEPENDS:=''}
GETCONF=${GETCONF:-/usr/bin/getconf}
NUM_PROCESSORS=${NUM_PROCESSORS:-"$(($(${GETCONF} _NPROCESSORS_ONLN) + 1))"}
TARGETS=${TARGETS:-install}
VERSION=${VERSION:='1.0.0'}
SOURCE_FILE=${SOURCE_FILE:-/usr/share/${VAL_VERDE_GH_TEAM}-sources.json}

# global path variables
PACKAGE_PLATFORM_SDKROOT=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk
SOURCE_ROOT_BASE=${PACKAGE_PLATFORM_SDKROOT}/sources
TAR_ROOT_BASE=${PACKAGE_PLATFORM_SDKROOT}/tar-archives
BUILD_PACKAGE_USR_PREFIX=${BUILD_PACKAGE_USR_PREFIX:-usr}
PACKAGE_USR_PREFIX=${PACKAGE_USR_PREFIX:-usr}

# global package configuration variables
# 'build' configuration
if [ "${BUILD_OS}" = "macos" ] &&
   [ "${BUILD_PROCESSOR}" = "aarch64" ]; then
   BUILD_TRIPLE_PROCESSOR=arm64
else
   BUILD_TRIPLE_PROCESSOR=${BUILD_PROCESSOR}
fi

export BUILD_TRIPLE=${BUILD_TRIPLE_PROCESSOR}-${BUILD_KERNEL}-${BUILD_OS}
export BUILD_4_TRIPLE=${BUILD_TRIPLE_PROCESSOR}-${BUILD_ENV:-unknown}-${BUILD_KERNEL}-${BUILD_OS}
BUILD_PACKAGE_PLATFORM_SYSROOT=${PACKAGE_PLATFORM_SDKROOT}/${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_CPU}/sysroot
export BUILD_PACKAGE_PREFIX=${BUILD_PACKAGE_PREFIX:-${BUILD_PACKAGE_PLATFORM_SYSROOT}/${BUILD_PACKAGE_USR_PREFIX}}
export BUILD_SYSROOT=${BUILD_SYSROOT:-${BUILD_PACKAGE_PLATFORM_SYSROOT}}

# 'build' tools
BINDIR=${BINDIR:-${BUILD_PACKAGE_PREFIX}/bin}
export APT=${APT:-${BINDIR}/apt}
export AUTOGEN=${AUTOGEN:-${BINDIR}/autogen}
export AUTORECONF=${AUTORECONF:-${BINDIR}/autoreconf}
export AUTOUPDATE=${AUTOUPDATE:-${BINDIR}/autoupdate}
export BASENAME=${BASENAME:-${BINDIR}/basename}
export BASH=${BASH:-${BINDIR}/bash}
export BISON=${BISON:-${BINDIR}/bison}
export CAT=${CAT:-${BINDIR}/cat}
export CHMOD=${CHMOD:-${BINDIR}/chmod}
export CMP=${CMP:-/usr/bin/cmp}
export CP=${CP:-${BINDIR}/cp}
export CURL=${CURL:-${BINDIR}/curl}
export CUT=${CUT:-${BINDIR}/cut}
export DATE=${DATE:-${BINDIR}/date}
export DF=${DF:-${BINDIR}/df}
export DIFF=${DIFF:-/usr/bin/diff}
export DNF=${DNF:-${BINDIR}/dnf}
export DPKG=${DPKG:-${BINDIR}/dpkg}
export ECHO=${ECHO:-${BINDIR}/echo}
export ENV=${ENV:-${BINDIR}/env}
export EXPR=${EXPR:-${BINDIR}/expr}
export FALSE=${FALSE:-${BINDIR}/false}
export FILE=${FILE:-${BINDIR}/file}
export FIND=${FIND:-${BINDIR}/find}
export FLOCK=${FLOCK:-/usr/bin/flock}
export GAWK=${GAWK:-${BINDIR}/gawk}
export GETTEXT=${GETTEXT:-${BINDIR}/gettext}
export GIT=${GIT:-${BINDIR}/git}
export GPERF=${GPERF:-${BINDIR}/gperf}
export GREP=${GREP:-${BINDIR}/grep}
export HEAD=${HEAD:-${BINDIR}/head}
export HELP2MAN=${HELP2MAN:-${BINDIR}/help2man}
export JAVA=${JAVA:-${BINDIR}/java}
export JAVAC=${JAVAC:-${BINDIR}/javac}
export LESS=${LESS:-${BINDIR}/less}
export LSB_RELEASE=${LSB_RELEASE:-/usr/bin/lsb_release}
export INSTALL=${INSTALL:-${BINDIR}/install}
export LN=${LN:-${BINDIR}/ln}
export LS=${LS:-${BINDIR}/ls}
export M4=${M4:-${BINDIR}/m4}
export MAKEINFO=${MAKEINFO:-${BINDIR}/makeinfo}
export MIG=${MKDIR:-${BINDIR}/mig}
export MKDIR=${MKDIR:-${BINDIR}/mkdir}
export MKTEMP=${MKTEMP:-${BINDIR}/mktemp}
export MSGFMT=${MSGFMT:-${BINDIR}/msgfmt}
export MV=${MV:-${BINDIR}/mv}
export NICE=${NICE:-${BINDIR}/nice}
export PATCH=${PATCH:-/usr/bin/patch}
export PERL=${PERL:-${BINDIR}/perl}
export PYTHON=${PYTHON:-${BINDIR}/python3}
export READLINK=${READLINK:-${BINDIR}/readlink}
export REALPATH=${REALPATH:-${BINDIR}/realpath}
export RM=${RM:-"${BINDIR}/rm -f"}
export RMDIR=${RMDIR:-${BINDIR}/rmdir}
export RPM=${RPM:-${BINDIR}/rpm}
export RSYNC=${RSYNC:-${BINDIR}/rsync}
export SED=${SED:-${BINDIR}/sed}
export SORT=${SORT:-${BINDIR}/sort}
export SSH=${SSH:-${BINDIR}/ssh}
export STAT=${STAT:-${BINDIR}/stat}
export TAIL=${TAIL:-${BINDIR}/tail}
export TAR=${TAR:-${BINDIR}/tar}
export TEE=${TEE:-${BINDIR}/tee}
export TOUCH=${TOUCH:-${BINDIR}/touch}
export TR=${TR:-${BINDIR}/tr}
export TRUE=${TRUE:-${BINDIR}/true}
export UNAME=${UNAME:-${BINDIR}/uname}
export UNIQ=${UNIQ:-${BINDIR}/uniq}
export WC=${WC:-${BINDIR}/wc}
export WGET=${WGET:-${BINDIR}/wget}
export WHICH=${WHICH:-${BINDIR}/which}
export XARGS=${XARGS:-${BINDIR}/xargs}
export XZ=${XZ:-${BINDIR}/xz}

# [G]UNZIP and [G]ZIP environment variables are used as options to the tools
# and should not be exported
GUNZIP=${GUNZIP:-${BINDIR}/gunzip}
GZIP=${GZIP:-${BINDIR}/gzip}
UNZIP=${UNZIP:-${BINDIR}/unzip}
ZIP=${ZIP:-${BINDIR}/zip}

# Establish base architecture for package-builder
# Assumes that deb is the default choice for archive tool on debian
# and rpm, the defualt choice on fedora distributions.
if [ "$(package-determine-os-distribution)" = "ubuntu" ]; then
    PACKAGE_ARCH=all
elif [ "$(package-determine-os-distribution)" = "fedora" ]; then
    PACKAGE_ARCH=noarch
fi

# 'build' paths
export DPKG_ADMINDIR=/var/lib/dpkg
export LD_LIBRARY_PATH=${BUILD_PACKAGE_PREFIX}/lib
export NODE_PATH=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/web
export PATH=${BUILD_PACKAGE_PREFIX}/bin:${PATH}
export TEMPDIR=${TEMPDIR:-/tmp}
TEMP_ROOT_BASE=${TEMPDIR}/org.${VAL_VERDE_GH_TEAM}
ARCHIVE_ROOT_BASE=${TEMP_ROOT_BASE}/archiving

# 'host' configuration
if [ "${HOST_OS}" = "macos" ] &&
   [ "${HOST_PROCESSOR}" = "aarch64" ]; then
   HOST_TRIPLE_PROCESSOR=arm64
else
   HOST_TRIPLE_PROCESSOR=${HOST_PROCESSOR}
fi

export HOST_TRIPLE=${HOST_TRIPLE:-${HOST_TRIPLE_PROCESSOR}-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
export HOST_4_TRIPLE=${HOST_4_TRIPLE:-${HOST_TRIPLE_PROCESSOR}-${HOST_ENV:-unknown}-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
PACKAGE_PLATFORM_SYSROOT=${PACKAGE_PLATFORM_SDKROOT}/${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU}/sysroot
export PACKAGE_PREFIX=${PACKAGE_PREFIX:-${PACKAGE_PLATFORM_SYSROOT}/${PACKAGE_USR_PREFIX}}
export SYSROOT=${SYSROOT:-${PACKAGE_PLATFORM_SYSROOT}}