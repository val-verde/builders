#!/bin/bash

set -e

# builder configuration defaults
BASE_DIRECTORY=$(echo "${PACKAGE_ROOT}" | cut -d "/" -f2)
DEPENDS=${DEPENDS:=''}
GETCONF=${GETCONF:-/usr/bin/getconf}
NUM_PROCESSORS=${NUM_PROCESSORS:-"$(($(${GETCONF} _NPROCESSORS_ONLN) + 1))"}
TARGETS=${TARGETS:-install}
VERSION=${VERSION:='1.0.0'}
SOURCE_FILE=${SOURCE_FILE:-/usr/share/${VAL_VERDE_GH_TEAM}-sources.json}

# global path variables
PACKAGE_PLATFORM_SDKROOT=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk
SOURCE_ROOT_BASE=${PACKAGE_PLATFORM_SDKROOT}/sources
TAR_ROOT_BASE=${PACKAGE_PLATFORM_SDKROOT}/tar-archives
BUILD_PACKAGE_USR_PREFIX=${BUILD_PACKAGE_USR_PREFIX:-usr}
PACKAGE_USR_PREFIX=${PACKAGE_USR_PREFIX:-usr}
DEB_PATH=${BUILD_DEB_PATH}

# global package configuration variables
PACKAGE_ARCH=all
PACKAGE_CLASS=deb

# 'build' configuration
export BUILD_TRIPLE=${BUILD_PROCESSOR}-${BUILD_KERNEL}-${BUILD_OS}
export BUILD_4_TRIPLE=${BUILD_PROCESSOR}-${BUILD_ENV:-unknown}-${BUILD_KERNEL}-${BUILD_OS}

BUILD_PACKAGE_PLATFORM_SYSROOT=${PACKAGE_PLATFORM_SDKROOT}/${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}/sysroot
export BUILD_PACKAGE_PREFIX=${BUILD_PACKAGE_PREFIX:-${BUILD_PACKAGE_PLATFORM_SYSROOT}/${BUILD_PACKAGE_USR_PREFIX}}
export BUILD_SYSROOT=${BUILD_SYSROOT:-${BUILD_PACKAGE_PLATFORM_SYSROOT}}

# 'build' tools
BINDIR=${BINDIR:-${BUILD_PACKAGE_PREFIX}/bin}
export APT=${APT:-${BINDIR}/apt}
export AUTOGEN=${AUTOGEN:-${BINDIR}/autogen}
export AUTORECONF=${AUTORECONF:-${BINDIR}/autoreconf}
export AUTOUPDATE=${AUTOUPDATE:-${BINDIR}/autoupdate}
export BASENAME=${BASENAME:-${BINDIR}/basename}
export BASH=${BASH:-${BINDIR}/bash}
export BISON=${BISON:-${BINDIR}/bison}
export CAT=${CAT:-${BINDIR}/cat}
export CHMOD=${CHMOD:-${BINDIR}/chmod}
export CMP=${CMP:-/usr/bin/cmp}
export CP=${CP:-${BINDIR}/cp}
export CURL=${CURL:-${BINDIR}/curl}
export CUT=${CUT:-${BINDIR}/cut}
export DATE=${DATE:-${BINDIR}/date}
export DF=${DF:-${BINDIR}/df}
export DIFF=${DIFF:-/usr/bin/diff}
export DNF=${DIFF:-${BINDIR}/dnf}
export DPKG=${DPKG:-${BINDIR}/dpkg}
export ECHO=${ECHO:-${BINDIR}/echo}
export EXPR=${EXPR:-${BINDIR}/expr}
export FILE=${FILE:-${BINDIR}/file}
export FIND=${FIND:-${BINDIR}/find}
export FLOCK=${FLOCK:-/usr/bin/flock}
export GAWK=${GAWK:-${BINDIR}/gawk}
export GETTEXT=${GETTEXT:-${BINDIR}/gettext}
export GIT=${GIT:-${BINDIR}/git}
export GPERF=${GPERF:-${BINDIR}/gperf}
export GREP=${GREP:-${BINDIR}/grep}
export HEAD=${HEAD:-${BINDIR}/head}
export HELP2MAN=${HELP2MAN:-${BINDIR}/help2man}
export JAVA=${JAVA:-${BINDIR}/java}
export JAVAC=${JAVAC:-${BINDIR}/javac}
export LESS=${LESS:-${BINDIR}/less}
export LSB_RELEASE=${LSB_RELEASE:-/usr/bin/lsb_release}
export INSTALL=${INSTALL:-${BINDIR}/install}
export LN=${LN:-${BINDIR}/ln}
export LS=${LS:-${BINDIR}/ls}
export M4=${M4:-${BINDIR}/m4}
export MAKEINFO=${MAKEINFO:-${BINDIR}/makeinfo}
export MIG=${MKDIR:-${BINDIR}/mig}
export MKDIR=${MKDIR:-${BINDIR}/mkdir}
export MKTEMP=${MKTEMP:-${BINDIR}/mktemp}
export MV=${MV:-${BINDIR}/mv}
export NICE=${NICE:-${BINDIR}/nice}
export PATCH=${PATCH:-/usr/bin/patch}
export PERL=${PERL:-${BINDIR}/perl}
export PYTHON=${PYTHON:-${BINDIR}/python3}
export PYTHON_VERSION=${PYTHON_VERSION:-3.9}
export READLINK=${READLINK:-${BINDIR}/readlink}
export RM=${RM:-"${BINDIR}/rm -f"}
export RMDIR=${RMDIR:-${BINDIR}/rmdir}
export RPM=${RPM:-${BINDIR}/rpm}
export RSYNC=${RSYNC:-${BINDIR}/rsync}
export SED=${SED:-${BINDIR}/sed}
export SORT=${SORT:-${BINDIR}/sort}
export SSH=${SSH:-${BINDIR}/ssh}
export STAT=${STAT:-${BINDIR}/stat}
export TAIL=${TAIL:-${BINDIR}/tail}
export TAR=${TAR:-${BINDIR}/tar}
export TEE=${TEE:-${BINDIR}/tee}
export TOUCH=${TOUCH:-${BINDIR}/touch}
export TR=${TR:-${BINDIR}/tr}
export UNAME=${UNAME:-${BINDIR}/uname}
export UNIQ=${UNIQ:-${BINDIR}/uniq}
export WC=${WC:-${BINDIR}/wc}
export WGET=${WGET:-${BINDIR}/wget}
export WHICH=${WHICH:-${BINDIR}/which}
export XARGS=${XARGS:-${BINDIR}/xargs}
export XZ=${XZ:-${BINDIR}/xz}

# [G]UNZIP and [G]ZIP environment variables are used as options to the tools
# and should not be exported
GUNZIP=${GUNZIP:-${BINDIR}/gunzip}
GZIP=${GZIP:-${BINDIR}/gzip}
UNZIP=${UNZIP:-${BINDIR}/unzip}
ZIP=${ZIP:-${BINDIR}/zip}

# 'build' paths
export DPKG_ADMINDIR=/var/lib/dpkg
export LD_LIBRARY_PATH=${BUILD_PACKAGE_PREFIX}/lib
export NODE_PATH=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/web
export PATH=${BUILD_PACKAGE_PREFIX}/bin:${PATH}
export TEMPDIR=${TEMPDIR:-/tmp}
TEMP_ROOT_BASE=${TEMPDIR}/org.${VAL_VERDE_GH_TEAM}
export QUALIFIED_LLVM_PATH=llvm-project-13

# 'host' configuration
export HOST_TRIPLE=${HOST_TRIPLE:-${HOST_PROCESSOR}-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
export HOST_4_TRIPLE=${HOST_4_TRIPLE:-${HOST_PROCESSOR}-${HOST_ENV:-unknown}-${HOST_KERNEL}-${HOST_OS}${HOST_OS_API_LEVEL}}
PACKAGE_PLATFORM_SYSROOT=${PACKAGE_PLATFORM_SDKROOT}/${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH}/sysroot
export PACKAGE_PREFIX=${PACKAGE_PREFIX:-${PACKAGE_PLATFORM_SYSROOT}/${PACKAGE_USR_PREFIX}}
export SYSROOT=${SYSROOT:-${PACKAGE_PLATFORM_SYSROOT}}

function package-apt-install() {
    package-apt-tool install -y "${@}"
}

function package-apt-remove() {
    package-apt-tool remove -y "${@}"
    package-apt-tool autoremove -y
    package-apt-tool autoclean -y
}

function package-apt-tool() {
    ${APT} ${@} > /dev/null
}

function package-dpkg-build() {
    package-dpkg-tool build "${@}"
}

function package-dpkg-install() {
    package-dpkg-tool install "${@}"
}

function package-dpkg-remove() {
    package-dpkg-tool remove "${@}"
}

function package-dpkg-tool() {
    ${DPKG} --${@}  > ${STAGE_ROOT}/builder-dpkg-${1}.log
}

function package-git-add() {
    package-git-tool add "${@}"
}

function package-git-clone() {
    DEPTH=${DEPTH:-1}
    GIT_BRANCH=${1}
    TARGET_ROOT=${TARGET_ROOT:-${SOURCE_ROOT}}

    package-push-directory /sources
        if [ -d "${TARGET_ROOT}" ]; then
            ${RM} -rf ${TARGET_ROOT}
        fi

        if [ "${RETAIN_SOURCE}" != 'true' ]; then
            DEPTH_CMD="--depth=${DEPTH}"
        fi

        package-git-tool clone ${GIT_URL} \
                               --branch ${GIT_BRANCH} \
                               --single-branch \
                               ${DEPTH_CMD} \
                               ${TARGET_ROOT}

    package-pop-directory
}

function package-git-commit() {
    package-git-tool commit "${@}"
}

function package-git-init() {
    package-git-tool init "${@}"
}

function package-git-submodule() {
    package-git-tool init "${@}"
}

function package-git-tool() {
    failed=false
    TOOL_LOG=${STAGE_ROOT}/builder-git-${1} \
    tool-log ${GIT} "${@}" || failed=true

    while [ "${failed}" = "true" ]; do
        failed=false
        TOOL_LOG=${STAGE_ROOT}/builder-git-${1} \
        tool-log ${GIT} "${@}" || failed=true
    done
}

function package-major-version() {
    MAJOR_VERSION=`echo "${SOURCE_PACKAGE_VERSION}" | cut -d "." -f1`
    echo ${MAJOR_VERSION}
}

function package-push-directory() {
    pushd ${@} > /dev/null
}

function package-pop-directory() {
    popd ${@} > /dev/null
}

function package-rsync() {
    ${RSYNC} ${@} > ${STAGE_ROOT}/builder-rsync.log
}

function package-tar() {
    ${TAR} ${@} > ${STAGE_ROOT}/builder-untar.log
}

function package-unzip() {
    ${UNZIP} ${@} > ${STAGE_ROOT}/builder-unzip.log
}

function package-wget() {
    ${WGET} ${@} 2> ${STAGE_ROOT}/builder-wget.log
}

function package-zip() {
    ${ZIP} ${@} > ${STAGE_ROOT}/builder-zip.log
}

function tool-log() {
    if [ -z "${DISABLE_TOOL_LOG}" ]; then
        "${@}" > ${TOOL_LOG}.log \
               2> ${TOOL_LOG}-stderr.log
    else
        "${@}"
    fi
}
