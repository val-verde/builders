#!/bin/bash

set -e

DEB_PATH=${SOURCE_DEB_PATH}

# Source deb packaging helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api

# Source package retrieval utils
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-fetch-utils

function invoke-fetch() {
    SEARCH_INPUT=${SOURCE_DEB_PATH}/${PACKAGE_NAME}.deb
    if [ -f "${SEARCH_INPUT}" ]; then
        FILE_EXISTS='true'
    else
        FILE_EXISTS='false'
    fi
}

function build-install-git-source-package() {
    # Set up paths and dirs
    prepare-source-base

    # Check if the source deb exists
    invoke-fetch

    if [ "${FILE_EXISTS}" = 'true' ]; then
        ${ECHO} -e "    Skipping source build: \e[1;32m${PACKAGE_NAME}\e[0m"
    else
        # Print source builder context
        emit-source-builder-context

        # Set up stage root for source build
        prepare-stage-root

        GIT_URL=${PACKAGE_URL} \
        TARGET_ROOT=${INSTALL_PREFIX} \
        RETAIN_SOURCE=${RETAIN_SOURCE} \
        package-git-clone ${SOURCE_BRANCH}

        package-push-directory ${INSTALL_PREFIX}
            package-git-tool submodule init
            package-git-tool submodule update
        package-pop-directory

        # Prepare source root
        package-push-directory ${INSTALL_PREFIX}
            ${RM} -rf .git*
            ${RM} -rf "^.git*"
            package-git-init
            package-git-add -A
            package-git-commit -m "Val verde source base commit."
        package-pop-directory

        # Build the source deb package
        deb-package-build

        # Clean up
        ${RM} -rf ${INSTALL_ROOT}
        ${ECHO} -e "    Source Builder Completed"
    fi
}

function build-install-other-source-package() {
    # Set up paths and dirs
    prepare-source-base

    # Check if the source deb exists
    invoke-fetch

    if [ "${FILE_EXISTS}" = 'true' ]; then
        ${ECHO} -e "    Skipping source build: \e[1;32m${PACKAGE_NAME}\e[0m"
    else
        # Print builder context message
        emit-source-builder-context

        # Set up stage root for source build
        prepare-stage-root

        # Extract source package from tar ball
        untar-tar-balls

        # Build the source deb package
        deb-package-build

        # Clean up
        ${RM} -rf ${INSTALL_ROOT}
        ${ECHO} -e "    Source Builder Completed"
    fi
}

function fetch-single-source() {
    EMAIL_ID="openvalverde@gmail.com"

    package-push-directory /sources

    SOURCE_PACKAGE_NAME=$1 \
    SOURCE_BRANCH_IND=$2 \
    query-single-source

    if [[ ${SOURCE_TYPE} == "git" ]]; then
        build-install-git-source-package
    elif [[ ${SOURCE_TYPE} == "other" ]]; then
        build-install-other-source-package
    fi

    package-pop-directory
}

function fetch-sources() {
    SOURCE_INDEX_OVERRIDE=${SOURCE_INDEX_OVERRIDE:-0}
    EMAIL_ID="openvalverde@gmail.com"

    package-push-directory /sources
        ${ECHO} -e "Source Builder Invocation Started"
        ${ECHO} -e "    Vendor: \e[1m${PACKAGE_BASE_NAME}\e[0m"
        ${ECHO} -e "    Email: \e[4m${EMAIL_ID}\e[0m"
        ${ECHO} -e "    Sources File: \e[31m${SOURCE_FILE}\e[0m"

        # Fetch git upstream sources
        ${GIT} config \
               --global user.email ${EMAIL_ID}

        get-source-package-count

        for index in `seq "${SOURCE_INDEX_OVERRIDE}" $(($sourceCount - 1))`; do
            index=$index \
            get-source-package-metadata

            PACKAGE_VERSION=$(package-major-version) \
            derive-upstream-source-url

            if [[ ${SOURCE_TYPE} = 'git' ]]; then
                build-install-git-source-package
            elif [[ ${SOURCE_TYPE} = 'other' ]]; then
                build-install-other-source-package
            fi
        done

        ${ECHO} -e "Source Builder Invocation Completed"
        ${ECHO}
    package-pop-directory
}
