#!/bin/bash

set -e

ARCHIVE_PATH=${SOURCE_ARCHIVE_PATH}

# Source deb packaging helper functions
source ${PACKAGE_PREFIX}/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables
source ${PACKAGE_PREFIX}/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-packaging-api

# Source package retrieval utils
source ${PACKAGE_PREFIX}/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-fetch-utils

function build-install-git-source-package() {
    # Print source builder context
    emit-source-builder-context

    # Set up stage root for source build
    prepare-stage-root

    GIT_URL=${PACKAGE_URL} \
    TARGET_ROOT=${INSTALL_PREFIX} \
    RETAIN_SOURCE=${RETAIN_SOURCE} \
    DEPTH=${DEPTH} \
    package-git-clone ${SOURCE_BRANCH}

    # Prepare source root
    package-push-directory ${INSTALL_PREFIX}
        if [ "${RETAIN_SOURCE}" = 'false' ]; then
            ${RM} -rf .git*
            ${RM} -rf "^.git*"
            package-git-init
            package-git-add -A
            package-git-commit -m "Val verde source base commit."
        fi
    package-pop-directory

    # Build the source archive package
    DISABLE_INSTALL_ARCHIVE=TRUE \
    package-archive-build-install "${PACKAGE_NAME}"

    # Clean up
    ${RM} -rf ${INSTALL_ROOT}
    ${ECHO} -e "    Source Builder Completed"
}

function build-install-other-source-package() {
    # Print builder context message
    emit-source-builder-context

    # Set up stage root for source build
    prepare-stage-root

    # Extract source package from tar ball
    untar-tar-balls

    # Build the source archive package
    DISABLE_INSTALL_ARCHIVE=TRUE \
    package-archive-build-install "${PACKAGE_NAME}"

    # Clean up
    ${RM} -rf ${INSTALL_ROOT}
    ${ECHO} -e "    Source Builder Completed"
}

function fetch-single-source() {
    EMAIL_ID="openvalverde@gmail.com"

    package-push-directory /sources

    SOURCE_PACKAGE_NAME=$1 \
    SOURCE_BRANCH_IND=$2 \
    query-single-source

    if [[ ${SOURCE_TYPE} == "git" ]]; then
        determine-git-upstream-source-package-branch
        build-install-git-source-package
    elif [[ ${SOURCE_TYPE} == "other" ]]; then
        build-install-other-source-package
    fi

    package-pop-directory
}

function fetch-sources() {
    SOURCE_INDEX_OVERRIDE=${SOURCE_INDEX_OVERRIDE:-0}
    EMAIL_ID="openvalverde@gmail.com"

    package-push-directory /sources
        ${ECHO} -e "Source Builder Invocation Started"
        ${ECHO} -e "    Vendor: \e[1m${PACKAGE_BASE_NAME}\e[0m"
        ${ECHO} -e "    Email: \e[4m${EMAIL_ID}\e[0m"
        ${ECHO} -e "    Sources File: \e[31m${SOURCE_FILE}\e[0m"
        ${ECHO} -e "    Archive Path: \e[31m${SOURCE_ARCHIVE_PATH}\e[0m"

        # Fetch git upstream sources
        ${GIT} config \
               --global user.email ${EMAIL_ID}

        get-source-package-count

        for index in `seq "${SOURCE_INDEX_OVERRIDE}" $(($sourceCount - 1))`; do
            index=$index \
            get-source-package-metadata

            PACKAGE_VERSION=$(package-get-major-version ${SOURCE_PACKAGE_VERSION}) \
            derive-upstream-source-url

            # Set source package name metadata
            SOURCE_PACKAGE_NAME_VERSION=`derive-source-package-name-version`
            package-get-qualified-source-package-name "${SOURCE_PACKAGE_NAME_VERSION}"

            # Check if the source archive exists
            SEARCH_PATH=${SOURCE_ARCHIVE_PATH} \
            SEARCH_INPUT=${PACKAGE_NAME} \
            SEARCH_EXTENSION=${PACKAGE_ARCHIVE_CLASS} \
            package-archive-search

            if [ "${FILE_EXISTS}" = 'TRUE' ]; then
                ${ECHO} -e "    Skipping source build: \e[1;32m${PACKAGE_NAME}\e[0m"
            else
                export PACKAGE_PREFIX=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/sources/${SOURCE_PACKAGE_NAME_VERSION} \
                       INSTALL_ROOT=${TEMP_ROOT_BASE}/${PACKAGE_NAME} \
                       STAGE_ROOT=${STAGE_ROOT_BASE}/${SOURCE_PACKAGE_NAME_VERSION}

                export INSTALL_PREFIX=${INSTALL_ROOT}${PACKAGE_PREFIX}

                if [[ ${SOURCE_TYPE} = 'git' ]]; then
                    determine-git-upstream-source-package-branch
                    build-install-git-source-package
                elif [[ ${SOURCE_TYPE} = 'other' ]]; then
                    build-install-other-source-package
                fi
            fi
        done

        ${ECHO} -e "Source Builder Invocation Completed"
        ${ECHO}
    package-pop-directory
}
