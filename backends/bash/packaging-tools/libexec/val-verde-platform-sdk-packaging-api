#!/bin/bash

set -e

# builder configuration defaults
ARCHIVE_PATH=${ARCHIVE_PATH:-${RELEASE_ARCHIVE_PATH}}
PACKAGE_INSTALL_BASE=${PACKAGE_INSTALL_BASE:-${BASE_DIRECTORY}}
RELEASE=${RELEASE:='1'}
TEMPLATE_ROOT_BASE=${TEMPLATE_ROOT_BASE:-/usr/share/${VAL_VERDE_GH_TEAM}}
VERSION=${VERSION:='1.0.0'}

function package-archive-build-install() {
    TEMPLATE_ROOT=${TEMPLATE_ROOT_BASE}/${PACKAGE_ARCHIVE_CLASS}
    ARCHIVE_ROOT=${ARCHIVE_ROOT_BASE}/${SOURCE_PACKAGE_NAME}/${1}

    # Build the package
    if [ -z "${DISABLE_BUILD_ARCHIVE}" ]; then
        ${PACKAGE_ARCHIVE_CLASS}-archive-build "${1}"
    fi

    # Sign the package using gpg key
    package-archive-sign "${1}"

    # Check if package is installed and needs to be uninstalled
    package-archive-uninstall "${1}"

    # Install the package
    if [ -z "${DISABLE_INSTALL_ARCHIVE}" ]; then
        ${PACKAGE_ARCHIVE_CLASS}-archive-install "${1}"
    fi
}

function package-archive-sign() {
    package-${PACKAGE_ARCHIVE_CLASS}-sign-verify "${ARCHIVE_PATH}/${1}.${PACKAGE_ARCHIVE_CLASS}"
}

function package-archive-uninstall() {
    # Parse package name and check if it is installed
    PACKAGE_NAME_INPUT=`${BASENAME} ${1} ${PACKAGE_ARCHIVE_CLASS}`
    ARCHIVE_CHECK=$(package-archive-check-existence "${PACKAGE_NAME_INPUT}")

    if [ -n "${ARCHIVE_CHECK}" ]; then
        if [ "${PACKAGE_ARCHIVE_CLASS}" = "deb" ]; then
            package-${PACKAGE_ARCHIVE_CLASS}-remove "${PACKAGE_NAME_INPUT}"
        elif [ "${PACKAGE_ARCHIVE_CLASS}" = "rpm" ]; then
	        package-dnf-remove "${PACKAGE_NAME_INPUT}"
        fi
    fi
}

function package-archive-check-existence() {
    if [ "${PACKAGE_ARCHIVE_CLASS}" = "deb" ]; then
        DEB_PACKAGE_QUERY=$(${DPKG}-query -W -f='${status}' ${1} 2>&1)
        DEB_INSTALL_STATUS_CHECK=`${GREP} "ok installed" <<<"${DEB_PACKAGE_QUERY}"`
        if [ -n "${DEB_INSTALL_STATUS_CHECK}" ]; then
            ${ECHO} "true"
        else
            ${ECHO} "false"
        fi
    elif [ "${PACKAGE_ARCHIVE_CLASS}" = "rpm" ]; then
        RPM_PACKAGE_QUERY=$(${RPM} -q ${1} 2>&1)
        RPM_INSTALL_STATUS_CHECK=`${GREP} "${1} is not installed" <<<"${RPM_PACKAGE_QUERY}"`
        if [ -n "${RPM_INSTALL_STATUS_CHECK}" ]; then
            ${ECHO} "false"
        else
            ${ECHO} "true"
        fi
    fi
}

function deb-archive-build() {
    package-push-directory ${INSTALL_ROOT}
        ${RM} -rf ${ARCHIVE_ROOT}
        ${MKDIR} -p ${ARCHIVE_ROOT}
        package-rsync -ax \
                    ${BASE_DIRECTORY} \
                    ${ARCHIVE_ROOT}/

        TEMPLATE_ROOT=${TEMPLATE_ROOT} \
        generate-debian-control-file "${1}"
        package-deb-build ${ARCHIVE_ROOT}

        ${MV} ${ARCHIVE_ROOT}/../${1}.deb \
                ${ARCHIVE_PATH}/${1}.deb
        ${RM} -rf ${ARCHIVE_ROOT}
    package-pop-directory

    ${RM} -rf ${ARCHIVE_ROOT_BASE}
}

function deb-archive-install() {
    package-deb-install ${ARCHIVE_PATH}/${1}.deb
}

function generate-debian-control-file() {
    # Template definition
    DEBIAN_ROOT=${ARCHIVE_ROOT}/DEBIAN

    ${MKDIR} -p ${DEBIAN_ROOT}
    ${ECHO} 10 \
            > ${DEBIAN_ROOT}/compat
    ${SED} "s|DEPENDS|${DEPENDS}|g; \
            s|PACKAGE_NAME|${1}|g; \
            s|PACKAGE_BASE_NAME|${PACKAGE_BASE_NAME}|g; \
            s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g; \
            s|SYSTEM_ARCH|${PACKAGE_ARCH}|g; \
            s|VERSION|${VERSION}|g" \
            ${TEMPLATE_ROOT}/control.in \
            > ${DEBIAN_ROOT}/control
    ${SED} "s|PACKAGE_NAME|${1}|g" \
            ${TEMPLATE_ROOT}/copyright.in \
            > ${DEBIAN_ROOT}/copyright
    ${SED} "s|CURRENT_DATE|`date`|g; \
            s|PACKAGE_NAME|${1}|g; \
            s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g" \
            ${TEMPLATE_ROOT}/changelog.in \
            > ${DEBIAN_ROOT}/changelog
}

function generate-rpm-spec-file() {
    ${SED} "s|ARCHIVE_ROOT|${ARCHIVE_ROOT}|g; \
            s|PACKAGE_ARCH|${PACKAGE_ARCH}|g; \
            s|PACKAGE_NAME|${1}|g; \
            s|VERSION|${VERSION}|g" \
            ${TEMPLATE_ROOT}/spec.in \
            > ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec
}

function rpm-archive-build() {
    package-push-directory ${INSTALL_ROOT}
        ${RM} -rf ${ARCHIVE_ROOT}
        ${MKDIR} -p ${ARCHIVE_ROOT} \
            ${ARCHIVE_ROOT}/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS} \
            ${ARCHIVE_ROOT}/SOURCES/${1}

        package-rsync -ax \
                    ${BASE_DIRECTORY} \
                    ${ARCHIVE_ROOT}/SOURCES/${1}
        
        generate-rpm-spec-file "${1}"

        ${SED} -i "s|%files|%files\n/${PACKAGE_INSTALL_BASE}/*|g" ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec

        package-rpm-build -bb ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec

        ${MV} ${ARCHIVE_ROOT}/RPMS/${PACKAGE_ARCH}/${1}-${VERSION}-${RELEASE}.${PACKAGE_ARCH}.rpm \
                ${ARCHIVE_PATH}/${1}.rpm
        ${RM} -rf ${ARCHIVE_ROOT}
    package-pop-directory

    ${RM} -rf ${ARCHIVE_ROOT_BASE}
}

function rpm-archive-install() {
    package-rpm-install ${ARCHIVE_PATH}/${1}.rpm
}


function tar-package-build() {
    SOURCE_PACKAGE_NAME=$1
    SOURCE_PACKAGE_VERSION=${2:-'1.0.0'}
    PACKAGE_URL=$3

    PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}
    INSTALL_ROOT=${TEMP_ROOT_BASE}/${PACKAGE_NAME}-tar-archives
    INSTALL_PREFIX=${INSTALL_ROOT}/${PACKAGE_NAME}

    ${MKDIR} -p ${TAR_ROOT_BASE} ${INSTALL_PREFIX}

    package-push-directory ${INSTALL_ROOT}
        package-wget -c ${PACKAGE_URL} \
                     -O ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz
        package-tar -xzvf ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz \
                    -C ${INSTALL_PREFIX} \
                    --strip 1
        package-tar -cvf ${PACKAGE_NAME}.tar ${INSTALL_PREFIX}
        ${MV} ${PACKAGE_NAME}.tar ${TAR_ROOT_BASE}
        ${RM} ${PACKAGE_NAME}.tar.gz
    package-pop-directory

    ${RM} -r ${INSTALL_ROOT}
}

function tar-package-install() {
    package-tar -xzf ${TAR_ROOT_BASE}/${PACKAGE_NAME}.tar
}

function trigger-source-package-install() {
    SOURCE_FILES=`find ${SOURCE_ARCHIVE_PATH} -name "*.${PACKAGE_ARCHIVE_CLASS}" -type f | sort`

    for src_file in ${SOURCE_FILES}; do
        ${ECHO} -e "Installing Source ${PACKAGE_ARCHIVE_CLASS} Package: ${src_file}"
        package-${PACKAGE_ARCHIVE_CLASS}-install ${src_file}
    done
}
