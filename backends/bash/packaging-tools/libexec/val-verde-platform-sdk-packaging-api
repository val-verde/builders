#!/bin/bash

set -e

# builder configuration defaults
ARCHIVE_TYPE=${ARCHIVE_TYPE:-$(${ECHO} "${PACKAGING_ARCHIVE_TYPE}" | ${TR} '[:upper:]' '[:lower:]')}
BASE_DIRECTORY=${BASE_DIRECTORY:-$(${ECHO} "${PACKAGE_ROOT}" | ${CUT} -d "/" -f2)}
DEB_PATH=${DEB_PATH:-${RELEASE_DEB_PATH}}
PACKAGE_INSTALL_BASE=${PACKAGE_INSTALL_BASE:-${BASE_DIRECTORY}}
RELEASE=${RELEASE:='1'}
TARGETS=${TARGETS:-install}
VERSION=${VERSION:='1.0.0'}

function packaging-archive-build-install() {
    ARCHIVE_TYPE=${ARCHIVE_TYPE:-$(${ECHO} "${PACKAGING_ARCHIVE_TYPE}")}
    ARCHIVE_TYPE=$(${ECHO} ${ARCHIVE_TYPE} | ${TR} '[:upper:]' '[:lower:]')

    # Build the package
    ${ARCHIVE_TYPE}-package-build

    # Install the package
    ${ARCHIVE_TYPE}-package-install
}

function deb-package-build() {
    ARCHIVE_ROOT=${TEMP_ROOT_BASE}/archiving/${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}

    if [ -z "${DISABLE_BUILD_DEB}" ]; then
        package-push-directory ${INSTALL_ROOT}
            ${RM} -rf ${ARCHIVE_ROOT}
            ${MKDIR} -p ${ARCHIVE_ROOT}
            package-rsync -ax \
                        ${BASE_DIRECTORY} \
                        ${ARCHIVE_ROOT}/

            TEMPLATE_ROOT=${TEMPLATE_ROOT} \
            generate-control-file "${PACKAGE_NAME}"
            package-dpkg-build ${ARCHIVE_ROOT}

            ${MV} ${ARCHIVE_ROOT}/../${PACKAGE_NAME}.deb \
                  ${DEB_PATH}/${PACKAGE_NAME}.deb
            ${RM} -rf ${ARCHIVE_ROOT}
        package-pop-directory
    fi
}

function deb-package-install() {
    if [ -z "${DISABLE_INSTALL_DEB}" ]; then
        package-dpkg-install ${DEB_PATH}/${PACKAGE_NAME}.deb
    fi
}

function generate-control-file() {
    TEMPLATE_ROOT=${TEMPLATE_ROOT:-/usr/share/${VAL_VERDE_GH_TEAM}/deb}
    ARCHIVE_ROOT=${TEMP_ROOT_BASE}/archiving/${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}

    # Template definition
    DEBIAN_ROOT=${ARCHIVE_ROOT}/DEBIAN

    ${MKDIR} -p ${DEBIAN_ROOT}
    ${ECHO} 10 \
            > ${DEBIAN_ROOT}/compat
    ${SED} "s|DEPENDS|${DEPENDS}|g; \
            s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
            s|PACKAGE_BASE_NAME|${PACKAGE_BASE_NAME}|g; \
            s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g; \
            s|SYSTEM_ARCH|${PACKAGE_ARCH}|g; \
            s|VERSION|${VERSION}|g" \
            ${TEMPLATE_ROOT}/control.in \
            > ${DEBIAN_ROOT}/control
    ${SED} "s|PACKAGE_NAME|${PACKAGE_NAME}|g" \
            ${TEMPLATE_ROOT}/copyright.in \
            > ${DEBIAN_ROOT}/copyright
    ${SED} "s|CURRENT_DATE|`date`|g; \
            s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
            s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g" \
            ${TEMPLATE_ROOT}/changelog.in \
            > ${DEBIAN_ROOT}/changelog
}

function generate-spec-file() {
    TEMPLATE_ROOT=${TEMPLATE_ROOT:-/usr/share/${VAL_VERDE_GH_TEAM}/rpm}
    ARCHIVE_ROOT=${TEMP_ROOT_BASE}/archiving/${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}

    ${SED} "s|ARCHIVE_ROOT|${ARCHIVE_ROOT}|g; \
            s|BUILD_PROCESSOR|${BUILD_PROCESSOR}|g; \
            s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
            s|RELEASE|${RELEASE}|g; \
            s|SYSTEM_ARCH|${PACKAGE_ARCH}|g; \
            s|VERSION|${VERSION}|g" \
            ${TEMPLATE_ROOT}/spec.in \
            > ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec
}

function rpm-package-build() {
    ARCHIVE_ROOT=${TEMP_ROOT_BASE}/archiving/${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}

    if [ -z "${DISABLE_BUILD_RPM}" ]; then
        package-push-directory ${INSTALL_ROOT}
            ${RM} -r ${ARCHIVE_ROOT}
            ${MKDIR} -p ${ARCHIVE_ROOT} \
                ${ARCHIVE_ROOT}/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS} \
                ${ARCHIVE_ROOT}/SOURCES/${PACKAGE_NAME}

            package-rsync -ax \
                        ${BASE_DIRECTORY} \
                        ${ARCHIVE_ROOT}/SOURCES/${PACKAGE_NAME}
            
            package-tar zvcfP ${ARCHIVE_ROOT}/SOURCES/${PACKAGE_NAME}.tar.gz .

            generate-spec-file "${PACKAGE_NAME}"

            FILELIST="\
            $(${FIND} ${ARCHIVE_ROOT}/SOURCES/ -type f -name "*" '!' -name '*.tar.gz' | \
            ${SED} "s|${ARCHIVE_ROOT}/SOURCES/${PACKAGE_NAME}||g") \
            "

            ${SED} -i "s|%files|%files\n$(${ECHO} ${FILELIST})|g" ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec

            ${SED} -i "s| ${PACKAGE_INSTALL_BASE}|\n${PACKAGE_INSTALL_BASE}|g" ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec

            rpmbuild --quiet --define "_topdir ${ARCHIVE_ROOT}" -ba ${ARCHIVE_ROOT}/SPECS/${SOURCE_PACKAGE_NAME}.spec

            # package-rpm-build ${ARCHIVE_ROOT}

            ${MV} ${ARCHIVE_ROOT}/RPMS/${BUILD_PROCESSOR}/${PACKAGE_NAME}.rpm \
                  ${SOURCE_ARCHIVE_PATH}/${PACKAGE_NAME}.rpm
            ${RM} -rf ${ARCHIVE_ROOT}
        package-pop-directory
    fi
}

function rpm-package-install() {
    if [ -z "${DISABLE_INSTALL_RPM}" ]; then
        rpm -i ${SOURCE_ARCHIVE_PATH}/${PACKAGE_NAME}.rpm
        # package-rpm-install ${RPM_PATH}/${PACKAGE_NAME}.rpm
    fi
}


function tar-package-build() {
    SOURCE_PACKAGE_NAME=$1
    SOURCE_PACKAGE_VERSION=${2:-'1.0.0'}
    PACKAGE_URL=$3

    PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}
    INSTALL_ROOT=${TEMP_ROOT_BASE}/${PACKAGE_NAME}-tar-archives
    INSTALL_PREFIX=${INSTALL_ROOT}/${PACKAGE_NAME}

    ${MKDIR} -p ${INSTALL_PREFIX}

    package-push-directory ${INSTALL_ROOT}
        package-wget -c ${PACKAGE_URL} \
                     -O ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz
        package-tar -xzvf ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz \
                    -C ${INSTALL_PREFIX} \
                    --strip 1
        package-tar -cvf ${PACKAGE_NAME}.tar ${INSTALL_PREFIX}
        ${MV} ${PACKAGE_NAME}.tar ${TAR_ROOT_BASE}
        ${RM} ${PACKAGE_NAME}.tar.gz
    package-pop-directory

    ${RM} -r ${INSTALL_ROOT}
}

function trigger-source-package-install() {
    SOURCE_FILES=${SOURCE_ARCHIVE_PATH}/*

    for src_file in ${SOURCE_FILES}; do
        ${ECHO} -e "Installing Source Package: ${src_file}"
        package-dpkg-install ${src_file}
    done
}
