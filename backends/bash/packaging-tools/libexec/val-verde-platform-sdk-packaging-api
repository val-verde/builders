#!/bin/bash

set -e

# builder configuration defaults
BASE_DIRECTORY=${BASE_DIRECTORY:-$(${ECHO} "${PACKAGE_ROOT}" | ${CUT} -d "/" -f2)}
DEB_PATH=${DEB_PATH:-${BUILD_DEB_PATH}}
VERSION=${VERSION:='1.0.0'}

function deb-package-build() {
    ARCHIVE_ROOT=${TEMP_ROOT_BASE}/archiving/${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}

    if [ -z "${DISABLE_BUILD_DEB}" ]; then
        package-push-directory ${INSTALL_ROOT}
            ${RM} -rf ${ARCHIVE_ROOT}
            ${MKDIR} -p ${ARCHIVE_ROOT}
            package-rsync -ax \
                        ${BASE_DIRECTORY} \
                        ${ARCHIVE_ROOT}/

            TEMPLATE_ROOT=${TEMPLATE_ROOT} \
            generate-control-file "${PACKAGE_NAME}"
            package-dpkg-build ${ARCHIVE_ROOT}

            ${MV} ${ARCHIVE_ROOT}/../${PACKAGE_NAME}.deb \
                  ${DEB_PATH}/${PACKAGE_NAME}.deb
            ${RM} -rf ${ARCHIVE_ROOT}
        package-pop-directory
    fi
}

function deb-package-install() {
    if [ -z "${DISABLE_INSTALL_DEB}" ]; then
        package-dpkg-install ${DEB_PATH}/${PACKAGE_NAME}.deb
    fi
}

function deb-package-mgmt() {
    PACKAGE_INPUT=($@)
    PACKAGE_COUNT=$((${#PACKAGE_INPUT[@]} / 2))

    for i in `seq 0 $(($PACKAGE_COUNT - 1))`; do
        PACKAGE_NAME_INDEX=$((i * 2))
        SYSTEM_TYPE_INDEX=$((i * 2 + 1))
        PKG_NAME=${PACKAGE_INPUT[$PACKAGE_NAME_INDEX]}
        SYSTEM_TYPE=${PACKAGE_INPUT[$SYSTEM_TYPE_INDEX]}
        SYSTEM_OS=${SYSTEM_TYPE}_OS
        SYSTEM_OS_API=${SYSTEM_TYPE}_OS_API_LEVEL
        SYSTEM_ARCH=${SYSTEM_TYPE}_ARCH
        PKG_SUFFIX=${!SYSTEM_OS}${!SYSTEM_OS_API}-${!SYSTEM_ARCH}

        if [[ "${PKG_NAME}"  == *"stage"* ]]; then
            PKG_NAME=${PKG_NAME%-*}
            PKG_SUFFIX=${PKG_SUFFIX}-stage
        fi

        PKG_PREFIX=${PACKAGE_BASE_NAME}-${PKG_NAME}
        PACKAGE_FILE_NAME=${PKG_PREFIX}-${PKG_SUFFIX}
        DEB_NAME=${DEB_PATH}/${PACKAGE_FILE_NAME}.deb
        QUALIFIED_FILE_NAME="${QUALIFIED_FILE_NAME} ${PACKAGE_FILE_NAME}"
        QUALIFIED_DEB="${QUALIFIED_DEB} ${DEB_NAME}"
    done

    if [ "${PACKAGE_ACTION}" = "UNINSTALL" ]; then
        package-dpkg-remove --force-depends ${QUALIFIED_FILE_NAME}
    elif [ "${PACKAGE_ACTION}" = "INSTALL" ]; then
        package-dpkg-install ${QUALIFIED_DEB}
    fi

    unset QUALIFIED_DEB \
          QUALIFIED_FILE_NAME
}

function generate-control-file() {
    ARCHIVE_ROOT=${TEMP_ROOT_BASE}/archiving/${SOURCE_PACKAGE_NAME}/${PACKAGE_NAME}
    TEMPLATE_ROOT=${TEMPLATE_ROOT:-/usr/share/${VAL_VERDE_GH_TEAM}}

    # Template definition
    DEBIAN_ROOT=${ARCHIVE_ROOT}/DEBIAN

    ${MKDIR} -p ${DEBIAN_ROOT}
    ${ECHO} 10 \
            > ${DEBIAN_ROOT}/compat
    ${SED} "s|DEPENDS|${DEPENDS}|g; \
            s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
            s|PACKAGE_BASE_NAME|${PACKAGE_BASE_NAME}|g; \
            s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g; \
            s|SYSTEM_ARCH|${PACKAGE_ARCH}|g; \
            s|VERSION|${VERSION}|g" \
            ${TEMPLATE_ROOT}/control.in \
            > ${DEBIAN_ROOT}/control
    ${SED} "s|PACKAGE_NAME|${PACKAGE_NAME}|g" \
            ${TEMPLATE_ROOT}/copyright.in \
            > ${DEBIAN_ROOT}/copyright
    ${SED} "s|CURRENT_DATE|`date`|g; \
            s|PACKAGE_NAME|${PACKAGE_NAME}|g; \
            s|SOURCE_PACKAGE_VERSION|${SOURCE_PACKAGE_VERSION}|g" \
            ${TEMPLATE_ROOT}/changelog.in \
            > ${DEBIAN_ROOT}/changelog
}

function tar-package-build() {
    SOURCE_PACKAGE_NAME=$1
    SOURCE_PACKAGE_VERSION=${2:-'1.0.0'}
    PACKAGE_URL=$3

    PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}
    INSTALL_ROOT=${TEMP_ROOT_BASE}/${PACKAGE_NAME}-tar-archives
    INSTALL_PREFIX=${INSTALL_ROOT}/${PACKAGE_NAME}

    ${MKDIR} -p ${INSTALL_PREFIX}

    package-push-directory ${INSTALL_ROOT}
        package-wget -c ${PACKAGE_URL} \
                     -O ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz
        package-tar -xzvf ${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}.tar.gz \
                    -C ${INSTALL_PREFIX} \
                    --strip 1
        package-tar -cvf ${PACKAGE_NAME}.tar ${INSTALL_PREFIX}
        ${MV} ${PACKAGE_NAME}.tar ${TAR_ROOT_BASE}
        ${RM} ${PACKAGE_NAME}.tar.gz
    package-pop-directory

    ${RM} -r ${INSTALL_ROOT}
}

function trigger-source-package-install() {
    SOURCE_FILES=${SOURCE_DEB_PATH}/*

    for src_file in ${SOURCE_FILES}; do
        ${ECHO} -e "Installing Source Package: ${src_file}"
        package-dpkg-install ${src_file}
    done
}
