#!/bin/bash

set -e

# Source common variables and functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-common-variables

function derive-upstream-source-url() {
    export PACKAGE_NAME=${SOURCE_PACKAGE_NAME}-${PACKAGE_VERSION}        

    if [[ ${PACKAGE_BASE_URL} == *'${SOURCE_PACKAGE_NAME}'* || ${PACKAGE_BASE_URL} == *'${SOURCE_PACKAGE_VERSION}'* ]]; then
        PACKAGE_URL=${PACKAGE_BASE_URL//'${SOURCE_PACKAGE_NAME}'/${SOURCE_PACKAGE_NAME}}
        PACKAGE_URL=${PACKAGE_URL//'${SOURCE_PACKAGE_VERSION}'/${SOURCE_PACKAGE_VERSION}}
    else
        PACKAGE_URL=${PACKAGE_BASE_URL}
    fi
}

function determine-git-source-package() {
    if [[ ${SOURCE_BRANCH_IND} == "default" ]]; then
        SOURCE_BRANCH=val-verde-mainline
    elif [[ ${SOURCE_BRANCH_IND} == "default-next" ]]; then
        SOURCE_BRANCH=val-verde-mainline-next
    elif [[ ${SOURCE_BRANCH_IND} == "default-next-testing" ]]; then
        SOURCE_BRANCH=val-verde-mainline-next-testing
    elif [[ ${SOURCE_BRANCH_IND} == "android" ]]; then
        SOURCE_BRANCH=val-verde-android-mainline
        PACKAGE_NAME=${PACKAGE_NAME}-android
    elif [[ ${SOURCE_BRANCH_IND} == "android-next" ]]; then
        SOURCE_BRANCH=val-verde-android-mainline-next
        PACKAGE_NAME=${PACKAGE_NAME}-android
    elif [[ ${SOURCE_BRANCH_IND} == "android-next-testing" ]]; then
        SOURCE_BRANCH=val-verde-android-mainline-next-testing
        PACKAGE_NAME=${PACKAGE_NAME}-android
    elif [[ ${SOURCE_BRANCH_IND} == "windows" ]]; then
        SOURCE_BRANCH=val-verde-windows-mainline
        PACKAGE_NAME=${PACKAGE_NAME}-windows
    else
        SOURCE_BRANCH=${SOURCE_BRANCH_IND}
    fi
}

function emit-source-builder-context() {
        ${ECHO}
        ${ECHO} -e "    Source Builder Started"
        ${ECHO} -e "        Name: \e[1;35m${SOURCE_PACKAGE_NAME}\e[0m"
        ${ECHO} -e "        Version: \e[32m${SOURCE_PACKAGE_VERSION}\e[0m"
        ${ECHO} -e "        URL: \e[31m${PACKAGE_URL}\e[0m"
        ${ECHO} -e "        Stage Root: \e[33m${STAGE_ROOT}\e[0m"
        ${ECHO} -e "        Install Prefix: \e[33m${INSTALL_PREFIX}\e[0m"
}

function get-source-package-metadata() {
    SOURCE_PACKAGE_NAME=$(jq -r --argjson id $index \
                                '.[$id].sourcePackageName' \
                                ${SOURCE_FILE})
    SOURCE_BRANCH_IND=$(jq -r --argjson id $index \
                              '.[$id].sourceBranchIndicator' \
                              ${SOURCE_FILE})
    SOURCE_PACKAGE_VERSION=$(jq -r --argjson id $index \
                                '.[$id].sourcePackageVersion' \
                                ${SOURCE_FILE})
    SOURCE_TYPE=$(jq -r --argjson id $index \
                        '.[$id].sourceType' \
                        ${SOURCE_FILE})
    SOURCE_URL=$(jq -r --argjson id $index \
                        '.[$id].sourcePackageUrl' \
                        ${SOURCE_FILE})

    if [[ ${SOURCE_TYPE} = 'git' ]]; then
        RETAIN_SOURCE=$(jq -r --argjson id $index \
                            '.[$id].retainSource' \
                            ${SOURCE_FILE})
        DEPTH=$(jq -r --argjson id $index \
                    '.[$id].depth' \
                    ${SOURCE_FILE})
    fi

    PACKAGE_BASE_URL=${SOURCE_URL/'${VAL_VERDE_GH_TEAM}'/${VAL_VERDE_GH_TEAM}}
}

function get-source-package-count() {
    sourceCount=$(jq -r length ${SOURCE_FILE})
}

function prepare-source-base() {
    # Establish package url
    PACKAGE_VERSION=$(package-get-major-version ${SOURCE_PACKAGE_VERSION}) \
    derive-upstream-source-url

    # Set source package details
    if [[  ${SOURCE_TYPE} = 'git' ]]; then
        determine-git-source-package
    fi

    export PACKAGE_PREFIX=${PACKAGE_ROOT}/${PACKAGE_BASE_NAME}-platform-sdk/sources/${PACKAGE_NAME} \
           INSTALL_ROOT=${TEMP_ROOT_BASE}/${PACKAGE_NAME}-sources \
           STAGE_ROOT=${STAGE_ROOT_BASE}/${PACKAGE_NAME} \
           DEB_PATH=${SOURCE_DEB_PATH}
    
    export INSTALL_PREFIX=${INSTALL_ROOT}${PACKAGE_PREFIX}

    # Check if the source deb exists
    SEARCH_PATH=${SOURCE_DEB_PATH} \
    SEARCH_INPUT=${PACKAGE_NAME} \
    SEARCH_EXTENSION=deb \
    tool-check
}

function prepare-stage-root() {
    # Prepare stage root (for logs) and install directory for source package
    ${MKDIR} -p \
                ${INSTALL_PREFIX} \
                ${STAGE_ROOT}
}

function query-single-source() {
    SOURCE_TYPE=$(jq --arg pkgName ${SOURCE_PACKAGE_NAME} \
                     --arg branch ${SOURCE_BRANCH_IND} \
                     '.[] | select(.sourcePackageName==$pkgName && .sourceBranchIndicator==$branch) | .sourceType' \
                     ${SOURCE_FILE})
    SOURCE_PACKAGE_URL=$(jq --arg pkgName ${SOURCE_PACKAGE_NAME} \
                            --arg branch ${SOURCE_BRANCH_IND} \
                            '.[] | select(.sourcePackageName==$pkgName && .sourceBranchIndicator==$branch) | .sourcePackageUrl' \
                            ${SOURCE_FILE})
    SOURCE_PACKAGE_VERSION=$(jq --arg pkgName ${SOURCE_PACKAGE_NAME} \
                                --arg branch ${SOURCE_BRANCH_IND} \
                                '.[] | select(.sourcePackageName==$pkgName && .sourceBranchIndicator==$branch) | .sourcePackageVersion' \
                                ${SOURCE_FILE})

    if [[ ${SOURCE_TYPE} = 'git' ]]; then
        RETAIN_SOURCE=$(jq --arg pkgName ${SOURCE_PACKAGE_NAME} \
                            --arg branch ${SOURCE_BRANCH_IND} \
                            '.[] | select(.sourcePackageName==$pkgName && .sourceBranchIndicator==$branch) | .retainSource' \
                            ${SOURCE_FILE})
        DEPTH=$(jq --arg pkgName ${SOURCE_PACKAGE_NAME} \
                    --arg branch ${SOURCE_BRANCH_IND} \
                    '.[] | select(.sourcePackageName==$pkgName && .sourceBranchIndicator==$branch) | .depth' \
                    ${SOURCE_FILE})
    fi
}

function untar-tar-balls() {
    SOURCE_PACKAGE_NAME_VERSION=${SOURCE_PACKAGE_NAME}-${SOURCE_PACKAGE_VERSION}
    if [[ ${SOURCE_BRANCH_IND} == "wget" ]]; then
        package-wget -c ${PACKAGE_URL} \
                        -O ${SOURCE_PACKAGE_NAME_VERSION}.tar.gz
        package-tar -xzvf ${SOURCE_PACKAGE_NAME_VERSION}.tar.gz \
                    -C ${INSTALL_PREFIX} --strip 1
        ${RM} ${SOURCE_PACKAGE_NAME_VERSION}.tar.gz
    elif [[ ${SOURCE_BRANCH_IND} == "wget-bz2" ]]; then
        package-wget -c ${PACKAGE_URL} \
                        -O ${SOURCE_PACKAGE_NAME_VERSION}.tar.bz2
        package-tar -xvf ${SOURCE_PACKAGE_NAME_VERSION}.tar.bz2 \
                    -C ${INSTALL_PREFIX} --strip 1
        ${RM} ${SOURCE_PACKAGE_NAME_VERSION}.tar.bz2
    elif [[ ${SOURCE_BRANCH_IND} == "wget-raw" ]]; then
        package-wget -c ${PACKAGE_URL} \
                        -P ${INSTALL_PREFIX}
    elif [[ ${SOURCE_BRANCH_IND} == "wget-xz" ]]; then
        package-wget -c ${PACKAGE_URL} \
                        -O ${SOURCE_PACKAGE_NAME_VERSION}.tar.xz
        package-tar -xvf ${SOURCE_PACKAGE_NAME_VERSION}.tar.xz \
                    -C ${INSTALL_PREFIX} --strip 1
        ${RM} ${SOURCE_PACKAGE_NAME_VERSION}.tar.xz
    elif [[ ${SOURCE_BRANCH_IND} == "wget-unzip" ]]; then
        package-wget -c ${PACKAGE_URL} \
                        -O ${SOURCE_PACKAGE_NAME_VERSION}.zip
        package-unzip ${SOURCE_PACKAGE_NAME_VERSION}.zip \
                        -d ${INSTALL_PREFIX}
        ${MV} ${INSTALL_PREFIX}/${SOURCE_PACKAGE_NAME_VERSION}/* \
              ${INSTALL_PREFIX}/
        ${RM} -rf ${INSTALL_PREFIX}/${SOURCE_PACKAGE_NAME_VERSION}
        ${RM} ${SOURCE_PACKAGE_NAME_VERSION}.zip
    fi
}
