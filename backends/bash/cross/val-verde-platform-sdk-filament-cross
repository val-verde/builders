#!/bin/bash

set -e

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-glslang-11-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU}-${QUALIFIED_HOST_PROCESSOR} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-spirv-tools-2022-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU}-${QUALIFIED_HOST_PROCESSOR} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-vulkan-loader-1-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_CPU}-${QUALIFIED_HOST_PROCESSOR} (>=1.0.0) \
"

# Invoke one-shot template for cmake/install
BUILD_TYPE=${BUILD_TYPE:-Release}

function package-install-completion-callback() {
    ${MKDIR} -p ${INSTALL_PREFIX}/lib/cmake

    if [ "${BUILD_TRIPLE}" == ${HOST_TRIPLE} ]; then
        package-rsync -ax \
                      ${STAGE_ROOT}/ImportExecutables-${BUILD_TYPE}.cmake \
                      ${INSTALL_PREFIX}/lib/cmake/${SOURCE_PACKAGE_NAME}.cmake
    fi

    ${RM} \
          ${INSTALL_PREFIX}/LICENSE \
          ${INSTALL_PREFIX}/README.md \
          ${INSTALL_PREFIX}/lib/libvulkan*
}

copy-source-to-staging

if [ "${BUILD_TRIPLE}" != ${HOST_TRIPLE} ]; then
    package-rsync -ax \
                  ${BUILD_PACKAGE_PREFIX}/lib/cmake/${SOURCE_PACKAGE_NAME}.cmake \
                  ${STAGE_ROOT}/ImportExecutables-${BUILD_TYPE}.cmake
fi

if [ "${HOST_KERNEL}" = "linux" ] &&
   [ "${HOST_PROCESSOR}" = "aarch64" ]; then
    CMAKE_BLUEGL_ARCH_CMD="-DLINUX_AARCH64=TRUE"
fi

if [ "${HOST_OS}" = "android" ]; then
    COMMON_CFLAGS="\
        -DANDROID \
        ${COMMON_CFLAGS} \
    "
    CMAKE_ANDROID_DEFINE_CMD="-DANDROID=TRUE"
elif [ "${HOST_OS}" = "mingw" ]; then
    COMMON_CFLAGS="\
        -fms-compatibility-version=19.2 \
        -fms-extensions \
        ${COMMON_CFLAGS} \
    "
    if [ "${HOST_PROCESSOR}" = "x86_64" ]; then
        CMAKE_ASM_COMPILER_CMD="-DCMAKE_ASM_COMPILER=${BUILD_PACKAGE_PREFIX}/bin/${VAL_VERDE_GH_TEAM}-platform-sdk-ml64"
        CMAKE_ASM_COMPILER_ID_CMD="-DCMAKE_ASM_COMPILER_ID=MSVC"
        CMAKE_ASM_FLAGS_CMD="-DCMAKE_ASM_FLAGS_RELEASE="
    fi
fi

if [ "${HOST_OS}" = "macos" ]; then
    export COMMON_LDFLAGS="\
        -framework Foundation \
        -liconv \
        ${COMMON_LDFLAGS} \
    "
elif [ "${HOST_OS}" != "gnu" ]; then
    export COMMON_LDFLAGS="\
        -liconv \
        ${COMMON_LDFLAGS} \
    "
fi

if [ "${HOST_OS}" = "mingw" ]; then
    API=legacy
    GL_HEADER_PATH=${SOURCE_ROOT_BASE}/mingw-w64-6/mingw-w64-headers/include
else
    API=gl
    GL_HEADER_PATH=${PACKAGE_PREFIX}/include
fi

TOOL_LOG=builder-bootstrap \
tool-log ${PYTHON} ${STAGE_ROOT}/libs/bluegl/bluegl-gen.py -I ${GL_HEADER_PATH} \
                                                           --api ${API} \
                                                            -o ${STAGE_ROOT}/libs/bluegl/src/

COMMON_CFLAGS="\
    -fno-builtin \
    -DSTRSAFE_NO_DEPRECATE \
    ${COMMON_CFLAGS} \
" \
CMAKE_CONFIGURE_ROOT=${STAGE_ROOT} \
CXX_STANDARD=17 \
PACKAGE_INSTALL_COMPLETION_CALLBACK=package-install-completion-callback \
package-cmake-install-archive \
    -DBUILD_TESTING=FALSE \
    -DBUILD_WSI_DIRECTFB_SUPPORT=FALSE \
    -DBUILD_WSI_WAYLAND_SUPPORT=FALSE \
    -DBUILD_WSI_XLIB_SUPPORT=FALSE \
    -DCCACHE_PROGRAM=`package-get-path ccache EXECUTABLE BUILD` \
    -DDIST_ARCH=${HOST_PROCESSOR} \
    -DDIST_DIR="/" \
    -DFILAMENT_ENABLE_JAVA=FALSE \
    -DFILAMENT_ENABLE_LTO=FALSE \
    -DFILAMENT_SKIP_SAMPLES=TRUE \
    -DFILAMENT_SUPPORTS_VULKAN=TRUE \
    -DLIBRT= \
    -DPYTHON_EXECUTABLE=${PYTHON} \
    -DSPIRV_WERROR=FALSE \
    -DUSE_STATIC_LIBCXX=FALSE \
    -DVulkan_LIBRARY=`package-get-path vulkan SHARED HOST` \
    ${CMAKE_ANDROID_DEFINE_CMD} \
    ${CMAKE_ASM_COMPILER_CMD} \
    ${CMAKE_ASM_COMPILER_ID_CMD} \
    ${CMAKE_ASM_FLAGS_CMD} \
    ${CMAKE_BLUEGL_ARCH_CMD}
