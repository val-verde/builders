#!/bin/bash

set -e

# Set all environment vars
export SOURCE_PACKAGE_NAME=swift-corelibs-libdispatch
export SOURCE_PACKAGE_VERSION=5

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-llvm-project-13-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-swift-${SOURCE_PACKAGE_VERSION}-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"

# Configure the build components
cd ${STAGE_ROOT}
package-cmake \
    -DBUILD_TESTING=FALSE \
    -DENABLE_SWIFT=TRUE \
    -DLibRT_INCLUDE_PATH= \
    -DLibRT_LIBRARIES= \
    ${SOURCE_ROOT}

# Build the components
ninja-install

SDK=${HOST_OS}

if [ "${HOST_OS}" = "android" ]; then
    ${MV} ${INSTALL_PREFIX}/lib/swift/linux \
          ${INSTALL_PREFIX}/lib/swift/android
elif [ "${HOST_OS}" = "musl" ]; then
    ${MV} ${INSTALL_PREFIX}/lib/swift/linux \
          ${INSTALL_PREFIX}/lib/swift/musl
fi

# RPATH fixups
COMPONENT_RPATH="\$ORIGIN:\$ORIGIN/../.." \
COMPONENTS="\
    ${INSTALL_PREFIX}/lib/swift/${SDK}/${SHARED_LIBRARY_PREFIX}*${SHARED_LIBRARY_SUFFIX} \
" \
rpath-fixup

# Build and install the package
DISABLE_INSTALL_DEB=TRUE \
package-invoke-archive-install
