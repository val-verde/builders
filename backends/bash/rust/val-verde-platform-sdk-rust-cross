#!/bin/bash

set -e

# Set all environment vars
export SOURCE_PACKAGE_NAME=rust
export SOURCE_PACKAGE_VERSION=1

# Source package build helper functions
source /usr/libexec/${VAL_VERDE_GH_TEAM}-platform-sdk-builder-utils

CCLDFLAGS="\
    -lunwind \
    -L${PACKAGE_PREFIX}/lib \
    ${CCLDFLAGS} \
" \
export-compiler-environment
generate-compiler-tools

export DEPENDS="\
    ${PACKAGE_BASE_NAME}-llvm-project-13-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0), \
    ${PACKAGE_BASE_NAME}-z3-4-${HOST_OS}${HOST_OS_API_LEVEL}-${HOST_ARCH} (>=1.0.0) \
"
export LLVM_NATIVE_STAGE_ROOT=${LLVM_NATIVE_STAGE_ROOT:-${STAGE_ROOT_BASE}/${QUALIFIED_LLVM_PATH}-${BUILD_OS}${BUILD_OS_API_LEVEL}-${BUILD_ARCH}}

# Configure the build components
cd ${STAGE_ROOT}

package-rsync -ax \
              ${SOURCE_ROOT}/${VAL_VERDE_GH_TEAM}-config-cross.toml.in \
              ${STAGE_ROOT}/config.toml

if [ "${BUILD_OS}" = "android" ]; then
    BUILD_TRIPLE=${BUILD_PROCESSOR}-${BUILD_KERNEL}-${BUILD_OS}
else
    BUILD_TRIPLE=${BUILD_PROCESSOR}-unknown-${BUILD_KERNEL}-${BUILD_OS}
fi

if [ "${HOST_OS}" = "android" ]; then
    HOST_TRIPLE=${HOST_PROCESSOR}-${HOST_KERNEL}-${HOST_OS}
else
    HOST_TRIPLE=${HOST_PROCESSOR}-unknown-${HOST_KERNEL}-${HOST_OS}
fi

CARGO=${BINDIR}/cargo
FILECHECK=${LLVM_NATIVE_STAGE_ROOT}/bin/FileCheck
LD=${CCLD}
LDFLAGS=
LLVMCONFIG=${LLVM_NATIVE_STAGE_ROOT}/bin/llvm-config
RUSTC=${BINDIR}/rustc
RUSTFMT=${BINDIR}/rustfmt

${SED} -i "s|@@AR@@|${AR}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@BUILD_CC@@|${BUILD_CC}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@BUILD_CXX@@|${BUILD_CXX}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@BUILD_LD@@|${BUILD_LD}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@BUILD_LLVMCONFIG@@|${LLVMCONFIG}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@BUILD_TRIPLE@@|${BUILD_TRIPLE}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@CARGO@@|${CARGO}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@CC@@|${CC}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@CFLAGS@@|${CFLAGS}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@CXX@@|${CXX}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@CXXFLAGS@@|${CXXFLAGS}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@FILECHECK@@|${FILECHECK}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@HOST_TRIPLE@@|${BUILD_TRIPLE}\", \"${HOST_TRIPLE}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@INSTALL_PREFIX@@|${INSTALL_PREFIX}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@LD@@|${LD}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@LDFLAGS@@|${LDFLAGS}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@LLVMCONFIG@@|${LLVMCONFIG}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@MUSLROOT@@|${PACKAGE_PREFIX}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@NODE@@|${NODE}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@PYTHON@@|${PYTHON}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@RANLIB@@|${RANLIB}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@RUSTC@@|${RUSTC}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@RUSTFMT@@|${RUSTFMT}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@STAGE_ROOT@@|${STAGE_ROOT}|g" ${STAGE_ROOT}/config.toml
${SED} -i "s|@@TARGET_TRIPLE@@|${HOST_TRIPLE}|g" ${STAGE_ROOT}/config.toml

export HOST_CFLAGS="${BUILD_CFLAGS}"
export HOST_CXXFLAGS="${BUILD_CXXFLAGS}"
export TARGET_CFLAGS="${CFLAGS}"
export TARGET_CXXFLAGS="${CXXFLAGS}"
unset CFLAGS CXXFLAGS

# Build the components
TOOL_LOG=${STAGE_ROOT}/builder-invocation \
tool-log ${PYTHON} ${SOURCE_ROOT}/x.py build --config ${STAGE_ROOT}/config.toml
TOOL_LOG=${STAGE_ROOT}/builder-installation \
tool-log ${PYTHON} ${SOURCE_ROOT}/x.py install --config ${STAGE_ROOT}/config.toml

# Build and install the package
package-invoke-archive-install
